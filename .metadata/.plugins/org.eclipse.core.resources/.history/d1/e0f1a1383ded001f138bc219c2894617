/*
 * stm32f407xx_i2c_driver.c
 *
 *  Created on: Feb 16, 2025
 *      Author: furkanserper
 */

#include "stm32f407xx_i2c_driver.h"


/*
 * Peripheral Clock Setup
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pI2Cx == I2C1)
		{
			I2C1_PCLK_EN();
		}else if(pI2Cx == I2C2)
		{
			I2C2_PCLK_EN();
		}else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_EN();
		}

	}else
	{
		if(pI2Cx == I2C1)
		{
			I2C1_PCLK_DIS();
		}else if(pI2Cx == I2C2)
		{
			I2C2_PCLK_DIS();
		}else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DIS();
		}
	}
}


void I2C_Init(I2C_Handle_t *pI2CHandle)
{
	uint32_t tempreg = 0;

	tempreg |= (pI2CHandle->I2C_Config.I2C_ACKControl << 10);
}


void I2C_DeInit(I2C_RegDef_t *pI2Cx)
{



}

uint32_t RCC_GetPLLOutputClock(void)
{
	return 0;
}

uint32_t RCC_GetPCLK1Value(void)
{
	uint32_t pclk1,SystemClk;

	uint8_t clksrc;

	clksrc = ((RCC->CFGR >> 2) & 0x3);

	if(clksrc == 0)
	{
		SystemClk = 16000000;  // HSI clock

	}else(clksrc == 1)
	{
		SystemClk = 8000000;  // HSI clock
	}else(clksrc == 2)
	{
		SystemClk = RCC_GetPLLOutputClock();
	}

	return pclk1;
}


void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
	if(EnOrDi == ENABLE)
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);

	}else if(EnOrDi == DISABLE)
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}


}



/*
 * IRQ Confifuration and ISR handling
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(IRQNumber <= 31)
		{
			//Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);

		}else if((IRQNumber > 31) & (IRQNumber < 64)) //32 to 63
		{
			//Program ISER1 Register
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));

		}else if((IRQNumber >= 64) & (IRQNumber < 96)) //64 to 95
		{
			//Program ISER2 Register
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
		}
	}else if(EnorDi == DISABLE)
	{
		if(IRQNumber <= 31)
		{
			//Program ICER0 Register
			*NVIC_ICER0 |= (1 << IRQNumber);

		}else if((IRQNumber > 31) & (IRQNumber < 64))
		{
			//Program ICER1 Register
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
		}else if((IRQNumber >= 64) & (IRQNumber < 96))
		{
			//Program ICER2 Register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}


}


void I2C_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
	uint8_t iprx = IRQNumber / 4;
	uint8_t iprx_section = IRQNumber % 4;
	uint8_t shift_amount  = (iprx_section * 8) + (8 - NO_PR_BITS_IMPLEMENTED);

	*(NVIC_PR_BASE_ADDR + iprx) |= (IRQPriority << shift_amount);

}

