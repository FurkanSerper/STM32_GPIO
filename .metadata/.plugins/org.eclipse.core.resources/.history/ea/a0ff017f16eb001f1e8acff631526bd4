/*
 * stm32f407xx.h
 *
 *  Created on: Feb 7, 2025
 *      Author: furkanserper
 */

#ifndef INC_STM32F407XX_H_
#define INC_STM32F407XX_H_


#include <stdio.h>
#include <stdint.h>

#define __vo volatile


/*
 * ARM Cortex M4 Processor NVIC ISERx Register Addresses
 */
#define NVIC_ISER0				((__vo uint32_t*)0xE000E100)
#define NVIC_ISER1				((__vo uint32_t*)0xE000E104)
#define NVIC_ISER2				((__vo uint32_t*)0xE000E108)
#define NVIC_ISER3				((__vo uint32_t*)0xE000E10C)

/*
 * ARM Cortex M4 Processor NVIC ICERx Register Addresses
 */
#define NVIC_ICER0				((__vo uint32_t*)0xE000E180)
#define NVIC_ICER1				((__vo uint32_t*)0xE000E184)
#define NVIC_ICER2				((__vo uint32_t*)0xE000E188)
#define NVIC_ICER3				((__vo uint32_t*)0xE000E18C)

/*
 * ARM Cortex M4 Processor Priority  Register Addresses
 */
#define NVIC_PR_BASE_ADDR 		((__vo uint32_t*)0xE000E400)

#define NO_PR_BITS_IMPLEMENTED	4

/* Check the value from Table 5. Flash module organization in Reference Manual */
#define FLASB_BASEADDR			0x08000000U		/* Flash Base Address */
#define SRAM1_BASEADDR			0x20000000U     /* SRAM1 Base Address */
#define SRAM2_BASEADDR			0x2001C000U     /* SRAM2 Base Address */
#define ROM_BASEADDR			0x1FFF0000U     /* System Memory - ROM Address*/
#define SRAM 					SRAM1_BASEADDR  /* Same with SRAM1 Base Address */


#define PERIPH_BASE				0x40000000U
#define APB1PERIPH_BASE			PERIPH_BASE
#define APB2PERIPH_BASE			0x40010000U
#define AHB1PERIPH_BASE         0x40020000U
#define AHB2PERIPH_BASE         0x50000000U


/* Base addresses of peripherals whic are hangion on AHb1 bus
 * TODO : complete for all other peripherals
 */


#define GPIOA_BASEADDR			(AHB1PERIPH_BASE + 0x0000)
#define GPIOB_BASEADDR			(AHB1PERIPH_BASE + 0x0400)
#define GPIOC_BASEADDR			(AHB1PERIPH_BASE + 0x0800)
#define GPIOD_BASEADDR			(AHB1PERIPH_BASE + 0x0C00)
#define GPIOE_BASEADDR			(AHB1PERIPH_BASE + 0x1000)
#define GPIOF_BASEADDR			(AHB1PERIPH_BASE + 0x1400)
#define GPIOG_BASEADDR			(AHB1PERIPH_BASE + 0x1800)
#define GPIOH_BASEADDR			(AHB1PERIPH_BASE + 0x1C00)
#define GPIOI_BASEADDR			(AHB1PERIPH_BASE + 0x2000)
#define RCC_BASEADDR			(AHB1PERIPH_BASE + 0x3800)

/*  Base addresses of peripherals which are hanging on APB1 bus    */

#define I2C1_BASEADDR 			(APB1PERIPH_BASE + 0x5400)
#define I2C2_BASEADDR 			(APB1PERIPH_BASE + 0x5800)
#define I2C3_BASEADDR 			(APB1PERIPH_BASE + 0x5C00)

#define SPI2_BASEADDR			(APB1PERIPH_BASE + 0x3800)
#define SPI3_BASEADDR			(APB1PERIPH_BASE + 0x3C00)

#define USART2_BASEADDR			(APB1PERIPH_BASE + 0x4400)
#define USART3_BASEADDR			(APB1PERIPH_BASE + 0x4800)
#define UART4_BASEADDR			(APB1PERIPH_BASE + 0x4C00)
#define UART5_BASEADDR			(APB1PERIPH_BASE + 0x5000)

/*  Base addresses of peripherals which are hanging on APB2 bus    */
#define SPI1_BASEADDR			(APB2PERIPH_BASE + 0x3000)
#define USART1_BASEADDR			(APB2PERIPH_BASE + 0x1000)
#define USART6_BASEADDR			(APB2PERIPH_BASE + 0x1400)
#define EXTI_BASEADDR			(APB2PERIPH_BASE + 0x3C00)
#define SYSCFG_BASEADDR			(APB2PERIPH_BASE + 0x3800)
#define SPI4_BASEADDR			(APB2PERIPH_BASE + 0x3400)



/* Peripheral Register Definition Structures     */

typedef struct
{
	__vo uint32_t MODER;			/*  GPIO port mode register    								*/
	__vo uint32_t OTYPER;		/*	GPIO port output type register							*/
	__vo uint32_t OSPEEDR;		/*	GPIO port output speed register							*/
	__vo uint32_t PUPDR;			/*	GPIO port pull-up/pull-down register					*/
	__vo uint32_t IDR;			/*	GPIO port input data register							*/
	__vo uint32_t ODR;			/*	GPIO port output data register							*/
	__vo uint32_t BSRR;			/*	GPIO port bit set/reset register						*/
	__vo uint32_t LCKR;			/*	GPIO port configuration lock register					*/
	__vo uint32_t AFR[2];		/*	GPIO alternate function low register - high register	*/
}GPIO_RegDef_t;



/* SPI Register Definition Structures     */
typedef struct
{
	__vo uint32_t CR1;			/*  SPI control register 1 (SPI_CR1) (not used in I2S mode) 		*/
	__vo uint32_t CR2;			/*	SPI control register 2 (SPI_CR2)								*/
	__vo uint32_t SR;			/*	SPI status register (SPI_SR)									*/
	__vo uint32_t DR;			/*	SPI data register (SPI_DR)										*/
	__vo uint32_t CRCPR;		/*	SPI CRC polynomial register (SPI_CRCPR) (not used in I2S mode)	*/
	__vo uint32_t RXCRCR;		/*	SPI RX CRC register (SPI_RXCRCR) (not used in I2S mode)			*/
	__vo uint32_t TXCRCR;		/*	SPI TX CRC register (SPI_TXCRCR) (not used in I2S mode)			*/
	__vo uint32_t I2SCFGR;		/*	SPI_I2S configuration register (SPI_I2SCFGR)					*/
	__vo uint32_t I2SPR;		/*	SPI_I2S prescaler register (SPI_I2SPR)							*/
}SPI_RegDef_t;

typedef struct
{
	__vo uint32_t  CR;
	__vo uint32_t  PLLCFGR;
	__vo uint32_t  CFGR;
	__vo uint32_t  CIR;
	__vo uint32_t  AHB1RSTR;
	__vo uint32_t  AHB2RSTR;
	__vo uint32_t  AHB3RSTR;
	uint32_t  RESERVED0;
	__vo uint32_t  APB1RSTR;
	__vo uint32_t  APB2RSTR;
	uint32_t  RESERVED1[2];
	__vo uint32_t  AHB1ENR;
	__vo uint32_t  AHB2ENR;
	__vo uint32_t  AHB3ENR;
	__vo uint32_t  RESERVED2;
	__vo uint32_t  APB1ENR;
	__vo uint32_t  APB2ENR;
	uint32_t  RESERVED3[2];
	__vo uint32_t  AHB1LPENR;
	__vo uint32_t  AHB2LPENR;
	__vo uint32_t  AHB3LPENR;
	uint32_t  RESERVED4;
	__vo uint32_t  APB1LPENR;
	__vo uint32_t  APB2LPENR;
	uint32_t  RESERVED5[2];
	__vo uint32_t  BDCR;
	__vo uint32_t  CSR;
	uint32_t  RESERVED6[2];
	__vo uint32_t  SSCGR;
	__vo uint32_t  PLLI2SCFGR;
	/* TODO : CKGATENR ?    DCKCFGR2 ? */

}RCC_RegDef_t;




typedef struct
{
	__vo uint32_t IMR;			/* Address offset: 0x00   */
	__vo uint32_t EMR;			/* Address offset: 0x04   */
	__vo uint32_t RTSR;			/* Address offset: 0x08   */
	__vo uint32_t FTSR;			/* Address offset: 0x0C   */
	__vo uint32_t SWIER;		/* Address offset: 0x10   */
	__vo uint32_t PR;			/* Address offset: 0x14   */

}EXTI_RegDef_t;



typedef struct
{
	__vo uint32_t MEMRMP;			/* Address offset: 0x00   */
	__vo uint32_t PMC;				/* Address offset: 0x04   */
	__vo uint32_t EXTICR[4];			/* Address offset: 0x08-0x14   */
	__vo uint32_t RESERVED1[2];		/* Address offset: 0x18-1C   */
	__vo uint32_t CMPCR;			/* Address offset: 0x20   */
	__vo uint32_t RESERVED2[2];		/* Address offset: 0x24-28   */
	__vo uint32_t CFGR;				/* Address offset: 0x2C  */

}SYSCFG_RegDef_t;

/*  Peripheral Definition (Peripheral base addresses typecasted to xxx_RegDef_t	 */

#define GPIOA           ((GPIO_RegDef_t *)GPIOA_BASEADDR)
#define GPIOB           ((GPIO_RegDef_t *)GPIOB_BASEADDR)
#define GPIOC           ((GPIO_RegDef_t *)GPIOC_BASEADDR)
#define GPIOD           ((GPIO_RegDef_t *)GPIOD_BASEADDR)
#define GPIOE           ((GPIO_RegDef_t *)GPIOE_BASEADDR)
#define GPIOF           ((GPIO_RegDef_t *)GPIOF_BASEADDR)
#define GPIOG           ((GPIO_RegDef_t *)GPIOG_BASEADDR)
#define GPIOH           ((GPIO_RegDef_t *)GPIOH_BASEADDR)
#define GPIOI           ((GPIO_RegDef_t *)GPIOI_BASEADDR)

#define RCC				((RCC_RegDef_t *)RCC_BASEADDR)

#define EXTI			((EXTI_RegDef_t *)EXTI_BASEADDR)

#define SYSCFG			((SYSCFG_RegDef_t *)SYSCFG_BASEADDR)

#define SPI1  			((SPI_RegDef_t*)SPI1_BASEADDR)
#define SPI2  			((SPI_RegDef_t*)SPI2_BASEADDR)
#define SPI3  			((SPI_RegDef_t*)SPI3_BASEADDR)
#define SPI4  			((SPI_RegDef_t*)SPI4_BASEADDR)


/*
 * Clock Enable Macros for GPIOx Peripherals
 */
#define GPIOA_PCLK_EN()		(RCC->AHB1ENR |= (1<< 0))
#define GPIOB_PCLK_EN()		(RCC->AHB1ENR |= (1<< 1))
#define GPIOC_PCLK_EN()		(RCC->AHB1ENR |= (1<< 2))
#define GPIOD_PCLK_EN()		(RCC->AHB1ENR |= (1<< 3))
#define GPIOE_PCLK_EN()		(RCC->AHB1ENR |= (1<< 4))
#define GPIOF_PCLK_EN()		(RCC->AHB1ENR |= (1<< 5))
#define GPIOG_PCLK_EN()		(RCC->AHB1ENR |= (1<< 6))
#define GPIOH_PCLK_EN()		(RCC->AHB1ENR |= (1<< 7))
#define GPIOI_PCLK_EN()		(RCC->AHB1ENR |= (1<< 8))


/*
 * Clock Enable Macros for I2Cx Peripherals
 */
#define I2C1_PCLK_EN()		(RCC->APB1ENR |= (1<<21))
#define I2C2_PCLK_EN()		(RCC->APB1ENR |= (1<<22))
#define I2C3_PCLK_EN()		(RCC->APB1ENR |= (1<<23))


/*
 * Clock Enable Macros for SPIx Peripherals
 */

#define SPI1_PCLK_EN()		(RCC->APB2ENR |= (1<<12))
#define SPI2_PCLK_EN()		(RCC->APB1ENR |= (1<<14))
#define SPI3_PCLK_EN()		(RCC->APB1ENR |= (1<<15))
#define SPI4_PCLK_EN()		(RCC->APB2ENR |= (1<<13))
#define SPI5_PCLK_EN()		(RCC->APB2ENR |= (1<<20))
#define SPI6_PCLK_EN()		(RCC->APB2ENR |= (1<<21))



/*
 * Clock Enable Macros for USARTx Peripherals
 */
#define USART1_PCLK_EN()		(RCC->APB2ENR |= (1<<4))
#define USART2_PCLK_EN()		(RCC->APB1ENR |= (1<<17))
#define USART3_PCLK_EN()		(RCC->APB1ENR |= (1<<18))
#define UART4_PCLK_EN()			(RCC->APB1ENR |= (1<<19))
#define UART5_PCLK_EN()			(RCC->APB1ENR |= (1<<20))
#define USART6_PCLK_EN()		(RCC->APB2ENR |= (1<<5))
#define UART7_PCLK_EN()			(RCC->APB1ENR |= (1<<30))
#define UART8_PCLK_EN()			(RCC->APB1ENR |= (1<<31))



/*
 * Clock Enable Macros for SYSCFG Peripherals
 */
#define SYSCFG_PCLK_EN()        (RCC->APB2ENR |= (1<<14))




/*
 * DISABLE
 */
/*
 *
 *
 * Clock Enable Macros for GPIOx Peripherals
 */
#define GPIOA_PCLK_DIS()		(RCC->AHB1ENR &= ~(1<< 0))
#define GPIOB_PCLK_DIS()		(RCC->AHB1ENR &= ~(1<< 1))
#define GPIOC_PCLK_DIS()		(RCC->AHB1ENR &= ~(1<< 2))
#define GPIOD_PCLK_DIS()		(RCC->AHB1ENR &= ~(1<< 3))
#define GPIOE_PCLK_DIS()		(RCC->AHB1ENR &= ~(1<< 4))
#define GPIOF_PCLK_DIS()		(RCC->AHB1ENR &= ~(1<< 5))
#define GPIOG_PCLK_DIS()		(RCC->AHB1ENR &= ~(1<< 6))
#define GPIOH_PCLK_DIS()		(RCC->AHB1ENR &= ~(1<< 7))
#define GPIOI_PCLK_DIS()		(RCC->AHB1ENR &= ~(1<< 8))


/*
 * Clock Enable Macros for I2Cx Peripherals
 */
#define I2C1_PCLK_DIS()		(RCC->APB1ENR &= ~(1<<21))
#define I2C2_PCLK_DIS()		(RCC->APB1ENR &= ~(1<<22))
#define I2C3_PCLK_DIS()		(RCC->APB1ENR &= ~(1<<23))


/*
 * Clock Enable Macros for SPIx Peripherals
 */

#define SPI1_PCLK_DIS()		(RCC->APB2ENR &= ~(1<<12))
#define SPI2_PCLK_DIS()		(RCC->APB1ENR &= ~(1<<14))
#define SPI3_PCLK_DIS()		(RCC->APB1ENR &= ~(1<<15))
#define SPI4_PCLK_DIS()		(RCC->APB2ENR &= ~(1<<13))
#define SPI5_PCLK_DIS()		(RCC->APB2ENR &= ~(1<<20))
#define SPI6_PCLK_DIS()		(RCC->APB2ENR &= ~(1<<21))



/*
 * Clock Enable Macros for USARTx Peripherals
 */
#define USART1_PCLK_DIS()		(RCC->APB2ENR &= ~(1<<4))
#define USART2_PCLK_DIS()		(RCC->APB1ENR &= ~(1<<17))
#define USART3_PCLK_DIS()		(RCC->APB1ENR &= ~(1<<18))
#define UART4_PCLK_DIS()		(RCC->APB1ENR &= ~(1<<19))
#define UART5_PCLK_DIS()		(RCC->APB1ENR &= ~(1<<20))
#define USART6_PCLK_DIS()		(RCC->APB2ENR &= ~(1<<5))
#define UART7_PCLK_DIS()		(RCC->APB1ENR &= ~(1<<30))
#define UART8_PCLK_DIS()		(RCC->APB1ENR &= ~(1<<31))



/*
 * Clock Enable Macros for SYSCFG Peripherals
 */
#define SYSCFG_PCLK_DIS()        (RCC->APB2ENR &= ~(1<<14))


/*
 * Macros to reset GPIOx Peropherals
 */

#define GPIOA_REG_RESET()			do{(RCC->AHB1RSTR |= (1<<0)); (RCC->AHB1RSTR &= ~(1<<0)); }while(0)
#define GPIOB_REG_RESET()			do{(RCC->AHB1RSTR |= (1<<1)); (RCC->AHB1RSTR &= ~(1<<1)); }while(0)
#define GPIOC_REG_RESET()			do{(RCC->AHB1RSTR |= (1<<2)); (RCC->AHB1RSTR &= ~(1<<2)); }while(0)
#define GPIOD_REG_RESET()			do{(RCC->AHB1RSTR |= (1<<3)); (RCC->AHB1RSTR &= ~(1<<3)); }while(0)
#define GPIOE_REG_RESET()			do{(RCC->AHB1RSTR |= (1<<4)); (RCC->AHB1RSTR &= ~(1<<4)); }while(0)
#define GPIOF_REG_RESET()			do{(RCC->AHB1RSTR |= (1<<5)); (RCC->AHB1RSTR &= ~(1<<5)); }while(0)
#define GPIOG_REG_RESET()			do{(RCC->AHB1RSTR |= (1<<6)); (RCC->AHB1RSTR &= ~(1<<6)); }while(0)
#define GPIOH_REG_RESET()			do{(RCC->AHB1RSTR |= (1<<7)); (RCC->AHB1RSTR &= ~(1<<7)); }while(0)
#define GPIOI_REG_RESET()			do{(RCC->AHB1RSTR |= (1<<8)); (RCC->AHB1RSTR &= ~(1<<8)); }while(0)


#define GPIO_BASEADDR_TO_CODE(x)	((x == GPIOA) ? 0 :\
									(x == GPIOB) ? 1 :\
									(x == GPIOC) ? 2 :\
									(x == GPIOD) ? 3 :\
									(x == GPIOE) ? 4 :\
									(x == GPIOF) ? 5 :\
									(x == GPIOG) ? 6 :\
									(x == GPIOH) ? 7 :\
									(x == GPIOI) ? 8 :0)


// IRQ (Interrup Request) Numbers of STM32F407x MCU
#define IRQ_NO_EXTI0				6
#define IRQ_NO_EXTI1				7
#define IRQ_NO_EXTI2				8
#define IRQ_NO_EXTI3				9
#define IRQ_NO_EXTI4				10
#define IRQ_NO_EXTI9_5				23
#define IRQ_NO_EXTI15_10			40



/*
 * Macros for all the possible priority levels
 */
#define NVIC_IRQ_PRI0				0
#define NVIC_IRQ_PRI15				15
/*
 * Generic Macros
 */

#define ENABLE 					1
#define DISABLE 				0
#define SET 					ENABLE
#define RESET					DISABLE
#define GPIO_PIN_SET			SET
#define GPIO_PIN_RESET			RESET

/*
 * Bit position of SPI_CR1
 */
#define SPI_CR1_CPHA		0
#define SPI_CR1_CPOL		1
#define SPI_CR1_MSTR		2
#define SPI_CR1_BR			3
#define SPI_CR1_SPE			6
#define SPI_CR1_LSB			7
#define SPI_CR1_SSI			8
#define SPI_CR1_SSM			9
#define SPI_CR1_RXONLY		10
#define SPI_CR1_DFF			11
#define SPI_CR1_CRCNEXT		12
#define SPI_CR1_CRCEN		13
#define SPI_CR1_BIDIOE		14
#define SPI_CR1_BIDIMODE	15

/*
 * Bit position of SPI_CR2
 */
#define SPI_CR2_RXDMAEN		0
#define SPI_CR2_TXDMAEN		1
#define SPI_CR2_SSOE		2
#define SPI_CR2_FRF			4
#define SPI_CR2_ERRIE		5
#define SPI_CR2_RXNEIE		6
#define SPI_CR2_TXEIE		7



#endif /* INC_STM32F407XX_H_ */
