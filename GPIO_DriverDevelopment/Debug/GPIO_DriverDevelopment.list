
GPIO_DriverDevelopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001d84  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001f0c  08001f0c  00002f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001f40  08001f40  0000307c  2**0
                  CONTENTS
  4 .ARM          00000000  08001f40  08001f40  0000307c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001f40  08001f40  0000307c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001f40  08001f40  00002f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001f44  08001f44  00002f44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08001f48  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000307c  2**0
                  CONTENTS
 10 .bss          000001b4  2000007c  2000007c  0000307c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  0000307c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000307c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001f4d  00000000  00000000  000030ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000781  00000000  00000000  00004ff9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000298  00000000  00000000  00005780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001e9  00000000  00000000  00005a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000345c  00000000  00000000  00005c01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002cd3  00000000  00000000  0000905d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000c494  00000000  00000000  0000bd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000181c4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000108c  00000000  00000000  00018208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00019294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001ef4 	.word	0x08001ef4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	08001ef4 	.word	0x08001ef4

080001c8 <delay>:

uint8_t rcv_buf[32];


void delay(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i<500000/2; i++)
 80001ce:	2300      	movs	r3, #0
 80001d0:	607b      	str	r3, [r7, #4]
 80001d2:	e002      	b.n	80001da <delay+0x12>
 80001d4:	687b      	ldr	r3, [r7, #4]
 80001d6:	3301      	adds	r3, #1
 80001d8:	607b      	str	r3, [r7, #4]
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	4a04      	ldr	r2, [pc, #16]	@ (80001f0 <delay+0x28>)
 80001de:	4293      	cmp	r3, r2
 80001e0:	d9f8      	bls.n	80001d4 <delay+0xc>
	{

	}
}
 80001e2:	bf00      	nop
 80001e4:	bf00      	nop
 80001e6:	370c      	adds	r7, #12
 80001e8:	46bd      	mov	sp, r7
 80001ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001ee:	4770      	bx	lr
 80001f0:	0003d08f 	.word	0x0003d08f

080001f4 <I2C1_GPIOInits>:
/*
 * SCL --> PB6
 * SDA --> PB7
 */
void I2C1_GPIOInits(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b084      	sub	sp, #16
 80001f8:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 80001fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000230 <I2C1_GPIOInits+0x3c>)
 80001fc:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001fe:	2302      	movs	r3, #2
 8000200:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000202:	2301      	movs	r3, #1
 8000204:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000206:	2304      	movs	r3, #4
 8000208:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800020a:	2302      	movs	r3, #2
 800020c:	72bb      	strb	r3, [r7, #10]

	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800020e:	2306      	movs	r3, #6
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 fa7b 	bl	8000710 <GPIO_Init>

	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_7;
 800021a:	2307      	movs	r3, #7
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 fa75 	bl	8000710 <GPIO_Init>


}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40020400 	.word	0x40020400

08000234 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000238:	4b09      	ldr	r3, [pc, #36]	@ (8000260 <I2C1_Inits+0x2c>)
 800023a:	4a0a      	ldr	r2, [pc, #40]	@ (8000264 <I2C1_Inits+0x30>)
 800023c:	601a      	str	r2, [r3, #0]

	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800023e:	4b08      	ldr	r3, [pc, #32]	@ (8000260 <I2C1_Inits+0x2c>)
 8000240:	2201      	movs	r2, #1
 8000242:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_DEVICE_ADDRESS;
 8000244:	4b06      	ldr	r3, [pc, #24]	@ (8000260 <I2C1_Inits+0x2c>)
 8000246:	2261      	movs	r2, #97	@ 0x61
 8000248:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800024a:	4b05      	ldr	r3, [pc, #20]	@ (8000260 <I2C1_Inits+0x2c>)
 800024c:	2200      	movs	r2, #0
 800024e:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000250:	4b03      	ldr	r3, [pc, #12]	@ (8000260 <I2C1_Inits+0x2c>)
 8000252:	4a05      	ldr	r2, [pc, #20]	@ (8000268 <I2C1_Inits+0x34>)
 8000254:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000256:	4802      	ldr	r0, [pc, #8]	@ (8000260 <I2C1_Inits+0x2c>)
 8000258:	f000 fcec 	bl	8000c34 <I2C_Init>

}
 800025c:	bf00      	nop
 800025e:	bd80      	pop	{r7, pc}
 8000260:	20000098 	.word	0x20000098
 8000264:	40005400 	.word	0x40005400
 8000268:	000186a0 	.word	0x000186a0

0800026c <GPIO_ButtonInit>:

void 	GPIO_ButtonInit()
{
 800026c:	b580      	push	{r7, lr}
 800026e:	b086      	sub	sp, #24
 8000270:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GpioLed;

	//this is button GPIO configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000272:	4b15      	ldr	r3, [pc, #84]	@ (80002c8 <GPIO_ButtonInit+0x5c>)
 8000274:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000276:	2300      	movs	r3, #0
 8000278:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800027a:	2300      	movs	r3, #0
 800027c:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800027e:	2302      	movs	r3, #2
 8000280:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000282:	2300      	movs	r3, #0
 8000284:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000286:	2101      	movs	r1, #1
 8000288:	480f      	ldr	r0, [pc, #60]	@ (80002c8 <GPIO_ButtonInit+0x5c>)
 800028a:	f000 f959 	bl	8000540 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOBtn);
 800028e:	f107 030c 	add.w	r3, r7, #12
 8000292:	4618      	mov	r0, r3
 8000294:	f000 fa3c 	bl	8000710 <GPIO_Init>

	GpioLed.pGPIOx = GPIOD;
 8000298:	4b0c      	ldr	r3, [pc, #48]	@ (80002cc <GPIO_ButtonInit+0x60>)
 800029a:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800029c:	230c      	movs	r3, #12
 800029e:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002a0:	2301      	movs	r3, #1
 80002a2:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002a4:	2302      	movs	r3, #2
 80002a6:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002a8:	2301      	movs	r3, #1
 80002aa:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 80002ac:	2300      	movs	r3, #0
 80002ae:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 80002b0:	2101      	movs	r1, #1
 80002b2:	4806      	ldr	r0, [pc, #24]	@ (80002cc <GPIO_ButtonInit+0x60>)
 80002b4:	f000 f944 	bl	8000540 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 80002b8:	463b      	mov	r3, r7
 80002ba:	4618      	mov	r0, r3
 80002bc:	f000 fa28 	bl	8000710 <GPIO_Init>

}
 80002c0:	bf00      	nop
 80002c2:	3718      	adds	r7, #24
 80002c4:	46bd      	mov	sp, r7
 80002c6:	bd80      	pop	{r7, pc}
 80002c8:	40020000 	.word	0x40020000
 80002cc:	40020c00 	.word	0x40020c00

080002d0 <main>:

int main(void)
{
 80002d0:	b580      	push	{r7, lr}
 80002d2:	b084      	sub	sp, #16
 80002d4:	af02      	add	r7, sp, #8

	uint8_t commandcode;
	uint8_t len;

	GPIO_ButtonInit();
 80002d6:	f7ff ffc9 	bl	800026c <GPIO_ButtonInit>

	// I2C Pin Initilization
	I2C1_GPIOInits();
 80002da:	f7ff ff8b 	bl	80001f4 <I2C1_GPIOInits>

	// I2C initilization
	I2C1_Inits();
 80002de:	f7ff ffa9 	bl	8000234 <I2C1_Inits>


	//I2C IRQ configurations
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_EV, ENABLE);
 80002e2:	2101      	movs	r1, #1
 80002e4:	201f      	movs	r0, #31
 80002e6:	f001 f8a1 	bl	800142c <I2C_IRQInterruptConfig>
	I2C_IRQInterruptConfig(IRQ_NO_I2C1_ER, ENABLE);
 80002ea:	2101      	movs	r1, #1
 80002ec:	2020      	movs	r0, #32
 80002ee:	f001 f89d 	bl	800142c <I2C_IRQInterruptConfig>


	//Enable the I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002f2:	2101      	movs	r1, #1
 80002f4:	4822      	ldr	r0, [pc, #136]	@ (8000380 <main+0xb0>)
 80002f6:	f001 f85b 	bl	80013b0 <I2C_PeripheralControl>

	//Ack bit is made 1 after PE=1
	I2C_ManageAcking(I2C1, I2C_ACK_ENABLE);
 80002fa:	2101      	movs	r1, #1
 80002fc:	4820      	ldr	r0, [pc, #128]	@ (8000380 <main+0xb0>)
 80002fe:	f001 f876 	bl	80013ee <I2C_ManageAcking>

	//wait for the button press
	while(1)
	{
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000302:	bf00      	nop
 8000304:	2100      	movs	r1, #0
 8000306:	481f      	ldr	r0, [pc, #124]	@ (8000384 <main+0xb4>)
 8000308:	f000 fba2 	bl	8000a50 <GPIO_ReadFromInputPin>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d0f8      	beq.n	8000304 <main+0x34>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000312:	f7ff ff59 	bl	80001c8 <delay>

		commandcode = 0x51;
 8000316:	2351      	movs	r3, #81	@ 0x51
 8000318:	71fb      	strb	r3, [r7, #7]

		while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDRESS, I2C_ENABLE_SR) != I2C_READY);
 800031a:	bf00      	nop
 800031c:	1df9      	adds	r1, r7, #7
 800031e:	2300      	movs	r3, #0
 8000320:	9300      	str	r3, [sp, #0]
 8000322:	2368      	movs	r3, #104	@ 0x68
 8000324:	2201      	movs	r2, #1
 8000326:	4818      	ldr	r0, [pc, #96]	@ (8000388 <main+0xb8>)
 8000328:	f000 fd8b 	bl	8000e42 <I2C_MasterSendDataIT>
 800032c:	4603      	mov	r3, r0
 800032e:	2b00      	cmp	r3, #0
 8000330:	d1f4      	bne.n	800031c <main+0x4c>

		while(I2C_MasterReceiveDataIT(&I2C1Handle, &len, 1, SLAVE_ADDRESS,I2C_ENABLE_SR) != I2C_READY);
 8000332:	bf00      	nop
 8000334:	1db9      	adds	r1, r7, #6
 8000336:	2300      	movs	r3, #0
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	2368      	movs	r3, #104	@ 0x68
 800033c:	2201      	movs	r2, #1
 800033e:	4812      	ldr	r0, [pc, #72]	@ (8000388 <main+0xb8>)
 8000340:	f000 fdc2 	bl	8000ec8 <I2C_MasterReceiveDataIT>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d1f4      	bne.n	8000334 <main+0x64>

		commandcode = 0x52;
 800034a:	2352      	movs	r3, #82	@ 0x52
 800034c:	71fb      	strb	r3, [r7, #7]
		while(I2C_MasterSendDataIT(&I2C1Handle, &commandcode, 1, SLAVE_ADDRESS, I2C_ENABLE_SR) != I2C_READY);
 800034e:	bf00      	nop
 8000350:	1df9      	adds	r1, r7, #7
 8000352:	2300      	movs	r3, #0
 8000354:	9300      	str	r3, [sp, #0]
 8000356:	2368      	movs	r3, #104	@ 0x68
 8000358:	2201      	movs	r2, #1
 800035a:	480b      	ldr	r0, [pc, #44]	@ (8000388 <main+0xb8>)
 800035c:	f000 fd71 	bl	8000e42 <I2C_MasterSendDataIT>
 8000360:	4603      	mov	r3, r0
 8000362:	2b00      	cmp	r3, #0
 8000364:	d1f4      	bne.n	8000350 <main+0x80>


		while(I2C_MasterReceiveDataIT(&I2C1Handle, &rcv_buf, len, SLAVE_ADDRESS, I2C_DISABLE_SR) != I2C_READY);
 8000366:	bf00      	nop
 8000368:	79ba      	ldrb	r2, [r7, #6]
 800036a:	2301      	movs	r3, #1
 800036c:	9300      	str	r3, [sp, #0]
 800036e:	2368      	movs	r3, #104	@ 0x68
 8000370:	4906      	ldr	r1, [pc, #24]	@ (800038c <main+0xbc>)
 8000372:	4805      	ldr	r0, [pc, #20]	@ (8000388 <main+0xb8>)
 8000374:	f000 fda8 	bl	8000ec8 <I2C_MasterReceiveDataIT>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1f4      	bne.n	8000368 <main+0x98>
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800037e:	e7c0      	b.n	8000302 <main+0x32>
 8000380:	40005400 	.word	0x40005400
 8000384:	40020000 	.word	0x40020000
 8000388:	20000098 	.word	0x20000098
 800038c:	200000c0 	.word	0x200000c0

08000390 <I2C1_EV_IRQHandler>:

}


void I2C1_EV_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
	I2C_EV_IRQHandling(&I2C1Handle);
 8000394:	4802      	ldr	r0, [pc, #8]	@ (80003a0 <I2C1_EV_IRQHandler+0x10>)
 8000396:	f000 fe46 	bl	8001026 <I2C_EV_IRQHandling>
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	20000098 	.word	0x20000098

080003a4 <I2C1_ER_IRQHandler>:


void I2C1_ER_IRQHandler(void)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	af00      	add	r7, sp, #0
	I2C_ER_IRQHandling(&I2C1Handle);
 80003a8:	4802      	ldr	r0, [pc, #8]	@ (80003b4 <I2C1_ER_IRQHandler+0x10>)
 80003aa:	f000 ff18 	bl	80011de <I2C_ER_IRQHandling>
}
 80003ae:	bf00      	nop
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000098 	.word	0x20000098

080003b8 <I2C_ApplicationEventCallback>:

void I2C_ApplicationEventCallback(I2C_Handle_t *pI2CHandle,uint8_t AppEvent)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
 80003c0:	460b      	mov	r3, r1
 80003c2:	70fb      	strb	r3, [r7, #3]
	if(AppEvent == I2C_EV_TX_CMPLT)
 80003c4:	78fb      	ldrb	r3, [r7, #3]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d103      	bne.n	80003d2 <I2C_ApplicationEventCallback+0x1a>
	{
		printf("Tx is completed\n");
 80003ca:	480e      	ldr	r0, [pc, #56]	@ (8000404 <I2C_ApplicationEventCallback+0x4c>)
 80003cc:	f001 f9f6 	bl	80017bc <puts>
		I2C_CloseSendData(pI2CHandle);

		//generate the stop condition to release the bus
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
	}
}
 80003d0:	e014      	b.n	80003fc <I2C_ApplicationEventCallback+0x44>
	}else if(AppEvent == I2C_EV_RX_CMPLT)
 80003d2:	78fb      	ldrb	r3, [r7, #3]
 80003d4:	2b02      	cmp	r3, #2
 80003d6:	d103      	bne.n	80003e0 <I2C_ApplicationEventCallback+0x28>
		printf("Rx is completed\n");
 80003d8:	480b      	ldr	r0, [pc, #44]	@ (8000408 <I2C_ApplicationEventCallback+0x50>)
 80003da:	f001 f9ef 	bl	80017bc <puts>
}
 80003de:	e00d      	b.n	80003fc <I2C_ApplicationEventCallback+0x44>
	}else if(AppEvent == I2C_ERROR_AF)
 80003e0:	78fb      	ldrb	r3, [r7, #3]
 80003e2:	2b05      	cmp	r3, #5
 80003e4:	d10a      	bne.n	80003fc <I2C_ApplicationEventCallback+0x44>
		printf("ERROR ACK failute\n");
 80003e6:	4809      	ldr	r0, [pc, #36]	@ (800040c <I2C_ApplicationEventCallback+0x54>)
 80003e8:	f001 f9e8 	bl	80017bc <puts>
		I2C_CloseSendData(pI2CHandle);
 80003ec:	6878      	ldr	r0, [r7, #4]
 80003ee:	f000 fd05 	bl	8000dfc <I2C_CloseSendData>
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	4618      	mov	r0, r3
 80003f8:	f000 fbb3 	bl	8000b62 <I2C_GenerateStopCondition>
}
 80003fc:	bf00      	nop
 80003fe:	3708      	adds	r7, #8
 8000400:	46bd      	mov	sp, r7
 8000402:	bd80      	pop	{r7, pc}
 8000404:	08001f0c 	.word	0x08001f0c
 8000408:	08001f1c 	.word	0x08001f1c
 800040c:	08001f2c 	.word	0x08001f2c

08000410 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000410:	b580      	push	{r7, lr}
 8000412:	b086      	sub	sp, #24
 8000414:	af00      	add	r7, sp, #0
 8000416:	60f8      	str	r0, [r7, #12]
 8000418:	60b9      	str	r1, [r7, #8]
 800041a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
 8000420:	e00a      	b.n	8000438 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000422:	f3af 8000 	nop.w
 8000426:	4601      	mov	r1, r0
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	1c5a      	adds	r2, r3, #1
 800042c:	60ba      	str	r2, [r7, #8]
 800042e:	b2ca      	uxtb	r2, r1
 8000430:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000432:	697b      	ldr	r3, [r7, #20]
 8000434:	3301      	adds	r3, #1
 8000436:	617b      	str	r3, [r7, #20]
 8000438:	697a      	ldr	r2, [r7, #20]
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	429a      	cmp	r2, r3
 800043e:	dbf0      	blt.n	8000422 <_read+0x12>
  }

  return len;
 8000440:	687b      	ldr	r3, [r7, #4]
}
 8000442:	4618      	mov	r0, r3
 8000444:	3718      	adds	r7, #24
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}

0800044a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800044a:	b580      	push	{r7, lr}
 800044c:	b086      	sub	sp, #24
 800044e:	af00      	add	r7, sp, #0
 8000450:	60f8      	str	r0, [r7, #12]
 8000452:	60b9      	str	r1, [r7, #8]
 8000454:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000456:	2300      	movs	r3, #0
 8000458:	617b      	str	r3, [r7, #20]
 800045a:	e009      	b.n	8000470 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	1c5a      	adds	r2, r3, #1
 8000460:	60ba      	str	r2, [r7, #8]
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	4618      	mov	r0, r3
 8000466:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800046a:	697b      	ldr	r3, [r7, #20]
 800046c:	3301      	adds	r3, #1
 800046e:	617b      	str	r3, [r7, #20]
 8000470:	697a      	ldr	r2, [r7, #20]
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	429a      	cmp	r2, r3
 8000476:	dbf1      	blt.n	800045c <_write+0x12>
  }
  return len;
 8000478:	687b      	ldr	r3, [r7, #4]
}
 800047a:	4618      	mov	r0, r3
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}

08000482 <_close>:

int _close(int file)
{
 8000482:	b480      	push	{r7}
 8000484:	b083      	sub	sp, #12
 8000486:	af00      	add	r7, sp, #0
 8000488:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800048a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800048e:	4618      	mov	r0, r3
 8000490:	370c      	adds	r7, #12
 8000492:	46bd      	mov	sp, r7
 8000494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000498:	4770      	bx	lr

0800049a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800049a:	b480      	push	{r7}
 800049c:	b083      	sub	sp, #12
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004aa:	605a      	str	r2, [r3, #4]
  return 0;
 80004ac:	2300      	movs	r3, #0
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	370c      	adds	r7, #12
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr

080004ba <_isatty>:

int _isatty(int file)
{
 80004ba:	b480      	push	{r7}
 80004bc:	b083      	sub	sp, #12
 80004be:	af00      	add	r7, sp, #0
 80004c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004c2:	2301      	movs	r3, #1
}
 80004c4:	4618      	mov	r0, r3
 80004c6:	370c      	adds	r7, #12
 80004c8:	46bd      	mov	sp, r7
 80004ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ce:	4770      	bx	lr

080004d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80004dc:	2300      	movs	r3, #0
}
 80004de:	4618      	mov	r0, r3
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
	...

080004ec <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80004ec:	480d      	ldr	r0, [pc, #52]	@ (8000524 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80004ee:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80004f0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80004f4:	480c      	ldr	r0, [pc, #48]	@ (8000528 <LoopForever+0x6>)
  ldr r1, =_edata
 80004f6:	490d      	ldr	r1, [pc, #52]	@ (800052c <LoopForever+0xa>)
  ldr r2, =_sidata
 80004f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000530 <LoopForever+0xe>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004fc:	e002      	b.n	8000504 <LoopCopyDataInit>

080004fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000500:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000502:	3304      	adds	r3, #4

08000504 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000504:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000506:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000508:	d3f9      	bcc.n	80004fe <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800050a:	4a0a      	ldr	r2, [pc, #40]	@ (8000534 <LoopForever+0x12>)
  ldr r4, =_ebss
 800050c:	4c0a      	ldr	r4, [pc, #40]	@ (8000538 <LoopForever+0x16>)
  movs r3, #0
 800050e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000510:	e001      	b.n	8000516 <LoopFillZerobss>

08000512 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000512:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000514:	3204      	adds	r2, #4

08000516 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000516:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000518:	d3fb      	bcc.n	8000512 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800051a:	f001 fa7d 	bl	8001a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800051e:	f7ff fed7 	bl	80002d0 <main>

08000522 <LoopForever>:

LoopForever:
  b LoopForever
 8000522:	e7fe      	b.n	8000522 <LoopForever>
  ldr   r0, =_estack
 8000524:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000528:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800052c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8000530:	08001f48 	.word	0x08001f48
  ldr r2, =_sbss
 8000534:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8000538:	20000230 	.word	0x20000230

0800053c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800053c:	e7fe      	b.n	800053c <ADC_IRQHandler>
	...

08000540 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	460b      	mov	r3, r1
 800054a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800054c:	78fb      	ldrb	r3, [r7, #3]
 800054e:	2b01      	cmp	r3, #1
 8000550:	d162      	bne.n	8000618 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	4a64      	ldr	r2, [pc, #400]	@ (80006e8 <GPIO_PeriClockControl+0x1a8>)
 8000556:	4293      	cmp	r3, r2
 8000558:	d106      	bne.n	8000568 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800055a:	4b64      	ldr	r3, [pc, #400]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 800055c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800055e:	4a63      	ldr	r2, [pc, #396]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000560:	f043 0301 	orr.w	r3, r3, #1
 8000564:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOI_PCLK_DIS();

		}

	}
}
 8000566:	e0b9      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	4a61      	ldr	r2, [pc, #388]	@ (80006f0 <GPIO_PeriClockControl+0x1b0>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d106      	bne.n	800057e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000570:	4b5e      	ldr	r3, [pc, #376]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000574:	4a5d      	ldr	r2, [pc, #372]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000576:	f043 0302 	orr.w	r3, r3, #2
 800057a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800057c:	e0ae      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	4a5c      	ldr	r2, [pc, #368]	@ (80006f4 <GPIO_PeriClockControl+0x1b4>)
 8000582:	4293      	cmp	r3, r2
 8000584:	d106      	bne.n	8000594 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000586:	4b59      	ldr	r3, [pc, #356]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a58      	ldr	r2, [pc, #352]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000592:	e0a3      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	4a58      	ldr	r2, [pc, #352]	@ (80006f8 <GPIO_PeriClockControl+0x1b8>)
 8000598:	4293      	cmp	r3, r2
 800059a:	d106      	bne.n	80005aa <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 800059c:	4b53      	ldr	r3, [pc, #332]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 800059e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a0:	4a52      	ldr	r2, [pc, #328]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80005a2:	f043 0308 	orr.w	r3, r3, #8
 80005a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005a8:	e098      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a53      	ldr	r2, [pc, #332]	@ (80006fc <GPIO_PeriClockControl+0x1bc>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d106      	bne.n	80005c0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80005b2:	4b4e      	ldr	r3, [pc, #312]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	4a4d      	ldr	r2, [pc, #308]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80005b8:	f043 0310 	orr.w	r3, r3, #16
 80005bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005be:	e08d      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	4a4f      	ldr	r2, [pc, #316]	@ (8000700 <GPIO_PeriClockControl+0x1c0>)
 80005c4:	4293      	cmp	r3, r2
 80005c6:	d106      	bne.n	80005d6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80005c8:	4b48      	ldr	r3, [pc, #288]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80005ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005cc:	4a47      	ldr	r2, [pc, #284]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80005ce:	f043 0320 	orr.w	r3, r3, #32
 80005d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005d4:	e082      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4a4a      	ldr	r2, [pc, #296]	@ (8000704 <GPIO_PeriClockControl+0x1c4>)
 80005da:	4293      	cmp	r3, r2
 80005dc:	d106      	bne.n	80005ec <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80005de:	4b43      	ldr	r3, [pc, #268]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a42      	ldr	r2, [pc, #264]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80005e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80005ea:	e077      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	4a46      	ldr	r2, [pc, #280]	@ (8000708 <GPIO_PeriClockControl+0x1c8>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d106      	bne.n	8000602 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80005f4:	4b3d      	ldr	r3, [pc, #244]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80005f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f8:	4a3c      	ldr	r2, [pc, #240]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80005fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000600:	e06c      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4a41      	ldr	r2, [pc, #260]	@ (800070c <GPIO_PeriClockControl+0x1cc>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d168      	bne.n	80006dc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800060a:	4b38      	ldr	r3, [pc, #224]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800060e:	4a37      	ldr	r2, [pc, #220]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000614:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000616:	e061      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	4a33      	ldr	r2, [pc, #204]	@ (80006e8 <GPIO_PeriClockControl+0x1a8>)
 800061c:	4293      	cmp	r3, r2
 800061e:	d106      	bne.n	800062e <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DIS();
 8000620:	4b32      	ldr	r3, [pc, #200]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000624:	4a31      	ldr	r2, [pc, #196]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000626:	f023 0301 	bic.w	r3, r3, #1
 800062a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800062c:	e056      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	4a2f      	ldr	r2, [pc, #188]	@ (80006f0 <GPIO_PeriClockControl+0x1b0>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d106      	bne.n	8000644 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DIS();
 8000636:	4b2d      	ldr	r3, [pc, #180]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063a:	4a2c      	ldr	r2, [pc, #176]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 800063c:	f023 0302 	bic.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000642:	e04b      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	4a2b      	ldr	r2, [pc, #172]	@ (80006f4 <GPIO_PeriClockControl+0x1b4>)
 8000648:	4293      	cmp	r3, r2
 800064a:	d106      	bne.n	800065a <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DIS();
 800064c:	4b27      	ldr	r3, [pc, #156]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 800064e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000650:	4a26      	ldr	r2, [pc, #152]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000652:	f023 0304 	bic.w	r3, r3, #4
 8000656:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000658:	e040      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	4a26      	ldr	r2, [pc, #152]	@ (80006f8 <GPIO_PeriClockControl+0x1b8>)
 800065e:	4293      	cmp	r3, r2
 8000660:	d106      	bne.n	8000670 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DIS();
 8000662:	4b22      	ldr	r3, [pc, #136]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000666:	4a21      	ldr	r2, [pc, #132]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000668:	f023 0308 	bic.w	r3, r3, #8
 800066c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800066e:	e035      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a22      	ldr	r2, [pc, #136]	@ (80006fc <GPIO_PeriClockControl+0x1bc>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d106      	bne.n	8000686 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DIS();
 8000678:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 800067a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800067c:	4a1b      	ldr	r2, [pc, #108]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 800067e:	f023 0310 	bic.w	r3, r3, #16
 8000682:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000684:	e02a      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	4a1d      	ldr	r2, [pc, #116]	@ (8000700 <GPIO_PeriClockControl+0x1c0>)
 800068a:	4293      	cmp	r3, r2
 800068c:	d106      	bne.n	800069c <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DIS();
 800068e:	4b17      	ldr	r3, [pc, #92]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	4a16      	ldr	r2, [pc, #88]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 8000694:	f023 0320 	bic.w	r3, r3, #32
 8000698:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800069a:	e01f      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4a19      	ldr	r2, [pc, #100]	@ (8000704 <GPIO_PeriClockControl+0x1c4>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d106      	bne.n	80006b2 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DIS();
 80006a4:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a8:	4a10      	ldr	r2, [pc, #64]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80006aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80006ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006b0:	e014      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	4a14      	ldr	r2, [pc, #80]	@ (8000708 <GPIO_PeriClockControl+0x1c8>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d106      	bne.n	80006c8 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DIS();
 80006ba:	4b0c      	ldr	r3, [pc, #48]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a0b      	ldr	r2, [pc, #44]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80006c0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006c6:	e009      	b.n	80006dc <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	4a10      	ldr	r2, [pc, #64]	@ (800070c <GPIO_PeriClockControl+0x1cc>)
 80006cc:	4293      	cmp	r3, r2
 80006ce:	d105      	bne.n	80006dc <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DIS();
 80006d0:	4b06      	ldr	r3, [pc, #24]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80006d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006d4:	4a05      	ldr	r2, [pc, #20]	@ (80006ec <GPIO_PeriClockControl+0x1ac>)
 80006d6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80006da:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	40020000 	.word	0x40020000
 80006ec:	40023800 	.word	0x40023800
 80006f0:	40020400 	.word	0x40020400
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020c00 	.word	0x40020c00
 80006fc:	40021000 	.word	0x40021000
 8000700:	40021400 	.word	0x40021400
 8000704:	40021800 	.word	0x40021800
 8000708:	40021c00 	.word	0x40021c00
 800070c:	40022000 	.word	0x40022000

08000710 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b086      	sub	sp, #24
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]

	// Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	2101      	movs	r1, #1
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff0c 	bl	8000540 <GPIO_PeriClockControl>
	//1. Configure Mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	795b      	ldrb	r3, [r3, #5]
 800072c:	2b03      	cmp	r3, #3
 800072e:	d81f      	bhi.n	8000770 <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	795b      	ldrb	r3, [r3, #5]
 8000734:	461a      	mov	r2, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	791b      	ldrb	r3, [r3, #4]
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	4619      	mov	r1, r3
 800074e:	2303      	movs	r3, #3
 8000750:	408b      	lsls	r3, r1
 8000752:	43db      	mvns	r3, r3
 8000754:	4619      	mov	r1, r3
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	400a      	ands	r2, r1
 800075c:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	6819      	ldr	r1, [r3, #0]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	697a      	ldr	r2, [r7, #20]
 800076a:	430a      	orrs	r2, r1
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	e0ca      	b.n	8000906 <GPIO_Init+0x1f6>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	795b      	ldrb	r3, [r3, #5]
 8000774:	2b04      	cmp	r3, #4
 8000776:	d117      	bne.n	80007a8 <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000778:	4b4a      	ldr	r3, [pc, #296]	@ (80008a4 <GPIO_Init+0x194>)
 800077a:	68db      	ldr	r3, [r3, #12]
 800077c:	687a      	ldr	r2, [r7, #4]
 800077e:	7912      	ldrb	r2, [r2, #4]
 8000780:	4611      	mov	r1, r2
 8000782:	2201      	movs	r2, #1
 8000784:	408a      	lsls	r2, r1
 8000786:	4611      	mov	r1, r2
 8000788:	4a46      	ldr	r2, [pc, #280]	@ (80008a4 <GPIO_Init+0x194>)
 800078a:	430b      	orrs	r3, r1
 800078c:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800078e:	4b45      	ldr	r3, [pc, #276]	@ (80008a4 <GPIO_Init+0x194>)
 8000790:	689b      	ldr	r3, [r3, #8]
 8000792:	687a      	ldr	r2, [r7, #4]
 8000794:	7912      	ldrb	r2, [r2, #4]
 8000796:	4611      	mov	r1, r2
 8000798:	2201      	movs	r2, #1
 800079a:	408a      	lsls	r2, r1
 800079c:	43d2      	mvns	r2, r2
 800079e:	4611      	mov	r1, r2
 80007a0:	4a40      	ldr	r2, [pc, #256]	@ (80008a4 <GPIO_Init+0x194>)
 80007a2:	400b      	ands	r3, r1
 80007a4:	6093      	str	r3, [r2, #8]
 80007a6:	e035      	b.n	8000814 <GPIO_Init+0x104>


		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	795b      	ldrb	r3, [r3, #5]
 80007ac:	2b05      	cmp	r3, #5
 80007ae:	d117      	bne.n	80007e0 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007b0:	4b3c      	ldr	r3, [pc, #240]	@ (80008a4 <GPIO_Init+0x194>)
 80007b2:	689b      	ldr	r3, [r3, #8]
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	7912      	ldrb	r2, [r2, #4]
 80007b8:	4611      	mov	r1, r2
 80007ba:	2201      	movs	r2, #1
 80007bc:	408a      	lsls	r2, r1
 80007be:	4611      	mov	r1, r2
 80007c0:	4a38      	ldr	r2, [pc, #224]	@ (80008a4 <GPIO_Init+0x194>)
 80007c2:	430b      	orrs	r3, r1
 80007c4:	6093      	str	r3, [r2, #8]

			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007c6:	4b37      	ldr	r3, [pc, #220]	@ (80008a4 <GPIO_Init+0x194>)
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	7912      	ldrb	r2, [r2, #4]
 80007ce:	4611      	mov	r1, r2
 80007d0:	2201      	movs	r2, #1
 80007d2:	408a      	lsls	r2, r1
 80007d4:	43d2      	mvns	r2, r2
 80007d6:	4611      	mov	r1, r2
 80007d8:	4a32      	ldr	r2, [pc, #200]	@ (80008a4 <GPIO_Init+0x194>)
 80007da:	400b      	ands	r3, r1
 80007dc:	60d3      	str	r3, [r2, #12]
 80007de:	e019      	b.n	8000814 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	795b      	ldrb	r3, [r3, #5]
 80007e4:	2b06      	cmp	r3, #6
 80007e6:	d115      	bne.n	8000814 <GPIO_Init+0x104>
		{
			//1. Configure both the FTSR and RTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e8:	4b2e      	ldr	r3, [pc, #184]	@ (80008a4 <GPIO_Init+0x194>)
 80007ea:	68db      	ldr	r3, [r3, #12]
 80007ec:	687a      	ldr	r2, [r7, #4]
 80007ee:	7912      	ldrb	r2, [r2, #4]
 80007f0:	4611      	mov	r1, r2
 80007f2:	2201      	movs	r2, #1
 80007f4:	408a      	lsls	r2, r1
 80007f6:	4611      	mov	r1, r2
 80007f8:	4a2a      	ldr	r2, [pc, #168]	@ (80008a4 <GPIO_Init+0x194>)
 80007fa:	430b      	orrs	r3, r1
 80007fc:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007fe:	4b29      	ldr	r3, [pc, #164]	@ (80008a4 <GPIO_Init+0x194>)
 8000800:	689b      	ldr	r3, [r3, #8]
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	7912      	ldrb	r2, [r2, #4]
 8000806:	4611      	mov	r1, r2
 8000808:	2201      	movs	r2, #1
 800080a:	408a      	lsls	r2, r1
 800080c:	4611      	mov	r1, r2
 800080e:	4a25      	ldr	r2, [pc, #148]	@ (80008a4 <GPIO_Init+0x194>)
 8000810:	430b      	orrs	r3, r1
 8000812:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	791b      	ldrb	r3, [r3, #4]
 8000818:	089b      	lsrs	r3, r3, #2
 800081a:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	791b      	ldrb	r3, [r3, #4]
 8000820:	f003 0303 	and.w	r3, r3, #3
 8000824:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4a1f      	ldr	r2, [pc, #124]	@ (80008a8 <GPIO_Init+0x198>)
 800082c:	4293      	cmp	r3, r2
 800082e:	d04d      	beq.n	80008cc <GPIO_Init+0x1bc>
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a1d      	ldr	r2, [pc, #116]	@ (80008ac <GPIO_Init+0x19c>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d032      	beq.n	80008a0 <GPIO_Init+0x190>
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a1c      	ldr	r2, [pc, #112]	@ (80008b0 <GPIO_Init+0x1a0>)
 8000840:	4293      	cmp	r3, r2
 8000842:	d02b      	beq.n	800089c <GPIO_Init+0x18c>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	4a1a      	ldr	r2, [pc, #104]	@ (80008b4 <GPIO_Init+0x1a4>)
 800084a:	4293      	cmp	r3, r2
 800084c:	d024      	beq.n	8000898 <GPIO_Init+0x188>
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a19      	ldr	r2, [pc, #100]	@ (80008b8 <GPIO_Init+0x1a8>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d01d      	beq.n	8000894 <GPIO_Init+0x184>
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a17      	ldr	r2, [pc, #92]	@ (80008bc <GPIO_Init+0x1ac>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d016      	beq.n	8000890 <GPIO_Init+0x180>
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	4a16      	ldr	r2, [pc, #88]	@ (80008c0 <GPIO_Init+0x1b0>)
 8000868:	4293      	cmp	r3, r2
 800086a:	d00f      	beq.n	800088c <GPIO_Init+0x17c>
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a14      	ldr	r2, [pc, #80]	@ (80008c4 <GPIO_Init+0x1b4>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d008      	beq.n	8000888 <GPIO_Init+0x178>
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4a13      	ldr	r2, [pc, #76]	@ (80008c8 <GPIO_Init+0x1b8>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d101      	bne.n	8000884 <GPIO_Init+0x174>
 8000880:	2308      	movs	r3, #8
 8000882:	e024      	b.n	80008ce <GPIO_Init+0x1be>
 8000884:	2300      	movs	r3, #0
 8000886:	e022      	b.n	80008ce <GPIO_Init+0x1be>
 8000888:	2307      	movs	r3, #7
 800088a:	e020      	b.n	80008ce <GPIO_Init+0x1be>
 800088c:	2306      	movs	r3, #6
 800088e:	e01e      	b.n	80008ce <GPIO_Init+0x1be>
 8000890:	2305      	movs	r3, #5
 8000892:	e01c      	b.n	80008ce <GPIO_Init+0x1be>
 8000894:	2304      	movs	r3, #4
 8000896:	e01a      	b.n	80008ce <GPIO_Init+0x1be>
 8000898:	2303      	movs	r3, #3
 800089a:	e018      	b.n	80008ce <GPIO_Init+0x1be>
 800089c:	2302      	movs	r3, #2
 800089e:	e016      	b.n	80008ce <GPIO_Init+0x1be>
 80008a0:	2301      	movs	r3, #1
 80008a2:	e014      	b.n	80008ce <GPIO_Init+0x1be>
 80008a4:	40013c00 	.word	0x40013c00
 80008a8:	40020000 	.word	0x40020000
 80008ac:	40020400 	.word	0x40020400
 80008b0:	40020800 	.word	0x40020800
 80008b4:	40020c00 	.word	0x40020c00
 80008b8:	40021000 	.word	0x40021000
 80008bc:	40021400 	.word	0x40021400
 80008c0:	40021800 	.word	0x40021800
 80008c4:	40021c00 	.word	0x40021c00
 80008c8:	40022000 	.word	0x40022000
 80008cc:	2300      	movs	r3, #0
 80008ce:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80008d0:	4b5c      	ldr	r3, [pc, #368]	@ (8000a44 <GPIO_Init+0x334>)
 80008d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008d4:	4a5b      	ldr	r2, [pc, #364]	@ (8000a44 <GPIO_Init+0x334>)
 80008d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008da:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 80008dc:	7c7a      	ldrb	r2, [r7, #17]
 80008de:	7cbb      	ldrb	r3, [r7, #18]
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	fa02 f103 	lsl.w	r1, r2, r3
 80008e6:	4a58      	ldr	r2, [pc, #352]	@ (8000a48 <GPIO_Init+0x338>)
 80008e8:	7cfb      	ldrb	r3, [r7, #19]
 80008ea:	3302      	adds	r3, #2
 80008ec:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR (interrupt Mask Register)
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80008f0:	4b56      	ldr	r3, [pc, #344]	@ (8000a4c <GPIO_Init+0x33c>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	687a      	ldr	r2, [r7, #4]
 80008f6:	7912      	ldrb	r2, [r2, #4]
 80008f8:	4611      	mov	r1, r2
 80008fa:	2201      	movs	r2, #1
 80008fc:	408a      	lsls	r2, r1
 80008fe:	4611      	mov	r1, r2
 8000900:	4a52      	ldr	r2, [pc, #328]	@ (8000a4c <GPIO_Init+0x33c>)
 8000902:	430b      	orrs	r3, r1
 8000904:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	799b      	ldrb	r3, [r3, #6]
 800090e:	461a      	mov	r2, r3
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	791b      	ldrb	r3, [r3, #4]
 8000914:	005b      	lsls	r3, r3, #1
 8000916:	fa02 f303 	lsl.w	r3, r2, r3
 800091a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	689a      	ldr	r2, [r3, #8]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	791b      	ldrb	r3, [r3, #4]
 8000926:	4619      	mov	r1, r3
 8000928:	2303      	movs	r3, #3
 800092a:	408b      	lsls	r3, r1
 800092c:	43db      	mvns	r3, r3
 800092e:	4619      	mov	r1, r3
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	400a      	ands	r2, r1
 8000936:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	6899      	ldr	r1, [r3, #8]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	697a      	ldr	r2, [r7, #20]
 8000944:	430a      	orrs	r2, r1
 8000946:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000948:	2300      	movs	r3, #0
 800094a:	617b      	str	r3, [r7, #20]

	//3. Configure the PuPd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	79db      	ldrb	r3, [r3, #7]
 8000950:	461a      	mov	r2, r3
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	791b      	ldrb	r3, [r3, #4]
 8000956:	005b      	lsls	r3, r3, #1
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	68da      	ldr	r2, [r3, #12]
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	791b      	ldrb	r3, [r3, #4]
 8000968:	4619      	mov	r1, r3
 800096a:	2303      	movs	r3, #3
 800096c:	408b      	lsls	r3, r1
 800096e:	43db      	mvns	r3, r3
 8000970:	4619      	mov	r1, r3
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	400a      	ands	r2, r1
 8000978:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68d9      	ldr	r1, [r3, #12]
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	697a      	ldr	r2, [r7, #20]
 8000986:	430a      	orrs	r2, r1
 8000988:	60da      	str	r2, [r3, #12]
	temp = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]

	//4. Configure the OPTYPE
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	7a1b      	ldrb	r3, [r3, #8]
 8000992:	461a      	mov	r2, r3
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	791b      	ldrb	r3, [r3, #4]
 8000998:	fa02 f303 	lsl.w	r3, r2, r3
 800099c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	685a      	ldr	r2, [r3, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	791b      	ldrb	r3, [r3, #4]
 80009a8:	4619      	mov	r1, r3
 80009aa:	2301      	movs	r3, #1
 80009ac:	408b      	lsls	r3, r1
 80009ae:	43db      	mvns	r3, r3
 80009b0:	4619      	mov	r1, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	400a      	ands	r2, r1
 80009b8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	6859      	ldr	r1, [r3, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	697a      	ldr	r2, [r7, #20]
 80009c6:	430a      	orrs	r2, r1
 80009c8:	605a      	str	r2, [r3, #4]
	temp = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
	//5. Configure the Alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	795b      	ldrb	r3, [r3, #5]
 80009d2:	2b02      	cmp	r3, #2
 80009d4:	d132      	bne.n	8000a3c <GPIO_Init+0x32c>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	791b      	ldrb	r3, [r3, #4]
 80009da:	08db      	lsrs	r3, r3, #3
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	791b      	ldrb	r3, [r3, #4]
 80009e4:	f003 0307 	and.w	r3, r3, #7
 80009e8:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 *temp2));
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	68fa      	ldr	r2, [r7, #12]
 80009f0:	3208      	adds	r2, #8
 80009f2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	210f      	movs	r1, #15
 80009fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000a00:	43db      	mvns	r3, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4011      	ands	r1, r2
 8000a0a:	68fa      	ldr	r2, [r7, #12]
 8000a0c:	3208      	adds	r2, #8
 8000a0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	68fa      	ldr	r2, [r7, #12]
 8000a18:	3208      	adds	r2, #8
 8000a1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	7a5b      	ldrb	r3, [r3, #9]
 8000a22:	4619      	mov	r1, r3
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	009b      	lsls	r3, r3, #2
 8000a28:	fa01 f303 	lsl.w	r3, r1, r3
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	4311      	orrs	r1, r2
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	3208      	adds	r2, #8
 8000a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000a3c:	bf00      	nop
 8000a3e:	3718      	adds	r7, #24
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	40023800 	.word	0x40023800
 8000a48:	40013800 	.word	0x40013800
 8000a4c:	40013c00 	.word	0x40013c00

08000a50 <GPIO_ReadFromInputPin>:

/*
 *  return the Pin is input or not as 0 or 1
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	460b      	mov	r3, r1
 8000a5a:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & (0x00000001));
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	691a      	ldr	r2, [r3, #16]
 8000a60:	78fb      	ldrb	r3, [r7, #3]
 8000a62:	fa22 f303 	lsr.w	r3, r2, r3
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	f003 0301 	and.w	r3, r3, #1
 8000a6c:	73fb      	strb	r3, [r7, #15]
	return value;
 8000a6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <I2C_GenerateStartCondition>:
static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle);



static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	601a      	str	r2, [r3, #0]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000aa8:	78fb      	ldrb	r3, [r7, #3]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);   //Clear the 0th bit  (SlaveAddr is Slave address + R/not_w   0
 8000aae:	78fb      	ldrb	r3, [r7, #3]
 8000ab0:	f023 0301 	bic.w	r3, r3, #1
 8000ab4:	70fb      	strb	r3, [r7, #3]

	pI2Cx->DR = SlaveAddr;
 8000ab6:	78fa      	ldrb	r2, [r7, #3]
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	611a      	str	r2, [r3, #16]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <I2C_ExecuteAddressPhaseRead>:

static void I2C_ExecuteAddressPhaseRead(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
 8000ad0:	460b      	mov	r3, r1
 8000ad2:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 8000ad4:	78fb      	ldrb	r3, [r7, #3]
 8000ad6:	005b      	lsls	r3, r3, #1
 8000ad8:	70fb      	strb	r3, [r7, #3]
	SlaveAddr |= (1);   //Clear the 0th bit  (SlaveAddr is Slave address + R/not_w  1
 8000ada:	78fb      	ldrb	r3, [r7, #3]
 8000adc:	f043 0301 	orr.w	r3, r3, #1
 8000ae0:	70fb      	strb	r3, [r7, #3]

	pI2Cx->DR = SlaveAddr;
 8000ae2:	78fa      	ldrb	r2, [r7, #3]
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	611a      	str	r2, [r3, #16]
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <I2C_ClearADDRFlag>:

static void I2C_ClearADDRFlag(I2C_Handle_t *pI2CHandle)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
	uint8_t dummy_read;

	//check from device mode
	if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	699b      	ldr	r3, [r3, #24]
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d01f      	beq.n	8000b4a <I2C_ClearADDRFlag+0x56>
	{
		//Device is in Master Mode

		if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	7f1b      	ldrb	r3, [r3, #28]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d112      	bne.n	8000b38 <I2C_ClearADDRFlag+0x44>
		{
			if(pI2CHandle->RxLen == 1)
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	699b      	ldr	r3, [r3, #24]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d11f      	bne.n	8000b5a <I2C_ClearADDRFlag+0x66>
			{
				//first disable the ACK
				I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	2100      	movs	r1, #0
 8000b20:	4618      	mov	r0, r3
 8000b22:	f000 fc64 	bl	80013ee <I2C_ManageAcking>

				//clear the ADDR flag (read SR1, read SR2)
				dummy_read = pI2CHandle->pI2Cx->SR1;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	73fb      	strb	r3, [r7, #15]
				dummy_read = pI2CHandle->pI2Cx->SR2;
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	699b      	ldr	r3, [r3, #24]
 8000b34:	73fb      	strb	r3, [r7, #15]
		dummy_read = pI2CHandle->pI2Cx->SR2;
		(void)dummy_read;

	}

}
 8000b36:	e010      	b.n	8000b5a <I2C_ClearADDRFlag+0x66>
			dummy_read = pI2CHandle->pI2Cx->SR1;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	695b      	ldr	r3, [r3, #20]
 8000b3e:	73fb      	strb	r3, [r7, #15]
			dummy_read = pI2CHandle->pI2Cx->SR2;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	699b      	ldr	r3, [r3, #24]
 8000b46:	73fb      	strb	r3, [r7, #15]
}
 8000b48:	e007      	b.n	8000b5a <I2C_ClearADDRFlag+0x66>
		dummy_read = pI2CHandle->pI2Cx->SR1;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	695b      	ldr	r3, [r3, #20]
 8000b50:	73fb      	strb	r3, [r7, #15]
		dummy_read = pI2CHandle->pI2Cx->SR2;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	73fb      	strb	r3, [r7, #15]
}
 8000b5a:	bf00      	nop
 8000b5c:	3710      	adds	r7, #16
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}

08000b62 <I2C_GenerateStopCondition>:

void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 8000b62:	b480      	push	{r7}
 8000b64:	b083      	sub	sp, #12
 8000b66:	af00      	add	r7, sp, #0
 8000b68:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	601a      	str	r2, [r3, #0]

}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
	...

08000b84 <I2C_PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b083      	sub	sp, #12
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
 8000b8c:	460b      	mov	r3, r1
 8000b8e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b90:	78fb      	ldrb	r3, [r7, #3]
 8000b92:	2b01      	cmp	r3, #1
 8000b94:	d120      	bne.n	8000bd8 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a22      	ldr	r2, [pc, #136]	@ (8000c24 <I2C_PeriClockControl+0xa0>)
 8000b9a:	4293      	cmp	r3, r2
 8000b9c:	d106      	bne.n	8000bac <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000b9e:	4b22      	ldr	r3, [pc, #136]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000ba0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ba2:	4a21      	ldr	r2, [pc, #132]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000ba4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ba8:	6413      	str	r3, [r2, #64]	@ 0x40
		}else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DIS();
		}
	}
}
 8000baa:	e035      	b.n	8000c18 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	4a1f      	ldr	r2, [pc, #124]	@ (8000c2c <I2C_PeriClockControl+0xa8>)
 8000bb0:	4293      	cmp	r3, r2
 8000bb2:	d106      	bne.n	8000bc2 <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	4a1b      	ldr	r2, [pc, #108]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000bba:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000bbe:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000bc0:	e02a      	b.n	8000c18 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3)
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c30 <I2C_PeriClockControl+0xac>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d126      	bne.n	8000c18 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000bca:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000bcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bce:	4a16      	ldr	r2, [pc, #88]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000bd0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000bd4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000bd6:	e01f      	b.n	8000c18 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <I2C_PeriClockControl+0xa0>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d106      	bne.n	8000bee <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DIS();
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	4a10      	ldr	r2, [pc, #64]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000be6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8000bea:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000bec:	e014      	b.n	8000c18 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	4a0e      	ldr	r2, [pc, #56]	@ (8000c2c <I2C_PeriClockControl+0xa8>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d106      	bne.n	8000c04 <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DIS();
 8000bf6:	4b0c      	ldr	r3, [pc, #48]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bfa:	4a0b      	ldr	r2, [pc, #44]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000bfc:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8000c00:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c02:	e009      	b.n	8000c18 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3)
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <I2C_PeriClockControl+0xac>)
 8000c08:	4293      	cmp	r3, r2
 8000c0a:	d105      	bne.n	8000c18 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DIS();
 8000c0c:	4b06      	ldr	r3, [pc, #24]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000c10:	4a05      	ldr	r2, [pc, #20]	@ (8000c28 <I2C_PeriClockControl+0xa4>)
 8000c12:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8000c16:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000c18:	bf00      	nop
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40005400 	.word	0x40005400
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40005800 	.word	0x40005800
 8000c30:	40005c00 	.word	0x40005c00

08000c34 <I2C_Init>:


void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	60fb      	str	r3, [r7, #12]
	uint8_t trise;

	//Enable the Clock for the I2C peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	2101      	movs	r1, #1
 8000c46:	4618      	mov	r0, r3
 8000c48:	f7ff ff9c 	bl	8000b84 <I2C_PeriClockControl>

	// ACK control
	tempreg |= (pI2CHandle->I2C_Config.I2C_ACKControl << 10);
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	7a5b      	ldrb	r3, [r3, #9]
 8000c50:	029b      	lsls	r3, r3, #10
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	68fa      	ldr	r2, [r7, #12]
 8000c5e:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000c60:	2300      	movs	r3, #0
 8000c62:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000c64:	f000 fb42 	bl	80012ec <RCC_GetPCLK1Value>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	4a4a      	ldr	r2, [pc, #296]	@ (8000d94 <I2C_Init+0x160>)
 8000c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c70:	0c9b      	lsrs	r3, r3, #18
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000c82:	605a      	str	r2, [r3, #4]

	// Program the device own address
	tempreg = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress <<1;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	7a1b      	ldrb	r3, [r3, #8]
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	68fa      	ldr	r2, [r7, #12]
 8000c90:	4313      	orrs	r3, r2
 8000c92:	60fb      	str	r3, [r7, #12]

	//Reserved bit (Reference Manual says 14th bit should be 1)
	tempreg |= (1<<14);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000c9a:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	68fa      	ldr	r2, [r7, #12]
 8000ca2:	609a      	str	r2, [r3, #8]


	//CCR calculation
	uint16_t ccr_value = 0;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	813b      	strh	r3, [r7, #8]
	tempreg = 0;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	4a39      	ldr	r2, [pc, #228]	@ (8000d98 <I2C_Init+0x164>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d80f      	bhi.n	8000cd6 <I2C_Init+0xa2>
	{
		// Mode is Standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000cb6:	f000 fb19 	bl	80012ec <RCC_GetPCLK1Value>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	685b      	ldr	r3, [r3, #4]
 8000cc0:	005b      	lsls	r3, r3, #1
 8000cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc6:	813b      	strh	r3, [r7, #8]

		tempreg |= (ccr_value & 0xFFF);
 8000cc8:	893b      	ldrh	r3, [r7, #8]
 8000cca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000cce:	68fa      	ldr	r2, [r7, #12]
 8000cd0:	4313      	orrs	r3, r2
 8000cd2:	60fb      	str	r3, [r7, #12]
 8000cd4:	e030      	b.n	8000d38 <I2C_Init+0x104>


	}else
	{
		// Mode is fast mode
		tempreg |= (1<<15);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cdc:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	895b      	ldrh	r3, [r3, #10]
 8000ce2:	039b      	lsls	r3, r3, #14
 8000ce4:	68fa      	ldr	r2, [r7, #12]
 8000ce6:	4313      	orrs	r3, r2
 8000ce8:	60fb      	str	r3, [r7, #12]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	895b      	ldrh	r3, [r3, #10]
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d10b      	bne.n	8000d0a <I2C_Init+0xd6>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000cf2:	f000 fafb 	bl	80012ec <RCC_GetPCLK1Value>
 8000cf6:	4601      	mov	r1, r0
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	685a      	ldr	r2, [r3, #4]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	4413      	add	r3, r2
 8000d02:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d06:	813b      	strh	r3, [r7, #8]
 8000d08:	e010      	b.n	8000d2c <I2C_Init+0xf8>

		}else if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_16_9)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	895b      	ldrh	r3, [r3, #10]
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d10c      	bne.n	8000d2c <I2C_Init+0xf8>
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000d12:	f000 faeb 	bl	80012ec <RCC_GetPCLK1Value>
 8000d16:	4601      	mov	r1, r0
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	685a      	ldr	r2, [r3, #4]
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	009b      	lsls	r3, r3, #2
 8000d20:	4413      	add	r3, r2
 8000d22:	009a      	lsls	r2, r3, #2
 8000d24:	4413      	add	r3, r2
 8000d26:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d2a:	813b      	strh	r3, [r7, #8]

		}
		tempreg |= (ccr_value & 0xFFF);
 8000d2c:	893b      	ldrh	r3, [r7, #8]
 8000d2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000d32:	68fa      	ldr	r2, [r7, #12]
 8000d34:	4313      	orrs	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->CCR = tempreg;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	68fa      	ldr	r2, [r7, #12]
 8000d3e:	61da      	str	r2, [r3, #28]

	// TRISE configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	685b      	ldr	r3, [r3, #4]
 8000d44:	4a14      	ldr	r2, [pc, #80]	@ (8000d98 <I2C_Init+0x164>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d80a      	bhi.n	8000d60 <I2C_Init+0x12c>
	{
		// Mode is standart Mode
		trise = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000d4a:	f000 facf 	bl	80012ec <RCC_GetPCLK1Value>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	4a10      	ldr	r2, [pc, #64]	@ (8000d94 <I2C_Init+0x160>)
 8000d52:	fba2 2303 	umull	r2, r3, r2, r3
 8000d56:	0c9b      	lsrs	r3, r3, #18
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	3301      	adds	r3, #1
 8000d5c:	72fb      	strb	r3, [r7, #11]
 8000d5e:	e00e      	b.n	8000d7e <I2C_Init+0x14a>
	}else
	{
		// Mode is fast Mode
		trise = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000d60:	f000 fac4 	bl	80012ec <RCC_GetPCLK1Value>
 8000d64:	4603      	mov	r3, r0
 8000d66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000d6a:	fb02 f303 	mul.w	r3, r2, r3
 8000d6e:	0a5b      	lsrs	r3, r3, #9
 8000d70:	4a0a      	ldr	r2, [pc, #40]	@ (8000d9c <I2C_Init+0x168>)
 8000d72:	fba2 2303 	umull	r2, r3, r2, r3
 8000d76:	09db      	lsrs	r3, r3, #7
 8000d78:	b2db      	uxtb	r3, r3
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	72fb      	strb	r3, [r7, #11]
	}

	pI2CHandle->pI2Cx->TRISE = (trise & 0x3F);
 8000d7e:	7afa      	ldrb	r2, [r7, #11]
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000d88:	621a      	str	r2, [r3, #32]

}
 8000d8a:	bf00      	nop
 8000d8c:	3710      	adds	r7, #16
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	bd80      	pop	{r7, pc}
 8000d92:	bf00      	nop
 8000d94:	431bde83 	.word	0x431bde83
 8000d98:	000186a0 	.word	0x000186a0
 8000d9c:	00044b83 	.word	0x00044b83

08000da0 <I2C_CloseReceiveData>:

}


void I2C_CloseReceiveData(I2C_Handle_t *pI2CHandle)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
	// Implement the code to disable ITBUFEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000db6:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000dc6:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pRxBuffer = NULL;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	611a      	str	r2, [r3, #16]
	pI2CHandle->RxLen = 0;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	619a      	str	r2, [r3, #24]
	pI2CHandle->RxSize = 0;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]

	if(pI2CHandle->I2C_Config.I2C_ACKControl == I2C_ACK_ENABLE)
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	7a5b      	ldrb	r3, [r3, #9]
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d105      	bne.n	8000df4 <I2C_CloseReceiveData+0x54>
	{
		I2C_ManageAcking(pI2CHandle->pI2Cx, ENABLE);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2101      	movs	r1, #1
 8000dee:	4618      	mov	r0, r3
 8000df0:	f000 fafd 	bl	80013ee <I2C_ManageAcking>
	}

}
 8000df4:	bf00      	nop
 8000df6:	3708      	adds	r7, #8
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <I2C_CloseSendData>:


void I2C_CloseSendData(I2C_Handle_t *pI2CHandle)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	// Implement the code to disable ITBUFEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8000e12:	605a      	str	r2, [r3, #4]

	//Implement the code to disable ITEVFEN control bit
	pI2CHandle->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	685a      	ldr	r2, [r3, #4]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8000e22:	605a      	str	r2, [r3, #4]

	pI2CHandle->TxRxState = I2C_READY;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	2200      	movs	r2, #0
 8000e28:	771a      	strb	r2, [r3, #28]
	pI2CHandle->pTxBuffer = NULL;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	60da      	str	r2, [r3, #12]
	pI2CHandle->TxLen = 0;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	615a      	str	r2, [r3, #20]



}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <I2C_MasterSendDataIT>:
}



uint8_t I2C_MasterSendDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b086      	sub	sp, #24
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	60f8      	str	r0, [r7, #12]
 8000e4a:	60b9      	str	r1, [r7, #8]
 8000e4c:	607a      	str	r2, [r7, #4]
 8000e4e:	70fb      	strb	r3, [r7, #3]
	uint8_t busystate = pI2CHandle->TxRxState;
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	7f1b      	ldrb	r3, [r3, #28]
 8000e54:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000e56:	7dfb      	ldrb	r3, [r7, #23]
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d030      	beq.n	8000ebe <I2C_MasterSendDataIT+0x7c>
 8000e5c:	7dfb      	ldrb	r3, [r7, #23]
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d02d      	beq.n	8000ebe <I2C_MasterSendDataIT+0x7c>
	{
		pI2CHandle->pTxBuffer = pTxbuffer;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	68ba      	ldr	r2, [r7, #8]
 8000e66:	60da      	str	r2, [r3, #12]
		pI2CHandle->TxLen = Len;
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	615a      	str	r2, [r3, #20]
		pI2CHandle->TxRxState = I2C_BUSY_IN_TX;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2202      	movs	r2, #2
 8000e72:	771a      	strb	r2, [r3, #28]
		pI2CHandle->DevAddr = SlaveAddr;
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	78fa      	ldrb	r2, [r7, #3]
 8000e78:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000e80:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fdf7 	bl	8000a7c <I2C_GenerateStartCondition>

		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000e9c:	605a      	str	r2, [r3, #4]

		//Implement the code to enable ITEVTEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	685a      	ldr	r2, [r3, #4]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000eac:	605a      	str	r2, [r3, #4]


		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	685a      	ldr	r2, [r3, #4]
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000ebc:	605a      	str	r2, [r3, #4]


	}

	return busystate;
 8000ebe:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	3718      	adds	r7, #24
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <I2C_MasterReceiveDataIT>:


uint8_t I2C_MasterReceiveDataIT(I2C_Handle_t *pI2CHandle, uint8_t *pRxBuffer, uint8_t Len, uint8_t SlaveAddr, uint8_t Sr)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b086      	sub	sp, #24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	4611      	mov	r1, r2
 8000ed4:	461a      	mov	r2, r3
 8000ed6:	460b      	mov	r3, r1
 8000ed8:	71fb      	strb	r3, [r7, #7]
 8000eda:	4613      	mov	r3, r2
 8000edc:	71bb      	strb	r3, [r7, #6]

	uint8_t busystate = pI2CHandle->TxRxState;
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	7f1b      	ldrb	r3, [r3, #28]
 8000ee2:	75fb      	strb	r3, [r7, #23]

	if( (busystate != I2C_BUSY_IN_TX) && (busystate != I2C_BUSY_IN_RX))
 8000ee4:	7dfb      	ldrb	r3, [r7, #23]
 8000ee6:	2b02      	cmp	r3, #2
 8000ee8:	d033      	beq.n	8000f52 <I2C_MasterReceiveDataIT+0x8a>
 8000eea:	7dfb      	ldrb	r3, [r7, #23]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d030      	beq.n	8000f52 <I2C_MasterReceiveDataIT+0x8a>
	{
		pI2CHandle->pRxBuffer = pRxBuffer;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	68ba      	ldr	r2, [r7, #8]
 8000ef4:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen = Len;
 8000ef6:	79fa      	ldrb	r2, [r7, #7]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	619a      	str	r2, [r3, #24]
		pI2CHandle->TxRxState = I2C_BUSY_IN_RX;
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	2201      	movs	r2, #1
 8000f00:	771a      	strb	r2, [r3, #28]
		pI2CHandle->RxSize = Len; //Rxsize is used in the ISR code to manage the data reception
 8000f02:	79fa      	ldrb	r2, [r7, #7]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	621a      	str	r2, [r3, #32]
		pI2CHandle->DevAddr = SlaveAddr;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	79ba      	ldrb	r2, [r7, #6]
 8000f0c:	775a      	strb	r2, [r3, #29]
		pI2CHandle->Sr = Sr;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000f14:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

		//Implement code to Generate START Condition
		I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f7ff fdad 	bl	8000a7c <I2C_GenerateStartCondition>


		//Implement the code to enable ITBUFEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITBUFEN);
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	685a      	ldr	r2, [r3, #4]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8000f30:	605a      	str	r2, [r3, #4]


		//Implement the code to enable ITEVTEN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITEVTEN);
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	685a      	ldr	r2, [r3, #4]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8000f40:	605a      	str	r2, [r3, #4]


		//Implement the code to enable ITERREN Control Bit
		pI2CHandle->pI2Cx->CR2 |= ( 1 << I2C_CR2_ITERREN);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	685a      	ldr	r2, [r3, #4]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000f50:	605a      	str	r2, [r3, #4]


	}

	return busystate;
 8000f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <I2C_MasterHandleTXEInterrupt>:

static void I2C_MasterHandleTXEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	if(pI2CHandle->TxLen > 0)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	695b      	ldr	r3, [r3, #20]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d00f      	beq.n	8000f8c <I2C_MasterHandleTXEInterrupt+0x30>
	{
		//1. load the data in to DR
		pI2CHandle->pI2Cx->DR = *(pI2CHandle->pTxBuffer);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	781a      	ldrb	r2, [r3, #0]
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	611a      	str	r2, [r3, #16]

		//2. decrement the TxLen
		pI2CHandle->TxLen--;
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	695b      	ldr	r3, [r3, #20]
 8000f7c:	1e5a      	subs	r2, r3, #1
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	615a      	str	r2, [r3, #20]

		//3. Increment the buffer address
		pI2CHandle->pTxBuffer++;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	68db      	ldr	r3, [r3, #12]
 8000f86:	1c5a      	adds	r2, r3, #1
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	60da      	str	r2, [r3, #12]
	}

}
 8000f8c:	bf00      	nop
 8000f8e:	370c      	adds	r7, #12
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr

08000f98 <I2C_MasterHandleRXNEInterrupt>:
}



static void I2C_MasterHandleRXNEInterrupt(I2C_Handle_t *pI2CHandle)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
	//We have to do the data reception
	if(pI2CHandle->RxLen == 1)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	699b      	ldr	r3, [r3, #24]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d10b      	bne.n	8000fc0 <I2C_MasterHandleRXNEInterrupt+0x28>
	{
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	691a      	ldr	r2, [r3, #16]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	691b      	ldr	r3, [r3, #16]
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	701a      	strb	r2, [r3, #0]
		pI2CHandle->RxLen--;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	699b      	ldr	r3, [r3, #24]
 8000fba:	1e5a      	subs	r2, r3, #1
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	619a      	str	r2, [r3, #24]

	}


	if(pI2CHandle->RxLen > 1)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	699b      	ldr	r3, [r3, #24]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d91a      	bls.n	8000ffe <I2C_MasterHandleRXNEInterrupt+0x66>
	{
		if(pI2CHandle->RxLen == 2)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	2b02      	cmp	r3, #2
 8000fce:	d105      	bne.n	8000fdc <I2C_MasterHandleRXNEInterrupt+0x44>
		{
			//clear the ack bit
			I2C_ManageAcking(pI2CHandle->pI2Cx, DISABLE);
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	2100      	movs	r1, #0
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fa09 	bl	80013ee <I2C_ManageAcking>
		}

		//read DR
		*pI2CHandle->pRxBuffer = pI2CHandle->pI2Cx->DR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	691a      	ldr	r2, [r3, #16]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	691b      	ldr	r3, [r3, #16]
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	701a      	strb	r2, [r3, #0]
		pI2CHandle->pRxBuffer++;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	691b      	ldr	r3, [r3, #16]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	611a      	str	r2, [r3, #16]
		pI2CHandle->RxLen--;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	699b      	ldr	r3, [r3, #24]
 8000ff8:	1e5a      	subs	r2, r3, #1
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	619a      	str	r2, [r3, #24]

	}

	if(pI2CHandle->RxLen == 0)
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d10b      	bne.n	800101e <I2C_MasterHandleRXNEInterrupt+0x86>
	{
		//close the I2C data reception and notify the application

		//1. generate the stop condition
		I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fda9 	bl	8000b62 <I2C_GenerateStopCondition>

		//2. Close the I2C rx
		I2C_CloseReceiveData(pI2CHandle);
 8001010:	6878      	ldr	r0, [r7, #4]
 8001012:	f7ff fec5 	bl	8000da0 <I2C_CloseReceiveData>

		//3. Notify the application
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_RX_CMPLT);
 8001016:	2102      	movs	r1, #2
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff f9cd 	bl	80003b8 <I2C_ApplicationEventCallback>

	}
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}

08001026 <I2C_EV_IRQHandling>:

void I2C_EV_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	b086      	sub	sp, #24
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	//Interrupt handling for both master and slave mode of a device

	uint32_t temp1, temp2, temp3;

	temp1 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITEVTEN);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	685b      	ldr	r3, [r3, #4]
 8001034:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001038:	617b      	str	r3, [r7, #20]
	temp2 = pI2CHandle->pI2Cx->CR2 & (1 << I2C_CR2_ITBUFEN);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001044:	613b      	str	r3, [r7, #16]

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_SB);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	695b      	ldr	r3, [r3, #20]
 800104c:	f003 0301 	and.w	r3, r3, #1
 8001050:	60fb      	str	r3, [r7, #12]

	//1. Handle for interrupt generated by SB Event
	// Note: SB Flag is only applicable in Master mode
	if(temp1 && temp3)
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01b      	beq.n	8001090 <I2C_EV_IRQHandling+0x6a>
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d018      	beq.n	8001090 <I2C_EV_IRQHandling+0x6a>
	{
		//The interrupt is generated because of SB event
		// this block will not be executed in slave mode because for slave SB is always zero
		// in this block, lets execute the address phase
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	7f1b      	ldrb	r3, [r3, #28]
 8001062:	2b02      	cmp	r3, #2
 8001064:	d108      	bne.n	8001078 <I2C_EV_IRQHandling+0x52>
		{
			I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681a      	ldr	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	7f5b      	ldrb	r3, [r3, #29]
 800106e:	4619      	mov	r1, r3
 8001070:	4610      	mov	r0, r2
 8001072:	f7ff fd13 	bl	8000a9c <I2C_ExecuteAddressPhaseWrite>
 8001076:	e00b      	b.n	8001090 <I2C_EV_IRQHandling+0x6a>

		}else if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	7f1b      	ldrb	r3, [r3, #28]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d107      	bne.n	8001090 <I2C_EV_IRQHandling+0x6a>
		{
			I2C_ExecuteAddressPhaseRead(pI2CHandle->pI2Cx, pI2CHandle->DevAddr);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681a      	ldr	r2, [r3, #0]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7f5b      	ldrb	r3, [r3, #29]
 8001088:	4619      	mov	r1, r3
 800108a:	4610      	mov	r0, r2
 800108c:	f7ff fd1c 	bl	8000ac8 <I2C_ExecuteAddressPhaseRead>


		}
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_ADDR);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	695b      	ldr	r3, [r3, #20]
 8001096:	f003 0302 	and.w	r3, r3, #2
 800109a:	60fb      	str	r3, [r7, #12]
	//2. Handle for interrupt generated by ADDR event
	//Note: When master mode: Address is sent
	//		when slave mode: Address matched with own address

	if(temp1 && temp3)
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d005      	beq.n	80010ae <I2C_EV_IRQHandling+0x88>
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d002      	beq.n	80010ae <I2C_EV_IRQHandling+0x88>
	{
		//ADDR flag is set
		I2C_ClearADDRFlag(pI2CHandle);
 80010a8:	6878      	ldr	r0, [r7, #4]
 80010aa:	f7ff fd23 	bl	8000af4 <I2C_ClearADDRFlag>
	}


	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_BTF);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	695b      	ldr	r3, [r3, #20]
 80010b4:	f003 0304 	and.w	r3, r3, #4
 80010b8:	60fb      	str	r3, [r7, #12]
	//3. Handle for interrupt generated by BTF (Byte Transfer Finished) event
	if(temp1 && temp2 && temp3)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d025      	beq.n	800110c <I2C_EV_IRQHandling+0xe6>
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d022      	beq.n	800110c <I2C_EV_IRQHandling+0xe6>
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d01f      	beq.n	800110c <I2C_EV_IRQHandling+0xe6>
	{
		//BTF flag is set
		if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	7f1b      	ldrb	r3, [r3, #28]
 80010d0:	2b02      	cmp	r3, #2
 80010d2:	d11b      	bne.n	800110c <I2C_EV_IRQHandling+0xe6>
		{
			//Make sure that TXE is also set
			if(pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE))
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	695b      	ldr	r3, [r3, #20]
 80010da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d014      	beq.n	800110c <I2C_EV_IRQHandling+0xe6>
			{
				if(pI2CHandle->TxLen == 0)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	695b      	ldr	r3, [r3, #20]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d110      	bne.n	800110c <I2C_EV_IRQHandling+0xe6>
				{
					//BTF and TXE are both SET
					//So Close the transmission
					//1. generate the STOP condition
					if(pI2CHandle->Sr == I2C_DISABLE_SR)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80010f0:	2b01      	cmp	r3, #1
 80010f2:	d104      	bne.n	80010fe <I2C_EV_IRQHandling+0xd8>
					{
						I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fd32 	bl	8000b62 <I2C_GenerateStopCondition>
					}

					//2. reset all the member elements of the handle structure.
					I2C_CloseSendData(pI2CHandle);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f7ff fe7c 	bl	8000dfc <I2C_CloseSendData>

					//3. Notify the application about transmission complete
					I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_TX_CMPLT);
 8001104:	2100      	movs	r1, #0
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff f956 	bl	80003b8 <I2C_ApplicationEventCallback>
			;
		}
	}


	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_STOPF);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	695b      	ldr	r3, [r3, #20]
 8001112:	f003 0310 	and.w	r3, r3, #16
 8001116:	60fb      	str	r3, [r7, #12]
	//4. Handle for interrupt generated by STOPF event
	// Note Stop detection flag is applicable only slave mode, for master this flag
	if(temp1 && temp2 && temp3)
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d00f      	beq.n	800113e <I2C_EV_IRQHandling+0x118>
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00c      	beq.n	800113e <I2C_EV_IRQHandling+0x118>
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d009      	beq.n	800113e <I2C_EV_IRQHandling+0x118>
	{
		//STOPF flag is set
		// Cler the STOPF (Clearing Procedure: read SR1 then Write to CR1)
		// we already read SR1 in temp3
		pI2CHandle->pI2Cx->CR1 |= 0x0000;  // Not really writing anything.
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6812      	ldr	r2, [r2, #0]
 8001134:	601a      	str	r2, [r3, #0]


		//3. Notify the application that STOP is detected
		I2C_ApplicationEventCallback(pI2CHandle,I2C_EV_STOP);
 8001136:	2101      	movs	r1, #1
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f7ff f93d 	bl	80003b8 <I2C_ApplicationEventCallback>
	}

	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_TXE);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	695b      	ldr	r3, [r3, #20]
 8001144:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001148:	60fb      	str	r3, [r7, #12]
	//5. Handle for interrupt generated by TXE event
	// Indication that the data register is empty, software has to put a data byte into the data register
	// in order to send that data byte to the external world
	if(temp1 && temp3)
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d01c      	beq.n	800118a <I2C_EV_IRQHandling+0x164>
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d019      	beq.n	800118a <I2C_EV_IRQHandling+0x164>
	{
		//TXE flag is set
		//We have to do the data transmission

		//Check for device Mode
		if(pI2CHandle->pI2Cx->SR2 &(1<<I2C_SR2_MSL))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	699b      	ldr	r3, [r3, #24]
 800115c:	f003 0301 	and.w	r3, r3, #1
 8001160:	2b00      	cmp	r3, #0
 8001162:	d007      	beq.n	8001174 <I2C_EV_IRQHandling+0x14e>
		{
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_TX)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	7f1b      	ldrb	r3, [r3, #28]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d10e      	bne.n	800118a <I2C_EV_IRQHandling+0x164>
			{
				I2C_MasterHandleTXEInterrupt(pI2CHandle);
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	f7ff fef5 	bl	8000f5c <I2C_MasterHandleTXEInterrupt>
 8001172:	e00a      	b.n	800118a <I2C_EV_IRQHandling+0x164>
			}
		}else
		{
			//slave    it means master is requesting data
			//Make sure that the slave is in transmitter mode
			if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA)){
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	699b      	ldr	r3, [r3, #24]
 800117a:	f003 0304 	and.w	r3, r3, #4
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <I2C_EV_IRQHandling+0x164>

				// Slave is in transmitter mode
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_REQ);
 8001182:	2108      	movs	r1, #8
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff f917 	bl	80003b8 <I2C_ApplicationEventCallback>

		}
	}


	temp3 = pI2CHandle->pI2Cx->SR1 & (1 << I2C_SR1_RXNE);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001194:	60fb      	str	r3, [r7, #12]
	//6. Handle for interrupt generated by RXNE event
	if(temp1 && temp3)
 8001196:	697b      	ldr	r3, [r7, #20]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d01c      	beq.n	80011d6 <I2C_EV_IRQHandling+0x1b0>
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d019      	beq.n	80011d6 <I2C_EV_IRQHandling+0x1b0>
	{
		//check device mode
		if(pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_MSL))
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	699b      	ldr	r3, [r3, #24]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d007      	beq.n	80011c0 <I2C_EV_IRQHandling+0x19a>
		{
			//Device is master mode

			//RXNE flag is set
			if(pI2CHandle->TxRxState == I2C_BUSY_IN_RX)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	7f1b      	ldrb	r3, [r3, #28]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d10e      	bne.n	80011d6 <I2C_EV_IRQHandling+0x1b0>
			{
				I2C_MasterHandleRXNEInterrupt(pI2CHandle);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff feed 	bl	8000f98 <I2C_MasterHandleRXNEInterrupt>
			}


		}
	}
}
 80011be:	e00a      	b.n	80011d6 <I2C_EV_IRQHandling+0x1b0>
			if(! (pI2CHandle->pI2Cx->SR2 & (1 << I2C_SR2_TRA))){
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	f003 0304 	and.w	r3, r3, #4
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d103      	bne.n	80011d6 <I2C_EV_IRQHandling+0x1b0>
				I2C_ApplicationEventCallback(pI2CHandle, I2C_EV_DATA_RCV);
 80011ce:	2109      	movs	r1, #9
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff f8f1 	bl	80003b8 <I2C_ApplicationEventCallback>
}
 80011d6:	bf00      	nop
 80011d8:	3718      	adds	r7, #24
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <I2C_ER_IRQHandling>:

void I2C_ER_IRQHandling(I2C_Handle_t *pI2CHandle)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b084      	sub	sp, #16
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]

	uint32_t temp1,temp2;

    //Know the status of  ITERREN control bit in the CR2
	temp2 = (pI2CHandle->pI2Cx->CR2) & ( 1 << I2C_CR2_ITERREN);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011f0:	60fb      	str	r3, [r7, #12]


/***********************Check for Bus error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1<< I2C_SR1_BERR);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	695b      	ldr	r3, [r3, #20]
 80011f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80011fc:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2 )
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00e      	beq.n	8001222 <I2C_ER_IRQHandling+0x44>
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d00b      	beq.n	8001222 <I2C_ER_IRQHandling+0x44>
	{
		//This is Bus error

		//Implement the code to clear the buss error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_BERR);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	695a      	ldr	r2, [r3, #20]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001218:	615a      	str	r2, [r3, #20]

		//Implement the code to notify the application about the error
	   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_BERR);
 800121a:	2103      	movs	r1, #3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff f8cb 	bl	80003b8 <I2C_ApplicationEventCallback>
	}

/***********************Check for arbitration lost error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_ARLO );
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800122c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d00e      	beq.n	8001252 <I2C_ER_IRQHandling+0x74>
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <I2C_ER_IRQHandling+0x74>
	{
		//This is arbitration lost error

		//Implement the code to clear the arbitration lost error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_ARLO);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	695a      	ldr	r2, [r3, #20]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001248:	615a      	str	r2, [r3, #20]


		//Implement the code to notify the application about the error
		   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_ARLO);
 800124a:	2104      	movs	r1, #4
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff f8b3 	bl	80003b8 <I2C_ApplicationEventCallback>
	}

/***********************Check for ACK failure  error************************************/

	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_AF);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	695b      	ldr	r3, [r3, #20]
 8001258:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800125c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800125e:	68bb      	ldr	r3, [r7, #8]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d00e      	beq.n	8001282 <I2C_ER_IRQHandling+0xa4>
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <I2C_ER_IRQHandling+0xa4>
	{
		//This is ACK failure error

	    //Implement the code to clear the ACK failure error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_AF);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	695a      	ldr	r2, [r3, #20]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001278:	615a      	str	r2, [r3, #20]


		//Implement the code to notify the application about the error
		   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_AF);
 800127a:	2105      	movs	r1, #5
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f7ff f89b 	bl	80003b8 <I2C_ApplicationEventCallback>

	}

/***********************Check for Overrun/underrun error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_OVR);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	695b      	ldr	r3, [r3, #20]
 8001288:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800128c:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d00e      	beq.n	80012b2 <I2C_ER_IRQHandling+0xd4>
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d00b      	beq.n	80012b2 <I2C_ER_IRQHandling+0xd4>
	{
		//This is Overrun/underrun

	    //Implement the code to clear the Overrun/underrun error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_OVR);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	695a      	ldr	r2, [r3, #20]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012a8:	615a      	str	r2, [r3, #20]


		//Implement the code to notify the application about the error
		   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_OVR);
 80012aa:	2106      	movs	r1, #6
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff f883 	bl	80003b8 <I2C_ApplicationEventCallback>

	}

/***********************Check for Time out error************************************/
	temp1 = (pI2CHandle->pI2Cx->SR1) & ( 1 << I2C_SR1_TIMEOUT);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	695b      	ldr	r3, [r3, #20]
 80012b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012bc:	60bb      	str	r3, [r7, #8]
	if(temp1  && temp2)
 80012be:	68bb      	ldr	r3, [r7, #8]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d00e      	beq.n	80012e2 <I2C_ER_IRQHandling+0x104>
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d00b      	beq.n	80012e2 <I2C_ER_IRQHandling+0x104>
	{
		//This is Time out error

	    //Implement the code to clear the Time out error flag
		pI2CHandle->pI2Cx->SR1 &= ~( 1 << I2C_SR1_TIMEOUT);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	695a      	ldr	r2, [r3, #20]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80012d8:	615a      	str	r2, [r3, #20]


		//Implement the code to notify the application about the error
		   I2C_ApplicationEventCallback(pI2CHandle,I2C_ERROR_TIMEOUT);
 80012da:	2107      	movs	r1, #7
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f7ff f86b 	bl	80003b8 <I2C_ApplicationEventCallback>

	}

}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
	...

080012ec <RCC_GetPCLK1Value>:



uint32_t RCC_GetPCLK1Value()
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc, temp,ahbp, temp2, apb1;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80012f2:	4b26      	ldr	r3, [pc, #152]	@ (800138c <RCC_GetPCLK1Value+0xa0>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	089b      	lsrs	r3, r3, #2
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8001300:	7a7b      	ldrb	r3, [r7, #9]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d102      	bne.n	800130c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;  // HSI clock
 8001306:	4b22      	ldr	r3, [pc, #136]	@ (8001390 <RCC_GetPCLK1Value+0xa4>)
 8001308:	60fb      	str	r3, [r7, #12]
 800130a:	e00b      	b.n	8001324 <RCC_GetPCLK1Value+0x38>

	}else if(clksrc == 1)
 800130c:	7a7b      	ldrb	r3, [r7, #9]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d102      	bne.n	8001318 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;  // HSI clock
 8001312:	4b20      	ldr	r3, [pc, #128]	@ (8001394 <RCC_GetPCLK1Value+0xa8>)
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	e005      	b.n	8001324 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2)
 8001318:	7a7b      	ldrb	r3, [r7, #9]
 800131a:	2b02      	cmp	r3, #2
 800131c:	d102      	bne.n	8001324 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 800131e:	f000 f83f 	bl	80013a0 <RCC_GetPLLOutputClock>
 8001322:	60f8      	str	r0, [r7, #12]
	}


	// AHB
	temp = ((RCC->CFGR >> 4) & 0xF);
 8001324:	4b19      	ldr	r3, [pc, #100]	@ (800138c <RCC_GetPCLK1Value+0xa0>)
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	b2db      	uxtb	r3, r3
 800132c:	f003 030f 	and.w	r3, r3, #15
 8001330:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8001332:	7a3b      	ldrb	r3, [r7, #8]
 8001334:	2b07      	cmp	r3, #7
 8001336:	d802      	bhi.n	800133e <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8001338:	2301      	movs	r3, #1
 800133a:	72fb      	strb	r3, [r7, #11]
 800133c:	e005      	b.n	800134a <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 800133e:	7a3b      	ldrb	r3, [r7, #8]
 8001340:	3b08      	subs	r3, #8
 8001342:	4a15      	ldr	r2, [pc, #84]	@ (8001398 <RCC_GetPCLK1Value+0xac>)
 8001344:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001348:	72fb      	strb	r3, [r7, #11]
	}


	// ABP1
	temp2 = ((RCC->CFGR >> 10) & 0x7);
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <RCC_GetPCLK1Value+0xa0>)
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	0a9b      	lsrs	r3, r3, #10
 8001350:	b2db      	uxtb	r3, r3
 8001352:	f003 0307 	and.w	r3, r3, #7
 8001356:	71fb      	strb	r3, [r7, #7]

	if(temp2 < 4)
 8001358:	79fb      	ldrb	r3, [r7, #7]
 800135a:	2b03      	cmp	r3, #3
 800135c:	d802      	bhi.n	8001364 <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 800135e:	2301      	movs	r3, #1
 8001360:	72bb      	strb	r3, [r7, #10]
 8001362:	e005      	b.n	8001370 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1 = APB1_PreScaler[temp-4];
 8001364:	7a3b      	ldrb	r3, [r7, #8]
 8001366:	3b04      	subs	r3, #4
 8001368:	4a0c      	ldr	r2, [pc, #48]	@ (800139c <RCC_GetPCLK1Value+0xb0>)
 800136a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800136e:	72bb      	strb	r3, [r7, #10]

	}


	pclk1 = ((SystemClk / ahbp) / apb1);
 8001370:	7afb      	ldrb	r3, [r7, #11]
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	fbb2 f2f3 	udiv	r2, r2, r3
 8001378:	7abb      	ldrb	r3, [r7, #10]
 800137a:	fbb2 f3f3 	udiv	r3, r2, r3
 800137e:	603b      	str	r3, [r7, #0]
	return pclk1;
 8001380:	683b      	ldr	r3, [r7, #0]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023800 	.word	0x40023800
 8001390:	00f42400 	.word	0x00f42400
 8001394:	007a1200 	.word	0x007a1200
 8001398:	20000000 	.word	0x20000000
 800139c:	20000010 	.word	0x20000010

080013a0 <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 80013a0:	b480      	push	{r7}
 80013a2:	af00      	add	r7, sp, #0
	return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	46bd      	mov	sp, r7
 80013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ae:	4770      	bx	lr

080013b0 <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	460b      	mov	r3, r1
 80013ba:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80013bc:	78fb      	ldrb	r3, [r7, #3]
 80013be:	2b01      	cmp	r3, #1
 80013c0:	d106      	bne.n	80013d0 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f043 0201 	orr.w	r2, r3, #1
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	601a      	str	r2, [r3, #0]
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}


}
 80013ce:	e008      	b.n	80013e2 <I2C_PeripheralControl+0x32>
	}else if(EnOrDi == DISABLE)
 80013d0:	78fb      	ldrb	r3, [r7, #3]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d105      	bne.n	80013e2 <I2C_PeripheralControl+0x32>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f023 0201 	bic.w	r2, r3, #1
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	601a      	str	r2, [r3, #0]
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr

080013ee <I2C_ManageAcking>:



void I2C_ManageAcking(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == I2C_ACK_ENABLE)
 80013fa:	78fb      	ldrb	r3, [r7, #3]
 80013fc:	2b01      	cmp	r3, #1
 80013fe:	d106      	bne.n	800140e <I2C_ManageAcking+0x20>
	{
		//Enable the ACK
		pI2Cx->CR1 |= (1 << I2C_CR1_ACK);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	601a      	str	r2, [r3, #0]
	}else if(EnorDi == I2C_ACK_DISABLE)
	{
		//Disable the ACK
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
	}
}
 800140c:	e008      	b.n	8001420 <I2C_ManageAcking+0x32>
	}else if(EnorDi == I2C_ACK_DISABLE)
 800140e:	78fb      	ldrb	r3, [r7, #3]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <I2C_ManageAcking+0x32>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_ACK);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	601a      	str	r2, [r3, #0]
}
 8001420:	bf00      	nop
 8001422:	370c      	adds	r7, #12
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <I2C_IRQInterruptConfig>:

/*
 * IRQ Confifuration and ISR handling
 */
void I2C_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	460a      	mov	r2, r1
 8001436:	71fb      	strb	r3, [r7, #7]
 8001438:	4613      	mov	r3, r2
 800143a:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 800143c:	79bb      	ldrb	r3, [r7, #6]
 800143e:	2b01      	cmp	r3, #1
 8001440:	d147      	bne.n	80014d2 <I2C_IRQInterruptConfig+0xa6>
	{
		if(IRQNumber <= 31)
 8001442:	79fb      	ldrb	r3, [r7, #7]
 8001444:	2b1f      	cmp	r3, #31
 8001446:	d80a      	bhi.n	800145e <I2C_IRQInterruptConfig+0x32>
		{
			//Program ISER0 Register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8001448:	4b4a      	ldr	r3, [pc, #296]	@ (8001574 <I2C_IRQInterruptConfig+0x148>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	79fa      	ldrb	r2, [r7, #7]
 800144e:	2101      	movs	r1, #1
 8001450:	fa01 f202 	lsl.w	r2, r1, r2
 8001454:	4611      	mov	r1, r2
 8001456:	4a47      	ldr	r2, [pc, #284]	@ (8001574 <I2C_IRQInterruptConfig+0x148>)
 8001458:	430b      	orrs	r3, r1
 800145a:	6013      	str	r3, [r2, #0]
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}


}
 800145c:	e083      	b.n	8001566 <I2C_IRQInterruptConfig+0x13a>
		}else if((IRQNumber > 31) & (IRQNumber < 64)) //32 to 63
 800145e:	79fb      	ldrb	r3, [r7, #7]
 8001460:	2b1f      	cmp	r3, #31
 8001462:	bf8c      	ite	hi
 8001464:	2301      	movhi	r3, #1
 8001466:	2300      	movls	r3, #0
 8001468:	b2da      	uxtb	r2, r3
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	2b3f      	cmp	r3, #63	@ 0x3f
 800146e:	bf94      	ite	ls
 8001470:	2301      	movls	r3, #1
 8001472:	2300      	movhi	r3, #0
 8001474:	b2db      	uxtb	r3, r3
 8001476:	4013      	ands	r3, r2
 8001478:	b2db      	uxtb	r3, r3
 800147a:	2b00      	cmp	r3, #0
 800147c:	d00c      	beq.n	8001498 <I2C_IRQInterruptConfig+0x6c>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 800147e:	4b3e      	ldr	r3, [pc, #248]	@ (8001578 <I2C_IRQInterruptConfig+0x14c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	79fa      	ldrb	r2, [r7, #7]
 8001484:	f002 021f 	and.w	r2, r2, #31
 8001488:	2101      	movs	r1, #1
 800148a:	fa01 f202 	lsl.w	r2, r1, r2
 800148e:	4611      	mov	r1, r2
 8001490:	4a39      	ldr	r2, [pc, #228]	@ (8001578 <I2C_IRQInterruptConfig+0x14c>)
 8001492:	430b      	orrs	r3, r1
 8001494:	6013      	str	r3, [r2, #0]
}
 8001496:	e066      	b.n	8001566 <I2C_IRQInterruptConfig+0x13a>
		}else if((IRQNumber >= 64) & (IRQNumber < 96)) //64 to 95
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	2b3f      	cmp	r3, #63	@ 0x3f
 800149c:	bf8c      	ite	hi
 800149e:	2301      	movhi	r3, #1
 80014a0:	2300      	movls	r3, #0
 80014a2:	b2da      	uxtb	r2, r3
 80014a4:	79fb      	ldrb	r3, [r7, #7]
 80014a6:	2b5f      	cmp	r3, #95	@ 0x5f
 80014a8:	bf94      	ite	ls
 80014aa:	2301      	movls	r3, #1
 80014ac:	2300      	movhi	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	4013      	ands	r3, r2
 80014b2:	b2db      	uxtb	r3, r3
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d056      	beq.n	8001566 <I2C_IRQInterruptConfig+0x13a>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80014b8:	4b30      	ldr	r3, [pc, #192]	@ (800157c <I2C_IRQInterruptConfig+0x150>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	79fa      	ldrb	r2, [r7, #7]
 80014be:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80014c2:	2101      	movs	r1, #1
 80014c4:	fa01 f202 	lsl.w	r2, r1, r2
 80014c8:	4611      	mov	r1, r2
 80014ca:	4a2c      	ldr	r2, [pc, #176]	@ (800157c <I2C_IRQInterruptConfig+0x150>)
 80014cc:	430b      	orrs	r3, r1
 80014ce:	6013      	str	r3, [r2, #0]
}
 80014d0:	e049      	b.n	8001566 <I2C_IRQInterruptConfig+0x13a>
	}else if(EnorDi == DISABLE)
 80014d2:	79bb      	ldrb	r3, [r7, #6]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d146      	bne.n	8001566 <I2C_IRQInterruptConfig+0x13a>
		if(IRQNumber <= 31)
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	2b1f      	cmp	r3, #31
 80014dc:	d80a      	bhi.n	80014f4 <I2C_IRQInterruptConfig+0xc8>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80014de:	4b28      	ldr	r3, [pc, #160]	@ (8001580 <I2C_IRQInterruptConfig+0x154>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	79fa      	ldrb	r2, [r7, #7]
 80014e4:	2101      	movs	r1, #1
 80014e6:	fa01 f202 	lsl.w	r2, r1, r2
 80014ea:	4611      	mov	r1, r2
 80014ec:	4a24      	ldr	r2, [pc, #144]	@ (8001580 <I2C_IRQInterruptConfig+0x154>)
 80014ee:	430b      	orrs	r3, r1
 80014f0:	6013      	str	r3, [r2, #0]
}
 80014f2:	e038      	b.n	8001566 <I2C_IRQInterruptConfig+0x13a>
		}else if((IRQNumber > 31) & (IRQNumber < 64))
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	2b1f      	cmp	r3, #31
 80014f8:	bf8c      	ite	hi
 80014fa:	2301      	movhi	r3, #1
 80014fc:	2300      	movls	r3, #0
 80014fe:	b2da      	uxtb	r2, r3
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	2b3f      	cmp	r3, #63	@ 0x3f
 8001504:	bf94      	ite	ls
 8001506:	2301      	movls	r3, #1
 8001508:	2300      	movhi	r3, #0
 800150a:	b2db      	uxtb	r3, r3
 800150c:	4013      	ands	r3, r2
 800150e:	b2db      	uxtb	r3, r3
 8001510:	2b00      	cmp	r3, #0
 8001512:	d00c      	beq.n	800152e <I2C_IRQInterruptConfig+0x102>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 8001514:	4b1b      	ldr	r3, [pc, #108]	@ (8001584 <I2C_IRQInterruptConfig+0x158>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	79fa      	ldrb	r2, [r7, #7]
 800151a:	f002 021f 	and.w	r2, r2, #31
 800151e:	2101      	movs	r1, #1
 8001520:	fa01 f202 	lsl.w	r2, r1, r2
 8001524:	4611      	mov	r1, r2
 8001526:	4a17      	ldr	r2, [pc, #92]	@ (8001584 <I2C_IRQInterruptConfig+0x158>)
 8001528:	430b      	orrs	r3, r1
 800152a:	6013      	str	r3, [r2, #0]
}
 800152c:	e01b      	b.n	8001566 <I2C_IRQInterruptConfig+0x13a>
		}else if((IRQNumber >= 64) & (IRQNumber < 96))
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	2b3f      	cmp	r3, #63	@ 0x3f
 8001532:	bf8c      	ite	hi
 8001534:	2301      	movhi	r3, #1
 8001536:	2300      	movls	r3, #0
 8001538:	b2da      	uxtb	r2, r3
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b5f      	cmp	r3, #95	@ 0x5f
 800153e:	bf94      	ite	ls
 8001540:	2301      	movls	r3, #1
 8001542:	2300      	movhi	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4013      	ands	r3, r2
 8001548:	b2db      	uxtb	r3, r3
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00b      	beq.n	8001566 <I2C_IRQInterruptConfig+0x13a>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 800154e:	4b0e      	ldr	r3, [pc, #56]	@ (8001588 <I2C_IRQInterruptConfig+0x15c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	79fa      	ldrb	r2, [r7, #7]
 8001554:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8001558:	2101      	movs	r1, #1
 800155a:	fa01 f202 	lsl.w	r2, r1, r2
 800155e:	4611      	mov	r1, r2
 8001560:	4a09      	ldr	r2, [pc, #36]	@ (8001588 <I2C_IRQInterruptConfig+0x15c>)
 8001562:	430b      	orrs	r3, r1
 8001564:	6013      	str	r3, [r2, #0]
}
 8001566:	bf00      	nop
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	e000e100 	.word	0xe000e100
 8001578:	e000e104 	.word	0xe000e104
 800157c:	e000e108 	.word	0xe000e108
 8001580:	e000e180 	.word	0xe000e180
 8001584:	e000e184 	.word	0xe000e184
 8001588:	e000e188 	.word	0xe000e188

0800158c <std>:
 800158c:	2300      	movs	r3, #0
 800158e:	b510      	push	{r4, lr}
 8001590:	4604      	mov	r4, r0
 8001592:	e9c0 3300 	strd	r3, r3, [r0]
 8001596:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800159a:	6083      	str	r3, [r0, #8]
 800159c:	8181      	strh	r1, [r0, #12]
 800159e:	6643      	str	r3, [r0, #100]	@ 0x64
 80015a0:	81c2      	strh	r2, [r0, #14]
 80015a2:	6183      	str	r3, [r0, #24]
 80015a4:	4619      	mov	r1, r3
 80015a6:	2208      	movs	r2, #8
 80015a8:	305c      	adds	r0, #92	@ 0x5c
 80015aa:	f000 f9e7 	bl	800197c <memset>
 80015ae:	4b0d      	ldr	r3, [pc, #52]	@ (80015e4 <std+0x58>)
 80015b0:	6263      	str	r3, [r4, #36]	@ 0x24
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <std+0x5c>)
 80015b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80015b6:	4b0d      	ldr	r3, [pc, #52]	@ (80015ec <std+0x60>)
 80015b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80015ba:	4b0d      	ldr	r3, [pc, #52]	@ (80015f0 <std+0x64>)
 80015bc:	6323      	str	r3, [r4, #48]	@ 0x30
 80015be:	4b0d      	ldr	r3, [pc, #52]	@ (80015f4 <std+0x68>)
 80015c0:	6224      	str	r4, [r4, #32]
 80015c2:	429c      	cmp	r4, r3
 80015c4:	d006      	beq.n	80015d4 <std+0x48>
 80015c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80015ca:	4294      	cmp	r4, r2
 80015cc:	d002      	beq.n	80015d4 <std+0x48>
 80015ce:	33d0      	adds	r3, #208	@ 0xd0
 80015d0:	429c      	cmp	r4, r3
 80015d2:	d105      	bne.n	80015e0 <std+0x54>
 80015d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80015d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80015dc:	f000 ba40 	b.w	8001a60 <__retarget_lock_init_recursive>
 80015e0:	bd10      	pop	{r4, pc}
 80015e2:	bf00      	nop
 80015e4:	080017cd 	.word	0x080017cd
 80015e8:	080017ef 	.word	0x080017ef
 80015ec:	08001827 	.word	0x08001827
 80015f0:	0800184b 	.word	0x0800184b
 80015f4:	200000e0 	.word	0x200000e0

080015f8 <stdio_exit_handler>:
 80015f8:	4a02      	ldr	r2, [pc, #8]	@ (8001604 <stdio_exit_handler+0xc>)
 80015fa:	4903      	ldr	r1, [pc, #12]	@ (8001608 <stdio_exit_handler+0x10>)
 80015fc:	4803      	ldr	r0, [pc, #12]	@ (800160c <stdio_exit_handler+0x14>)
 80015fe:	f000 b869 	b.w	80016d4 <_fwalk_sglue>
 8001602:	bf00      	nop
 8001604:	20000020 	.word	0x20000020
 8001608:	08001d61 	.word	0x08001d61
 800160c:	20000030 	.word	0x20000030

08001610 <cleanup_stdio>:
 8001610:	6841      	ldr	r1, [r0, #4]
 8001612:	4b0c      	ldr	r3, [pc, #48]	@ (8001644 <cleanup_stdio+0x34>)
 8001614:	4299      	cmp	r1, r3
 8001616:	b510      	push	{r4, lr}
 8001618:	4604      	mov	r4, r0
 800161a:	d001      	beq.n	8001620 <cleanup_stdio+0x10>
 800161c:	f000 fba0 	bl	8001d60 <_fflush_r>
 8001620:	68a1      	ldr	r1, [r4, #8]
 8001622:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <cleanup_stdio+0x38>)
 8001624:	4299      	cmp	r1, r3
 8001626:	d002      	beq.n	800162e <cleanup_stdio+0x1e>
 8001628:	4620      	mov	r0, r4
 800162a:	f000 fb99 	bl	8001d60 <_fflush_r>
 800162e:	68e1      	ldr	r1, [r4, #12]
 8001630:	4b06      	ldr	r3, [pc, #24]	@ (800164c <cleanup_stdio+0x3c>)
 8001632:	4299      	cmp	r1, r3
 8001634:	d004      	beq.n	8001640 <cleanup_stdio+0x30>
 8001636:	4620      	mov	r0, r4
 8001638:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800163c:	f000 bb90 	b.w	8001d60 <_fflush_r>
 8001640:	bd10      	pop	{r4, pc}
 8001642:	bf00      	nop
 8001644:	200000e0 	.word	0x200000e0
 8001648:	20000148 	.word	0x20000148
 800164c:	200001b0 	.word	0x200001b0

08001650 <global_stdio_init.part.0>:
 8001650:	b510      	push	{r4, lr}
 8001652:	4b0b      	ldr	r3, [pc, #44]	@ (8001680 <global_stdio_init.part.0+0x30>)
 8001654:	4c0b      	ldr	r4, [pc, #44]	@ (8001684 <global_stdio_init.part.0+0x34>)
 8001656:	4a0c      	ldr	r2, [pc, #48]	@ (8001688 <global_stdio_init.part.0+0x38>)
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	4620      	mov	r0, r4
 800165c:	2200      	movs	r2, #0
 800165e:	2104      	movs	r1, #4
 8001660:	f7ff ff94 	bl	800158c <std>
 8001664:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001668:	2201      	movs	r2, #1
 800166a:	2109      	movs	r1, #9
 800166c:	f7ff ff8e 	bl	800158c <std>
 8001670:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001674:	2202      	movs	r2, #2
 8001676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800167a:	2112      	movs	r1, #18
 800167c:	f7ff bf86 	b.w	800158c <std>
 8001680:	20000218 	.word	0x20000218
 8001684:	200000e0 	.word	0x200000e0
 8001688:	080015f9 	.word	0x080015f9

0800168c <__sfp_lock_acquire>:
 800168c:	4801      	ldr	r0, [pc, #4]	@ (8001694 <__sfp_lock_acquire+0x8>)
 800168e:	f000 b9e8 	b.w	8001a62 <__retarget_lock_acquire_recursive>
 8001692:	bf00      	nop
 8001694:	20000221 	.word	0x20000221

08001698 <__sfp_lock_release>:
 8001698:	4801      	ldr	r0, [pc, #4]	@ (80016a0 <__sfp_lock_release+0x8>)
 800169a:	f000 b9e3 	b.w	8001a64 <__retarget_lock_release_recursive>
 800169e:	bf00      	nop
 80016a0:	20000221 	.word	0x20000221

080016a4 <__sinit>:
 80016a4:	b510      	push	{r4, lr}
 80016a6:	4604      	mov	r4, r0
 80016a8:	f7ff fff0 	bl	800168c <__sfp_lock_acquire>
 80016ac:	6a23      	ldr	r3, [r4, #32]
 80016ae:	b11b      	cbz	r3, 80016b8 <__sinit+0x14>
 80016b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80016b4:	f7ff bff0 	b.w	8001698 <__sfp_lock_release>
 80016b8:	4b04      	ldr	r3, [pc, #16]	@ (80016cc <__sinit+0x28>)
 80016ba:	6223      	str	r3, [r4, #32]
 80016bc:	4b04      	ldr	r3, [pc, #16]	@ (80016d0 <__sinit+0x2c>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d1f5      	bne.n	80016b0 <__sinit+0xc>
 80016c4:	f7ff ffc4 	bl	8001650 <global_stdio_init.part.0>
 80016c8:	e7f2      	b.n	80016b0 <__sinit+0xc>
 80016ca:	bf00      	nop
 80016cc:	08001611 	.word	0x08001611
 80016d0:	20000218 	.word	0x20000218

080016d4 <_fwalk_sglue>:
 80016d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80016d8:	4607      	mov	r7, r0
 80016da:	4688      	mov	r8, r1
 80016dc:	4614      	mov	r4, r2
 80016de:	2600      	movs	r6, #0
 80016e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80016e4:	f1b9 0901 	subs.w	r9, r9, #1
 80016e8:	d505      	bpl.n	80016f6 <_fwalk_sglue+0x22>
 80016ea:	6824      	ldr	r4, [r4, #0]
 80016ec:	2c00      	cmp	r4, #0
 80016ee:	d1f7      	bne.n	80016e0 <_fwalk_sglue+0xc>
 80016f0:	4630      	mov	r0, r6
 80016f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80016f6:	89ab      	ldrh	r3, [r5, #12]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d907      	bls.n	800170c <_fwalk_sglue+0x38>
 80016fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001700:	3301      	adds	r3, #1
 8001702:	d003      	beq.n	800170c <_fwalk_sglue+0x38>
 8001704:	4629      	mov	r1, r5
 8001706:	4638      	mov	r0, r7
 8001708:	47c0      	blx	r8
 800170a:	4306      	orrs	r6, r0
 800170c:	3568      	adds	r5, #104	@ 0x68
 800170e:	e7e9      	b.n	80016e4 <_fwalk_sglue+0x10>

08001710 <_puts_r>:
 8001710:	6a03      	ldr	r3, [r0, #32]
 8001712:	b570      	push	{r4, r5, r6, lr}
 8001714:	6884      	ldr	r4, [r0, #8]
 8001716:	4605      	mov	r5, r0
 8001718:	460e      	mov	r6, r1
 800171a:	b90b      	cbnz	r3, 8001720 <_puts_r+0x10>
 800171c:	f7ff ffc2 	bl	80016a4 <__sinit>
 8001720:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001722:	07db      	lsls	r3, r3, #31
 8001724:	d405      	bmi.n	8001732 <_puts_r+0x22>
 8001726:	89a3      	ldrh	r3, [r4, #12]
 8001728:	0598      	lsls	r0, r3, #22
 800172a:	d402      	bmi.n	8001732 <_puts_r+0x22>
 800172c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800172e:	f000 f998 	bl	8001a62 <__retarget_lock_acquire_recursive>
 8001732:	89a3      	ldrh	r3, [r4, #12]
 8001734:	0719      	lsls	r1, r3, #28
 8001736:	d502      	bpl.n	800173e <_puts_r+0x2e>
 8001738:	6923      	ldr	r3, [r4, #16]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d135      	bne.n	80017aa <_puts_r+0x9a>
 800173e:	4621      	mov	r1, r4
 8001740:	4628      	mov	r0, r5
 8001742:	f000 f8c5 	bl	80018d0 <__swsetup_r>
 8001746:	b380      	cbz	r0, 80017aa <_puts_r+0x9a>
 8001748:	f04f 35ff 	mov.w	r5, #4294967295
 800174c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800174e:	07da      	lsls	r2, r3, #31
 8001750:	d405      	bmi.n	800175e <_puts_r+0x4e>
 8001752:	89a3      	ldrh	r3, [r4, #12]
 8001754:	059b      	lsls	r3, r3, #22
 8001756:	d402      	bmi.n	800175e <_puts_r+0x4e>
 8001758:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800175a:	f000 f983 	bl	8001a64 <__retarget_lock_release_recursive>
 800175e:	4628      	mov	r0, r5
 8001760:	bd70      	pop	{r4, r5, r6, pc}
 8001762:	2b00      	cmp	r3, #0
 8001764:	da04      	bge.n	8001770 <_puts_r+0x60>
 8001766:	69a2      	ldr	r2, [r4, #24]
 8001768:	429a      	cmp	r2, r3
 800176a:	dc17      	bgt.n	800179c <_puts_r+0x8c>
 800176c:	290a      	cmp	r1, #10
 800176e:	d015      	beq.n	800179c <_puts_r+0x8c>
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	1c5a      	adds	r2, r3, #1
 8001774:	6022      	str	r2, [r4, #0]
 8001776:	7019      	strb	r1, [r3, #0]
 8001778:	68a3      	ldr	r3, [r4, #8]
 800177a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800177e:	3b01      	subs	r3, #1
 8001780:	60a3      	str	r3, [r4, #8]
 8001782:	2900      	cmp	r1, #0
 8001784:	d1ed      	bne.n	8001762 <_puts_r+0x52>
 8001786:	2b00      	cmp	r3, #0
 8001788:	da11      	bge.n	80017ae <_puts_r+0x9e>
 800178a:	4622      	mov	r2, r4
 800178c:	210a      	movs	r1, #10
 800178e:	4628      	mov	r0, r5
 8001790:	f000 f85f 	bl	8001852 <__swbuf_r>
 8001794:	3001      	adds	r0, #1
 8001796:	d0d7      	beq.n	8001748 <_puts_r+0x38>
 8001798:	250a      	movs	r5, #10
 800179a:	e7d7      	b.n	800174c <_puts_r+0x3c>
 800179c:	4622      	mov	r2, r4
 800179e:	4628      	mov	r0, r5
 80017a0:	f000 f857 	bl	8001852 <__swbuf_r>
 80017a4:	3001      	adds	r0, #1
 80017a6:	d1e7      	bne.n	8001778 <_puts_r+0x68>
 80017a8:	e7ce      	b.n	8001748 <_puts_r+0x38>
 80017aa:	3e01      	subs	r6, #1
 80017ac:	e7e4      	b.n	8001778 <_puts_r+0x68>
 80017ae:	6823      	ldr	r3, [r4, #0]
 80017b0:	1c5a      	adds	r2, r3, #1
 80017b2:	6022      	str	r2, [r4, #0]
 80017b4:	220a      	movs	r2, #10
 80017b6:	701a      	strb	r2, [r3, #0]
 80017b8:	e7ee      	b.n	8001798 <_puts_r+0x88>
	...

080017bc <puts>:
 80017bc:	4b02      	ldr	r3, [pc, #8]	@ (80017c8 <puts+0xc>)
 80017be:	4601      	mov	r1, r0
 80017c0:	6818      	ldr	r0, [r3, #0]
 80017c2:	f7ff bfa5 	b.w	8001710 <_puts_r>
 80017c6:	bf00      	nop
 80017c8:	2000002c 	.word	0x2000002c

080017cc <__sread>:
 80017cc:	b510      	push	{r4, lr}
 80017ce:	460c      	mov	r4, r1
 80017d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017d4:	f000 f8fc 	bl	80019d0 <_read_r>
 80017d8:	2800      	cmp	r0, #0
 80017da:	bfab      	itete	ge
 80017dc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80017de:	89a3      	ldrhlt	r3, [r4, #12]
 80017e0:	181b      	addge	r3, r3, r0
 80017e2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80017e6:	bfac      	ite	ge
 80017e8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80017ea:	81a3      	strhlt	r3, [r4, #12]
 80017ec:	bd10      	pop	{r4, pc}

080017ee <__swrite>:
 80017ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f2:	461f      	mov	r7, r3
 80017f4:	898b      	ldrh	r3, [r1, #12]
 80017f6:	05db      	lsls	r3, r3, #23
 80017f8:	4605      	mov	r5, r0
 80017fa:	460c      	mov	r4, r1
 80017fc:	4616      	mov	r6, r2
 80017fe:	d505      	bpl.n	800180c <__swrite+0x1e>
 8001800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001804:	2302      	movs	r3, #2
 8001806:	2200      	movs	r2, #0
 8001808:	f000 f8d0 	bl	80019ac <_lseek_r>
 800180c:	89a3      	ldrh	r3, [r4, #12]
 800180e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001812:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001816:	81a3      	strh	r3, [r4, #12]
 8001818:	4632      	mov	r2, r6
 800181a:	463b      	mov	r3, r7
 800181c:	4628      	mov	r0, r5
 800181e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001822:	f000 b8e7 	b.w	80019f4 <_write_r>

08001826 <__sseek>:
 8001826:	b510      	push	{r4, lr}
 8001828:	460c      	mov	r4, r1
 800182a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800182e:	f000 f8bd 	bl	80019ac <_lseek_r>
 8001832:	1c43      	adds	r3, r0, #1
 8001834:	89a3      	ldrh	r3, [r4, #12]
 8001836:	bf15      	itete	ne
 8001838:	6560      	strne	r0, [r4, #84]	@ 0x54
 800183a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800183e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001842:	81a3      	strheq	r3, [r4, #12]
 8001844:	bf18      	it	ne
 8001846:	81a3      	strhne	r3, [r4, #12]
 8001848:	bd10      	pop	{r4, pc}

0800184a <__sclose>:
 800184a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800184e:	f000 b89d 	b.w	800198c <_close_r>

08001852 <__swbuf_r>:
 8001852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001854:	460e      	mov	r6, r1
 8001856:	4614      	mov	r4, r2
 8001858:	4605      	mov	r5, r0
 800185a:	b118      	cbz	r0, 8001864 <__swbuf_r+0x12>
 800185c:	6a03      	ldr	r3, [r0, #32]
 800185e:	b90b      	cbnz	r3, 8001864 <__swbuf_r+0x12>
 8001860:	f7ff ff20 	bl	80016a4 <__sinit>
 8001864:	69a3      	ldr	r3, [r4, #24]
 8001866:	60a3      	str	r3, [r4, #8]
 8001868:	89a3      	ldrh	r3, [r4, #12]
 800186a:	071a      	lsls	r2, r3, #28
 800186c:	d501      	bpl.n	8001872 <__swbuf_r+0x20>
 800186e:	6923      	ldr	r3, [r4, #16]
 8001870:	b943      	cbnz	r3, 8001884 <__swbuf_r+0x32>
 8001872:	4621      	mov	r1, r4
 8001874:	4628      	mov	r0, r5
 8001876:	f000 f82b 	bl	80018d0 <__swsetup_r>
 800187a:	b118      	cbz	r0, 8001884 <__swbuf_r+0x32>
 800187c:	f04f 37ff 	mov.w	r7, #4294967295
 8001880:	4638      	mov	r0, r7
 8001882:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001884:	6823      	ldr	r3, [r4, #0]
 8001886:	6922      	ldr	r2, [r4, #16]
 8001888:	1a98      	subs	r0, r3, r2
 800188a:	6963      	ldr	r3, [r4, #20]
 800188c:	b2f6      	uxtb	r6, r6
 800188e:	4283      	cmp	r3, r0
 8001890:	4637      	mov	r7, r6
 8001892:	dc05      	bgt.n	80018a0 <__swbuf_r+0x4e>
 8001894:	4621      	mov	r1, r4
 8001896:	4628      	mov	r0, r5
 8001898:	f000 fa62 	bl	8001d60 <_fflush_r>
 800189c:	2800      	cmp	r0, #0
 800189e:	d1ed      	bne.n	800187c <__swbuf_r+0x2a>
 80018a0:	68a3      	ldr	r3, [r4, #8]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	60a3      	str	r3, [r4, #8]
 80018a6:	6823      	ldr	r3, [r4, #0]
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	6022      	str	r2, [r4, #0]
 80018ac:	701e      	strb	r6, [r3, #0]
 80018ae:	6962      	ldr	r2, [r4, #20]
 80018b0:	1c43      	adds	r3, r0, #1
 80018b2:	429a      	cmp	r2, r3
 80018b4:	d004      	beq.n	80018c0 <__swbuf_r+0x6e>
 80018b6:	89a3      	ldrh	r3, [r4, #12]
 80018b8:	07db      	lsls	r3, r3, #31
 80018ba:	d5e1      	bpl.n	8001880 <__swbuf_r+0x2e>
 80018bc:	2e0a      	cmp	r6, #10
 80018be:	d1df      	bne.n	8001880 <__swbuf_r+0x2e>
 80018c0:	4621      	mov	r1, r4
 80018c2:	4628      	mov	r0, r5
 80018c4:	f000 fa4c 	bl	8001d60 <_fflush_r>
 80018c8:	2800      	cmp	r0, #0
 80018ca:	d0d9      	beq.n	8001880 <__swbuf_r+0x2e>
 80018cc:	e7d6      	b.n	800187c <__swbuf_r+0x2a>
	...

080018d0 <__swsetup_r>:
 80018d0:	b538      	push	{r3, r4, r5, lr}
 80018d2:	4b29      	ldr	r3, [pc, #164]	@ (8001978 <__swsetup_r+0xa8>)
 80018d4:	4605      	mov	r5, r0
 80018d6:	6818      	ldr	r0, [r3, #0]
 80018d8:	460c      	mov	r4, r1
 80018da:	b118      	cbz	r0, 80018e4 <__swsetup_r+0x14>
 80018dc:	6a03      	ldr	r3, [r0, #32]
 80018de:	b90b      	cbnz	r3, 80018e4 <__swsetup_r+0x14>
 80018e0:	f7ff fee0 	bl	80016a4 <__sinit>
 80018e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80018e8:	0719      	lsls	r1, r3, #28
 80018ea:	d422      	bmi.n	8001932 <__swsetup_r+0x62>
 80018ec:	06da      	lsls	r2, r3, #27
 80018ee:	d407      	bmi.n	8001900 <__swsetup_r+0x30>
 80018f0:	2209      	movs	r2, #9
 80018f2:	602a      	str	r2, [r5, #0]
 80018f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018f8:	81a3      	strh	r3, [r4, #12]
 80018fa:	f04f 30ff 	mov.w	r0, #4294967295
 80018fe:	e033      	b.n	8001968 <__swsetup_r+0x98>
 8001900:	0758      	lsls	r0, r3, #29
 8001902:	d512      	bpl.n	800192a <__swsetup_r+0x5a>
 8001904:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001906:	b141      	cbz	r1, 800191a <__swsetup_r+0x4a>
 8001908:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800190c:	4299      	cmp	r1, r3
 800190e:	d002      	beq.n	8001916 <__swsetup_r+0x46>
 8001910:	4628      	mov	r0, r5
 8001912:	f000 f8a9 	bl	8001a68 <_free_r>
 8001916:	2300      	movs	r3, #0
 8001918:	6363      	str	r3, [r4, #52]	@ 0x34
 800191a:	89a3      	ldrh	r3, [r4, #12]
 800191c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001920:	81a3      	strh	r3, [r4, #12]
 8001922:	2300      	movs	r3, #0
 8001924:	6063      	str	r3, [r4, #4]
 8001926:	6923      	ldr	r3, [r4, #16]
 8001928:	6023      	str	r3, [r4, #0]
 800192a:	89a3      	ldrh	r3, [r4, #12]
 800192c:	f043 0308 	orr.w	r3, r3, #8
 8001930:	81a3      	strh	r3, [r4, #12]
 8001932:	6923      	ldr	r3, [r4, #16]
 8001934:	b94b      	cbnz	r3, 800194a <__swsetup_r+0x7a>
 8001936:	89a3      	ldrh	r3, [r4, #12]
 8001938:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800193c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001940:	d003      	beq.n	800194a <__swsetup_r+0x7a>
 8001942:	4621      	mov	r1, r4
 8001944:	4628      	mov	r0, r5
 8001946:	f000 fa59 	bl	8001dfc <__smakebuf_r>
 800194a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800194e:	f013 0201 	ands.w	r2, r3, #1
 8001952:	d00a      	beq.n	800196a <__swsetup_r+0x9a>
 8001954:	2200      	movs	r2, #0
 8001956:	60a2      	str	r2, [r4, #8]
 8001958:	6962      	ldr	r2, [r4, #20]
 800195a:	4252      	negs	r2, r2
 800195c:	61a2      	str	r2, [r4, #24]
 800195e:	6922      	ldr	r2, [r4, #16]
 8001960:	b942      	cbnz	r2, 8001974 <__swsetup_r+0xa4>
 8001962:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8001966:	d1c5      	bne.n	80018f4 <__swsetup_r+0x24>
 8001968:	bd38      	pop	{r3, r4, r5, pc}
 800196a:	0799      	lsls	r1, r3, #30
 800196c:	bf58      	it	pl
 800196e:	6962      	ldrpl	r2, [r4, #20]
 8001970:	60a2      	str	r2, [r4, #8]
 8001972:	e7f4      	b.n	800195e <__swsetup_r+0x8e>
 8001974:	2000      	movs	r0, #0
 8001976:	e7f7      	b.n	8001968 <__swsetup_r+0x98>
 8001978:	2000002c 	.word	0x2000002c

0800197c <memset>:
 800197c:	4402      	add	r2, r0
 800197e:	4603      	mov	r3, r0
 8001980:	4293      	cmp	r3, r2
 8001982:	d100      	bne.n	8001986 <memset+0xa>
 8001984:	4770      	bx	lr
 8001986:	f803 1b01 	strb.w	r1, [r3], #1
 800198a:	e7f9      	b.n	8001980 <memset+0x4>

0800198c <_close_r>:
 800198c:	b538      	push	{r3, r4, r5, lr}
 800198e:	4d06      	ldr	r5, [pc, #24]	@ (80019a8 <_close_r+0x1c>)
 8001990:	2300      	movs	r3, #0
 8001992:	4604      	mov	r4, r0
 8001994:	4608      	mov	r0, r1
 8001996:	602b      	str	r3, [r5, #0]
 8001998:	f7fe fd73 	bl	8000482 <_close>
 800199c:	1c43      	adds	r3, r0, #1
 800199e:	d102      	bne.n	80019a6 <_close_r+0x1a>
 80019a0:	682b      	ldr	r3, [r5, #0]
 80019a2:	b103      	cbz	r3, 80019a6 <_close_r+0x1a>
 80019a4:	6023      	str	r3, [r4, #0]
 80019a6:	bd38      	pop	{r3, r4, r5, pc}
 80019a8:	2000021c 	.word	0x2000021c

080019ac <_lseek_r>:
 80019ac:	b538      	push	{r3, r4, r5, lr}
 80019ae:	4d07      	ldr	r5, [pc, #28]	@ (80019cc <_lseek_r+0x20>)
 80019b0:	4604      	mov	r4, r0
 80019b2:	4608      	mov	r0, r1
 80019b4:	4611      	mov	r1, r2
 80019b6:	2200      	movs	r2, #0
 80019b8:	602a      	str	r2, [r5, #0]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f7fe fd88 	bl	80004d0 <_lseek>
 80019c0:	1c43      	adds	r3, r0, #1
 80019c2:	d102      	bne.n	80019ca <_lseek_r+0x1e>
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	b103      	cbz	r3, 80019ca <_lseek_r+0x1e>
 80019c8:	6023      	str	r3, [r4, #0]
 80019ca:	bd38      	pop	{r3, r4, r5, pc}
 80019cc:	2000021c 	.word	0x2000021c

080019d0 <_read_r>:
 80019d0:	b538      	push	{r3, r4, r5, lr}
 80019d2:	4d07      	ldr	r5, [pc, #28]	@ (80019f0 <_read_r+0x20>)
 80019d4:	4604      	mov	r4, r0
 80019d6:	4608      	mov	r0, r1
 80019d8:	4611      	mov	r1, r2
 80019da:	2200      	movs	r2, #0
 80019dc:	602a      	str	r2, [r5, #0]
 80019de:	461a      	mov	r2, r3
 80019e0:	f7fe fd16 	bl	8000410 <_read>
 80019e4:	1c43      	adds	r3, r0, #1
 80019e6:	d102      	bne.n	80019ee <_read_r+0x1e>
 80019e8:	682b      	ldr	r3, [r5, #0]
 80019ea:	b103      	cbz	r3, 80019ee <_read_r+0x1e>
 80019ec:	6023      	str	r3, [r4, #0]
 80019ee:	bd38      	pop	{r3, r4, r5, pc}
 80019f0:	2000021c 	.word	0x2000021c

080019f4 <_write_r>:
 80019f4:	b538      	push	{r3, r4, r5, lr}
 80019f6:	4d07      	ldr	r5, [pc, #28]	@ (8001a14 <_write_r+0x20>)
 80019f8:	4604      	mov	r4, r0
 80019fa:	4608      	mov	r0, r1
 80019fc:	4611      	mov	r1, r2
 80019fe:	2200      	movs	r2, #0
 8001a00:	602a      	str	r2, [r5, #0]
 8001a02:	461a      	mov	r2, r3
 8001a04:	f7fe fd21 	bl	800044a <_write>
 8001a08:	1c43      	adds	r3, r0, #1
 8001a0a:	d102      	bne.n	8001a12 <_write_r+0x1e>
 8001a0c:	682b      	ldr	r3, [r5, #0]
 8001a0e:	b103      	cbz	r3, 8001a12 <_write_r+0x1e>
 8001a10:	6023      	str	r3, [r4, #0]
 8001a12:	bd38      	pop	{r3, r4, r5, pc}
 8001a14:	2000021c 	.word	0x2000021c

08001a18 <__libc_init_array>:
 8001a18:	b570      	push	{r4, r5, r6, lr}
 8001a1a:	4d0d      	ldr	r5, [pc, #52]	@ (8001a50 <__libc_init_array+0x38>)
 8001a1c:	4c0d      	ldr	r4, [pc, #52]	@ (8001a54 <__libc_init_array+0x3c>)
 8001a1e:	1b64      	subs	r4, r4, r5
 8001a20:	10a4      	asrs	r4, r4, #2
 8001a22:	2600      	movs	r6, #0
 8001a24:	42a6      	cmp	r6, r4
 8001a26:	d109      	bne.n	8001a3c <__libc_init_array+0x24>
 8001a28:	4d0b      	ldr	r5, [pc, #44]	@ (8001a58 <__libc_init_array+0x40>)
 8001a2a:	4c0c      	ldr	r4, [pc, #48]	@ (8001a5c <__libc_init_array+0x44>)
 8001a2c:	f000 fa62 	bl	8001ef4 <_init>
 8001a30:	1b64      	subs	r4, r4, r5
 8001a32:	10a4      	asrs	r4, r4, #2
 8001a34:	2600      	movs	r6, #0
 8001a36:	42a6      	cmp	r6, r4
 8001a38:	d105      	bne.n	8001a46 <__libc_init_array+0x2e>
 8001a3a:	bd70      	pop	{r4, r5, r6, pc}
 8001a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a40:	4798      	blx	r3
 8001a42:	3601      	adds	r6, #1
 8001a44:	e7ee      	b.n	8001a24 <__libc_init_array+0xc>
 8001a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a4a:	4798      	blx	r3
 8001a4c:	3601      	adds	r6, #1
 8001a4e:	e7f2      	b.n	8001a36 <__libc_init_array+0x1e>
 8001a50:	08001f40 	.word	0x08001f40
 8001a54:	08001f40 	.word	0x08001f40
 8001a58:	08001f40 	.word	0x08001f40
 8001a5c:	08001f44 	.word	0x08001f44

08001a60 <__retarget_lock_init_recursive>:
 8001a60:	4770      	bx	lr

08001a62 <__retarget_lock_acquire_recursive>:
 8001a62:	4770      	bx	lr

08001a64 <__retarget_lock_release_recursive>:
 8001a64:	4770      	bx	lr
	...

08001a68 <_free_r>:
 8001a68:	b538      	push	{r3, r4, r5, lr}
 8001a6a:	4605      	mov	r5, r0
 8001a6c:	2900      	cmp	r1, #0
 8001a6e:	d041      	beq.n	8001af4 <_free_r+0x8c>
 8001a70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001a74:	1f0c      	subs	r4, r1, #4
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bfb8      	it	lt
 8001a7a:	18e4      	addlt	r4, r4, r3
 8001a7c:	f000 f8e0 	bl	8001c40 <__malloc_lock>
 8001a80:	4a1d      	ldr	r2, [pc, #116]	@ (8001af8 <_free_r+0x90>)
 8001a82:	6813      	ldr	r3, [r2, #0]
 8001a84:	b933      	cbnz	r3, 8001a94 <_free_r+0x2c>
 8001a86:	6063      	str	r3, [r4, #4]
 8001a88:	6014      	str	r4, [r2, #0]
 8001a8a:	4628      	mov	r0, r5
 8001a8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001a90:	f000 b8dc 	b.w	8001c4c <__malloc_unlock>
 8001a94:	42a3      	cmp	r3, r4
 8001a96:	d908      	bls.n	8001aaa <_free_r+0x42>
 8001a98:	6820      	ldr	r0, [r4, #0]
 8001a9a:	1821      	adds	r1, r4, r0
 8001a9c:	428b      	cmp	r3, r1
 8001a9e:	bf01      	itttt	eq
 8001aa0:	6819      	ldreq	r1, [r3, #0]
 8001aa2:	685b      	ldreq	r3, [r3, #4]
 8001aa4:	1809      	addeq	r1, r1, r0
 8001aa6:	6021      	streq	r1, [r4, #0]
 8001aa8:	e7ed      	b.n	8001a86 <_free_r+0x1e>
 8001aaa:	461a      	mov	r2, r3
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	b10b      	cbz	r3, 8001ab4 <_free_r+0x4c>
 8001ab0:	42a3      	cmp	r3, r4
 8001ab2:	d9fa      	bls.n	8001aaa <_free_r+0x42>
 8001ab4:	6811      	ldr	r1, [r2, #0]
 8001ab6:	1850      	adds	r0, r2, r1
 8001ab8:	42a0      	cmp	r0, r4
 8001aba:	d10b      	bne.n	8001ad4 <_free_r+0x6c>
 8001abc:	6820      	ldr	r0, [r4, #0]
 8001abe:	4401      	add	r1, r0
 8001ac0:	1850      	adds	r0, r2, r1
 8001ac2:	4283      	cmp	r3, r0
 8001ac4:	6011      	str	r1, [r2, #0]
 8001ac6:	d1e0      	bne.n	8001a8a <_free_r+0x22>
 8001ac8:	6818      	ldr	r0, [r3, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	6053      	str	r3, [r2, #4]
 8001ace:	4408      	add	r0, r1
 8001ad0:	6010      	str	r0, [r2, #0]
 8001ad2:	e7da      	b.n	8001a8a <_free_r+0x22>
 8001ad4:	d902      	bls.n	8001adc <_free_r+0x74>
 8001ad6:	230c      	movs	r3, #12
 8001ad8:	602b      	str	r3, [r5, #0]
 8001ada:	e7d6      	b.n	8001a8a <_free_r+0x22>
 8001adc:	6820      	ldr	r0, [r4, #0]
 8001ade:	1821      	adds	r1, r4, r0
 8001ae0:	428b      	cmp	r3, r1
 8001ae2:	bf04      	itt	eq
 8001ae4:	6819      	ldreq	r1, [r3, #0]
 8001ae6:	685b      	ldreq	r3, [r3, #4]
 8001ae8:	6063      	str	r3, [r4, #4]
 8001aea:	bf04      	itt	eq
 8001aec:	1809      	addeq	r1, r1, r0
 8001aee:	6021      	streq	r1, [r4, #0]
 8001af0:	6054      	str	r4, [r2, #4]
 8001af2:	e7ca      	b.n	8001a8a <_free_r+0x22>
 8001af4:	bd38      	pop	{r3, r4, r5, pc}
 8001af6:	bf00      	nop
 8001af8:	20000228 	.word	0x20000228

08001afc <sbrk_aligned>:
 8001afc:	b570      	push	{r4, r5, r6, lr}
 8001afe:	4e0f      	ldr	r6, [pc, #60]	@ (8001b3c <sbrk_aligned+0x40>)
 8001b00:	460c      	mov	r4, r1
 8001b02:	6831      	ldr	r1, [r6, #0]
 8001b04:	4605      	mov	r5, r0
 8001b06:	b911      	cbnz	r1, 8001b0e <sbrk_aligned+0x12>
 8001b08:	f000 f9d6 	bl	8001eb8 <_sbrk_r>
 8001b0c:	6030      	str	r0, [r6, #0]
 8001b0e:	4621      	mov	r1, r4
 8001b10:	4628      	mov	r0, r5
 8001b12:	f000 f9d1 	bl	8001eb8 <_sbrk_r>
 8001b16:	1c43      	adds	r3, r0, #1
 8001b18:	d103      	bne.n	8001b22 <sbrk_aligned+0x26>
 8001b1a:	f04f 34ff 	mov.w	r4, #4294967295
 8001b1e:	4620      	mov	r0, r4
 8001b20:	bd70      	pop	{r4, r5, r6, pc}
 8001b22:	1cc4      	adds	r4, r0, #3
 8001b24:	f024 0403 	bic.w	r4, r4, #3
 8001b28:	42a0      	cmp	r0, r4
 8001b2a:	d0f8      	beq.n	8001b1e <sbrk_aligned+0x22>
 8001b2c:	1a21      	subs	r1, r4, r0
 8001b2e:	4628      	mov	r0, r5
 8001b30:	f000 f9c2 	bl	8001eb8 <_sbrk_r>
 8001b34:	3001      	adds	r0, #1
 8001b36:	d1f2      	bne.n	8001b1e <sbrk_aligned+0x22>
 8001b38:	e7ef      	b.n	8001b1a <sbrk_aligned+0x1e>
 8001b3a:	bf00      	nop
 8001b3c:	20000224 	.word	0x20000224

08001b40 <_malloc_r>:
 8001b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b44:	1ccd      	adds	r5, r1, #3
 8001b46:	f025 0503 	bic.w	r5, r5, #3
 8001b4a:	3508      	adds	r5, #8
 8001b4c:	2d0c      	cmp	r5, #12
 8001b4e:	bf38      	it	cc
 8001b50:	250c      	movcc	r5, #12
 8001b52:	2d00      	cmp	r5, #0
 8001b54:	4606      	mov	r6, r0
 8001b56:	db01      	blt.n	8001b5c <_malloc_r+0x1c>
 8001b58:	42a9      	cmp	r1, r5
 8001b5a:	d904      	bls.n	8001b66 <_malloc_r+0x26>
 8001b5c:	230c      	movs	r3, #12
 8001b5e:	6033      	str	r3, [r6, #0]
 8001b60:	2000      	movs	r0, #0
 8001b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001b66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c3c <_malloc_r+0xfc>
 8001b6a:	f000 f869 	bl	8001c40 <__malloc_lock>
 8001b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8001b72:	461c      	mov	r4, r3
 8001b74:	bb44      	cbnz	r4, 8001bc8 <_malloc_r+0x88>
 8001b76:	4629      	mov	r1, r5
 8001b78:	4630      	mov	r0, r6
 8001b7a:	f7ff ffbf 	bl	8001afc <sbrk_aligned>
 8001b7e:	1c43      	adds	r3, r0, #1
 8001b80:	4604      	mov	r4, r0
 8001b82:	d158      	bne.n	8001c36 <_malloc_r+0xf6>
 8001b84:	f8d8 4000 	ldr.w	r4, [r8]
 8001b88:	4627      	mov	r7, r4
 8001b8a:	2f00      	cmp	r7, #0
 8001b8c:	d143      	bne.n	8001c16 <_malloc_r+0xd6>
 8001b8e:	2c00      	cmp	r4, #0
 8001b90:	d04b      	beq.n	8001c2a <_malloc_r+0xea>
 8001b92:	6823      	ldr	r3, [r4, #0]
 8001b94:	4639      	mov	r1, r7
 8001b96:	4630      	mov	r0, r6
 8001b98:	eb04 0903 	add.w	r9, r4, r3
 8001b9c:	f000 f98c 	bl	8001eb8 <_sbrk_r>
 8001ba0:	4581      	cmp	r9, r0
 8001ba2:	d142      	bne.n	8001c2a <_malloc_r+0xea>
 8001ba4:	6821      	ldr	r1, [r4, #0]
 8001ba6:	1a6d      	subs	r5, r5, r1
 8001ba8:	4629      	mov	r1, r5
 8001baa:	4630      	mov	r0, r6
 8001bac:	f7ff ffa6 	bl	8001afc <sbrk_aligned>
 8001bb0:	3001      	adds	r0, #1
 8001bb2:	d03a      	beq.n	8001c2a <_malloc_r+0xea>
 8001bb4:	6823      	ldr	r3, [r4, #0]
 8001bb6:	442b      	add	r3, r5
 8001bb8:	6023      	str	r3, [r4, #0]
 8001bba:	f8d8 3000 	ldr.w	r3, [r8]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	bb62      	cbnz	r2, 8001c1c <_malloc_r+0xdc>
 8001bc2:	f8c8 7000 	str.w	r7, [r8]
 8001bc6:	e00f      	b.n	8001be8 <_malloc_r+0xa8>
 8001bc8:	6822      	ldr	r2, [r4, #0]
 8001bca:	1b52      	subs	r2, r2, r5
 8001bcc:	d420      	bmi.n	8001c10 <_malloc_r+0xd0>
 8001bce:	2a0b      	cmp	r2, #11
 8001bd0:	d917      	bls.n	8001c02 <_malloc_r+0xc2>
 8001bd2:	1961      	adds	r1, r4, r5
 8001bd4:	42a3      	cmp	r3, r4
 8001bd6:	6025      	str	r5, [r4, #0]
 8001bd8:	bf18      	it	ne
 8001bda:	6059      	strne	r1, [r3, #4]
 8001bdc:	6863      	ldr	r3, [r4, #4]
 8001bde:	bf08      	it	eq
 8001be0:	f8c8 1000 	streq.w	r1, [r8]
 8001be4:	5162      	str	r2, [r4, r5]
 8001be6:	604b      	str	r3, [r1, #4]
 8001be8:	4630      	mov	r0, r6
 8001bea:	f000 f82f 	bl	8001c4c <__malloc_unlock>
 8001bee:	f104 000b 	add.w	r0, r4, #11
 8001bf2:	1d23      	adds	r3, r4, #4
 8001bf4:	f020 0007 	bic.w	r0, r0, #7
 8001bf8:	1ac2      	subs	r2, r0, r3
 8001bfa:	bf1c      	itt	ne
 8001bfc:	1a1b      	subne	r3, r3, r0
 8001bfe:	50a3      	strne	r3, [r4, r2]
 8001c00:	e7af      	b.n	8001b62 <_malloc_r+0x22>
 8001c02:	6862      	ldr	r2, [r4, #4]
 8001c04:	42a3      	cmp	r3, r4
 8001c06:	bf0c      	ite	eq
 8001c08:	f8c8 2000 	streq.w	r2, [r8]
 8001c0c:	605a      	strne	r2, [r3, #4]
 8001c0e:	e7eb      	b.n	8001be8 <_malloc_r+0xa8>
 8001c10:	4623      	mov	r3, r4
 8001c12:	6864      	ldr	r4, [r4, #4]
 8001c14:	e7ae      	b.n	8001b74 <_malloc_r+0x34>
 8001c16:	463c      	mov	r4, r7
 8001c18:	687f      	ldr	r7, [r7, #4]
 8001c1a:	e7b6      	b.n	8001b8a <_malloc_r+0x4a>
 8001c1c:	461a      	mov	r2, r3
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	42a3      	cmp	r3, r4
 8001c22:	d1fb      	bne.n	8001c1c <_malloc_r+0xdc>
 8001c24:	2300      	movs	r3, #0
 8001c26:	6053      	str	r3, [r2, #4]
 8001c28:	e7de      	b.n	8001be8 <_malloc_r+0xa8>
 8001c2a:	230c      	movs	r3, #12
 8001c2c:	6033      	str	r3, [r6, #0]
 8001c2e:	4630      	mov	r0, r6
 8001c30:	f000 f80c 	bl	8001c4c <__malloc_unlock>
 8001c34:	e794      	b.n	8001b60 <_malloc_r+0x20>
 8001c36:	6005      	str	r5, [r0, #0]
 8001c38:	e7d6      	b.n	8001be8 <_malloc_r+0xa8>
 8001c3a:	bf00      	nop
 8001c3c:	20000228 	.word	0x20000228

08001c40 <__malloc_lock>:
 8001c40:	4801      	ldr	r0, [pc, #4]	@ (8001c48 <__malloc_lock+0x8>)
 8001c42:	f7ff bf0e 	b.w	8001a62 <__retarget_lock_acquire_recursive>
 8001c46:	bf00      	nop
 8001c48:	20000220 	.word	0x20000220

08001c4c <__malloc_unlock>:
 8001c4c:	4801      	ldr	r0, [pc, #4]	@ (8001c54 <__malloc_unlock+0x8>)
 8001c4e:	f7ff bf09 	b.w	8001a64 <__retarget_lock_release_recursive>
 8001c52:	bf00      	nop
 8001c54:	20000220 	.word	0x20000220

08001c58 <__sflush_r>:
 8001c58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8001c5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c60:	0716      	lsls	r6, r2, #28
 8001c62:	4605      	mov	r5, r0
 8001c64:	460c      	mov	r4, r1
 8001c66:	d454      	bmi.n	8001d12 <__sflush_r+0xba>
 8001c68:	684b      	ldr	r3, [r1, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	dc02      	bgt.n	8001c74 <__sflush_r+0x1c>
 8001c6e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	dd48      	ble.n	8001d06 <__sflush_r+0xae>
 8001c74:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001c76:	2e00      	cmp	r6, #0
 8001c78:	d045      	beq.n	8001d06 <__sflush_r+0xae>
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8001c80:	682f      	ldr	r7, [r5, #0]
 8001c82:	6a21      	ldr	r1, [r4, #32]
 8001c84:	602b      	str	r3, [r5, #0]
 8001c86:	d030      	beq.n	8001cea <__sflush_r+0x92>
 8001c88:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8001c8a:	89a3      	ldrh	r3, [r4, #12]
 8001c8c:	0759      	lsls	r1, r3, #29
 8001c8e:	d505      	bpl.n	8001c9c <__sflush_r+0x44>
 8001c90:	6863      	ldr	r3, [r4, #4]
 8001c92:	1ad2      	subs	r2, r2, r3
 8001c94:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8001c96:	b10b      	cbz	r3, 8001c9c <__sflush_r+0x44>
 8001c98:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8001c9a:	1ad2      	subs	r2, r2, r3
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8001ca0:	6a21      	ldr	r1, [r4, #32]
 8001ca2:	4628      	mov	r0, r5
 8001ca4:	47b0      	blx	r6
 8001ca6:	1c43      	adds	r3, r0, #1
 8001ca8:	89a3      	ldrh	r3, [r4, #12]
 8001caa:	d106      	bne.n	8001cba <__sflush_r+0x62>
 8001cac:	6829      	ldr	r1, [r5, #0]
 8001cae:	291d      	cmp	r1, #29
 8001cb0:	d82b      	bhi.n	8001d0a <__sflush_r+0xb2>
 8001cb2:	4a2a      	ldr	r2, [pc, #168]	@ (8001d5c <__sflush_r+0x104>)
 8001cb4:	410a      	asrs	r2, r1
 8001cb6:	07d6      	lsls	r6, r2, #31
 8001cb8:	d427      	bmi.n	8001d0a <__sflush_r+0xb2>
 8001cba:	2200      	movs	r2, #0
 8001cbc:	6062      	str	r2, [r4, #4]
 8001cbe:	04d9      	lsls	r1, r3, #19
 8001cc0:	6922      	ldr	r2, [r4, #16]
 8001cc2:	6022      	str	r2, [r4, #0]
 8001cc4:	d504      	bpl.n	8001cd0 <__sflush_r+0x78>
 8001cc6:	1c42      	adds	r2, r0, #1
 8001cc8:	d101      	bne.n	8001cce <__sflush_r+0x76>
 8001cca:	682b      	ldr	r3, [r5, #0]
 8001ccc:	b903      	cbnz	r3, 8001cd0 <__sflush_r+0x78>
 8001cce:	6560      	str	r0, [r4, #84]	@ 0x54
 8001cd0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001cd2:	602f      	str	r7, [r5, #0]
 8001cd4:	b1b9      	cbz	r1, 8001d06 <__sflush_r+0xae>
 8001cd6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8001cda:	4299      	cmp	r1, r3
 8001cdc:	d002      	beq.n	8001ce4 <__sflush_r+0x8c>
 8001cde:	4628      	mov	r0, r5
 8001ce0:	f7ff fec2 	bl	8001a68 <_free_r>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	6363      	str	r3, [r4, #52]	@ 0x34
 8001ce8:	e00d      	b.n	8001d06 <__sflush_r+0xae>
 8001cea:	2301      	movs	r3, #1
 8001cec:	4628      	mov	r0, r5
 8001cee:	47b0      	blx	r6
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	1c50      	adds	r0, r2, #1
 8001cf4:	d1c9      	bne.n	8001c8a <__sflush_r+0x32>
 8001cf6:	682b      	ldr	r3, [r5, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0c6      	beq.n	8001c8a <__sflush_r+0x32>
 8001cfc:	2b1d      	cmp	r3, #29
 8001cfe:	d001      	beq.n	8001d04 <__sflush_r+0xac>
 8001d00:	2b16      	cmp	r3, #22
 8001d02:	d11e      	bne.n	8001d42 <__sflush_r+0xea>
 8001d04:	602f      	str	r7, [r5, #0]
 8001d06:	2000      	movs	r0, #0
 8001d08:	e022      	b.n	8001d50 <__sflush_r+0xf8>
 8001d0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d0e:	b21b      	sxth	r3, r3
 8001d10:	e01b      	b.n	8001d4a <__sflush_r+0xf2>
 8001d12:	690f      	ldr	r7, [r1, #16]
 8001d14:	2f00      	cmp	r7, #0
 8001d16:	d0f6      	beq.n	8001d06 <__sflush_r+0xae>
 8001d18:	0793      	lsls	r3, r2, #30
 8001d1a:	680e      	ldr	r6, [r1, #0]
 8001d1c:	bf08      	it	eq
 8001d1e:	694b      	ldreq	r3, [r1, #20]
 8001d20:	600f      	str	r7, [r1, #0]
 8001d22:	bf18      	it	ne
 8001d24:	2300      	movne	r3, #0
 8001d26:	eba6 0807 	sub.w	r8, r6, r7
 8001d2a:	608b      	str	r3, [r1, #8]
 8001d2c:	f1b8 0f00 	cmp.w	r8, #0
 8001d30:	dde9      	ble.n	8001d06 <__sflush_r+0xae>
 8001d32:	6a21      	ldr	r1, [r4, #32]
 8001d34:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8001d36:	4643      	mov	r3, r8
 8001d38:	463a      	mov	r2, r7
 8001d3a:	4628      	mov	r0, r5
 8001d3c:	47b0      	blx	r6
 8001d3e:	2800      	cmp	r0, #0
 8001d40:	dc08      	bgt.n	8001d54 <__sflush_r+0xfc>
 8001d42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d4a:	81a3      	strh	r3, [r4, #12]
 8001d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001d54:	4407      	add	r7, r0
 8001d56:	eba8 0800 	sub.w	r8, r8, r0
 8001d5a:	e7e7      	b.n	8001d2c <__sflush_r+0xd4>
 8001d5c:	dfbffffe 	.word	0xdfbffffe

08001d60 <_fflush_r>:
 8001d60:	b538      	push	{r3, r4, r5, lr}
 8001d62:	690b      	ldr	r3, [r1, #16]
 8001d64:	4605      	mov	r5, r0
 8001d66:	460c      	mov	r4, r1
 8001d68:	b913      	cbnz	r3, 8001d70 <_fflush_r+0x10>
 8001d6a:	2500      	movs	r5, #0
 8001d6c:	4628      	mov	r0, r5
 8001d6e:	bd38      	pop	{r3, r4, r5, pc}
 8001d70:	b118      	cbz	r0, 8001d7a <_fflush_r+0x1a>
 8001d72:	6a03      	ldr	r3, [r0, #32]
 8001d74:	b90b      	cbnz	r3, 8001d7a <_fflush_r+0x1a>
 8001d76:	f7ff fc95 	bl	80016a4 <__sinit>
 8001d7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f3      	beq.n	8001d6a <_fflush_r+0xa>
 8001d82:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8001d84:	07d0      	lsls	r0, r2, #31
 8001d86:	d404      	bmi.n	8001d92 <_fflush_r+0x32>
 8001d88:	0599      	lsls	r1, r3, #22
 8001d8a:	d402      	bmi.n	8001d92 <_fflush_r+0x32>
 8001d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001d8e:	f7ff fe68 	bl	8001a62 <__retarget_lock_acquire_recursive>
 8001d92:	4628      	mov	r0, r5
 8001d94:	4621      	mov	r1, r4
 8001d96:	f7ff ff5f 	bl	8001c58 <__sflush_r>
 8001d9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001d9c:	07da      	lsls	r2, r3, #31
 8001d9e:	4605      	mov	r5, r0
 8001da0:	d4e4      	bmi.n	8001d6c <_fflush_r+0xc>
 8001da2:	89a3      	ldrh	r3, [r4, #12]
 8001da4:	059b      	lsls	r3, r3, #22
 8001da6:	d4e1      	bmi.n	8001d6c <_fflush_r+0xc>
 8001da8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001daa:	f7ff fe5b 	bl	8001a64 <__retarget_lock_release_recursive>
 8001dae:	e7dd      	b.n	8001d6c <_fflush_r+0xc>

08001db0 <__swhatbuf_r>:
 8001db0:	b570      	push	{r4, r5, r6, lr}
 8001db2:	460c      	mov	r4, r1
 8001db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001db8:	2900      	cmp	r1, #0
 8001dba:	b096      	sub	sp, #88	@ 0x58
 8001dbc:	4615      	mov	r5, r2
 8001dbe:	461e      	mov	r6, r3
 8001dc0:	da0d      	bge.n	8001dde <__swhatbuf_r+0x2e>
 8001dc2:	89a3      	ldrh	r3, [r4, #12]
 8001dc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001dc8:	f04f 0100 	mov.w	r1, #0
 8001dcc:	bf14      	ite	ne
 8001dce:	2340      	movne	r3, #64	@ 0x40
 8001dd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001dd4:	2000      	movs	r0, #0
 8001dd6:	6031      	str	r1, [r6, #0]
 8001dd8:	602b      	str	r3, [r5, #0]
 8001dda:	b016      	add	sp, #88	@ 0x58
 8001ddc:	bd70      	pop	{r4, r5, r6, pc}
 8001dde:	466a      	mov	r2, sp
 8001de0:	f000 f848 	bl	8001e74 <_fstat_r>
 8001de4:	2800      	cmp	r0, #0
 8001de6:	dbec      	blt.n	8001dc2 <__swhatbuf_r+0x12>
 8001de8:	9901      	ldr	r1, [sp, #4]
 8001dea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8001dee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8001df2:	4259      	negs	r1, r3
 8001df4:	4159      	adcs	r1, r3
 8001df6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001dfa:	e7eb      	b.n	8001dd4 <__swhatbuf_r+0x24>

08001dfc <__smakebuf_r>:
 8001dfc:	898b      	ldrh	r3, [r1, #12]
 8001dfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001e00:	079d      	lsls	r5, r3, #30
 8001e02:	4606      	mov	r6, r0
 8001e04:	460c      	mov	r4, r1
 8001e06:	d507      	bpl.n	8001e18 <__smakebuf_r+0x1c>
 8001e08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8001e0c:	6023      	str	r3, [r4, #0]
 8001e0e:	6123      	str	r3, [r4, #16]
 8001e10:	2301      	movs	r3, #1
 8001e12:	6163      	str	r3, [r4, #20]
 8001e14:	b003      	add	sp, #12
 8001e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e18:	ab01      	add	r3, sp, #4
 8001e1a:	466a      	mov	r2, sp
 8001e1c:	f7ff ffc8 	bl	8001db0 <__swhatbuf_r>
 8001e20:	9f00      	ldr	r7, [sp, #0]
 8001e22:	4605      	mov	r5, r0
 8001e24:	4639      	mov	r1, r7
 8001e26:	4630      	mov	r0, r6
 8001e28:	f7ff fe8a 	bl	8001b40 <_malloc_r>
 8001e2c:	b948      	cbnz	r0, 8001e42 <__smakebuf_r+0x46>
 8001e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e32:	059a      	lsls	r2, r3, #22
 8001e34:	d4ee      	bmi.n	8001e14 <__smakebuf_r+0x18>
 8001e36:	f023 0303 	bic.w	r3, r3, #3
 8001e3a:	f043 0302 	orr.w	r3, r3, #2
 8001e3e:	81a3      	strh	r3, [r4, #12]
 8001e40:	e7e2      	b.n	8001e08 <__smakebuf_r+0xc>
 8001e42:	89a3      	ldrh	r3, [r4, #12]
 8001e44:	6020      	str	r0, [r4, #0]
 8001e46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e4a:	81a3      	strh	r3, [r4, #12]
 8001e4c:	9b01      	ldr	r3, [sp, #4]
 8001e4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001e52:	b15b      	cbz	r3, 8001e6c <__smakebuf_r+0x70>
 8001e54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e58:	4630      	mov	r0, r6
 8001e5a:	f000 f81d 	bl	8001e98 <_isatty_r>
 8001e5e:	b128      	cbz	r0, 8001e6c <__smakebuf_r+0x70>
 8001e60:	89a3      	ldrh	r3, [r4, #12]
 8001e62:	f023 0303 	bic.w	r3, r3, #3
 8001e66:	f043 0301 	orr.w	r3, r3, #1
 8001e6a:	81a3      	strh	r3, [r4, #12]
 8001e6c:	89a3      	ldrh	r3, [r4, #12]
 8001e6e:	431d      	orrs	r5, r3
 8001e70:	81a5      	strh	r5, [r4, #12]
 8001e72:	e7cf      	b.n	8001e14 <__smakebuf_r+0x18>

08001e74 <_fstat_r>:
 8001e74:	b538      	push	{r3, r4, r5, lr}
 8001e76:	4d07      	ldr	r5, [pc, #28]	@ (8001e94 <_fstat_r+0x20>)
 8001e78:	2300      	movs	r3, #0
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	602b      	str	r3, [r5, #0]
 8001e82:	f7fe fb0a 	bl	800049a <_fstat>
 8001e86:	1c43      	adds	r3, r0, #1
 8001e88:	d102      	bne.n	8001e90 <_fstat_r+0x1c>
 8001e8a:	682b      	ldr	r3, [r5, #0]
 8001e8c:	b103      	cbz	r3, 8001e90 <_fstat_r+0x1c>
 8001e8e:	6023      	str	r3, [r4, #0]
 8001e90:	bd38      	pop	{r3, r4, r5, pc}
 8001e92:	bf00      	nop
 8001e94:	2000021c 	.word	0x2000021c

08001e98 <_isatty_r>:
 8001e98:	b538      	push	{r3, r4, r5, lr}
 8001e9a:	4d06      	ldr	r5, [pc, #24]	@ (8001eb4 <_isatty_r+0x1c>)
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	4604      	mov	r4, r0
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	602b      	str	r3, [r5, #0]
 8001ea4:	f7fe fb09 	bl	80004ba <_isatty>
 8001ea8:	1c43      	adds	r3, r0, #1
 8001eaa:	d102      	bne.n	8001eb2 <_isatty_r+0x1a>
 8001eac:	682b      	ldr	r3, [r5, #0]
 8001eae:	b103      	cbz	r3, 8001eb2 <_isatty_r+0x1a>
 8001eb0:	6023      	str	r3, [r4, #0]
 8001eb2:	bd38      	pop	{r3, r4, r5, pc}
 8001eb4:	2000021c 	.word	0x2000021c

08001eb8 <_sbrk_r>:
 8001eb8:	b538      	push	{r3, r4, r5, lr}
 8001eba:	4d06      	ldr	r5, [pc, #24]	@ (8001ed4 <_sbrk_r+0x1c>)
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	4604      	mov	r4, r0
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	602b      	str	r3, [r5, #0]
 8001ec4:	f000 f808 	bl	8001ed8 <_sbrk>
 8001ec8:	1c43      	adds	r3, r0, #1
 8001eca:	d102      	bne.n	8001ed2 <_sbrk_r+0x1a>
 8001ecc:	682b      	ldr	r3, [r5, #0]
 8001ece:	b103      	cbz	r3, 8001ed2 <_sbrk_r+0x1a>
 8001ed0:	6023      	str	r3, [r4, #0]
 8001ed2:	bd38      	pop	{r3, r4, r5, pc}
 8001ed4:	2000021c 	.word	0x2000021c

08001ed8 <_sbrk>:
 8001ed8:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <_sbrk+0x14>)
 8001eda:	6811      	ldr	r1, [r2, #0]
 8001edc:	4603      	mov	r3, r0
 8001ede:	b909      	cbnz	r1, 8001ee4 <_sbrk+0xc>
 8001ee0:	4903      	ldr	r1, [pc, #12]	@ (8001ef0 <_sbrk+0x18>)
 8001ee2:	6011      	str	r1, [r2, #0]
 8001ee4:	6810      	ldr	r0, [r2, #0]
 8001ee6:	4403      	add	r3, r0
 8001ee8:	6013      	str	r3, [r2, #0]
 8001eea:	4770      	bx	lr
 8001eec:	2000022c 	.word	0x2000022c
 8001ef0:	20000230 	.word	0x20000230

08001ef4 <_init>:
 8001ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ef6:	bf00      	nop
 8001ef8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001efa:	bc08      	pop	{r3}
 8001efc:	469e      	mov	lr, r3
 8001efe:	4770      	bx	lr

08001f00 <_fini>:
 8001f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f02:	bf00      	nop
 8001f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001f06:	bc08      	pop	{r3}
 8001f08:	469e      	mov	lr, r3
 8001f0a:	4770      	bx	lr
