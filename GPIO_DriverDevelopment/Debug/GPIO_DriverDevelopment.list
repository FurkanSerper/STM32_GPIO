
GPIO_DriverDevelopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000ccc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000e54  08000e54  00002414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000e54  08000e54  00002414  2**0
                  CONTENTS
  4 .ARM          00000008  08000e54  08000e54  00001e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000e5c  08000e5c  00002414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000e5c  08000e5c  00001e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000e60  08000e60  00001e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000414  20000000  08000e64  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002414  2**0
                  CONTENTS
 10 .bss          00000040  20000414  20000414  00002414  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000454  20000454  00002414  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002414  2**0
                  CONTENTS, READONLY
 13 .debug_info   000017b6  00000000  00000000  00002444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000063c  00000000  00000000  00003bfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000190  00000000  00000000  00004238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000120  00000000  00000000  000043c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002dd4  00000000  00000000  000044e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002858  00000000  00000000  000072bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000abdd  00000000  00000000  00009b14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000146f1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000558  00000000  00000000  00014734  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  00014c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000414 	.word	0x20000414
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000e3c 	.word	0x08000e3c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000418 	.word	0x20000418
 80001c4:	08000e3c 	.word	0x08000e3c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <USART2_Init>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart2_handle;

void USART2_Init(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 80001dc:	4b0d      	ldr	r3, [pc, #52]	@ (8000214 <USART2_Init+0x3c>)
 80001de:	4a0e      	ldr	r2, [pc, #56]	@ (8000218 <USART2_Init+0x40>)
 80001e0:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80001e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000214 <USART2_Init+0x3c>)
 80001e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80001e8:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80001ea:	4b0a      	ldr	r3, [pc, #40]	@ (8000214 <USART2_Init+0x3c>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 80001f0:	4b08      	ldr	r3, [pc, #32]	@ (8000214 <USART2_Init+0x3c>)
 80001f2:	2200      	movs	r2, #0
 80001f4:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80001f6:	4b07      	ldr	r3, [pc, #28]	@ (8000214 <USART2_Init+0x3c>)
 80001f8:	2200      	movs	r2, #0
 80001fa:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80001fc:	4b05      	ldr	r3, [pc, #20]	@ (8000214 <USART2_Init+0x3c>)
 80001fe:	2200      	movs	r2, #0
 8000200:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000202:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <USART2_Init+0x3c>)
 8000204:	2200      	movs	r2, #0
 8000206:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000208:	4802      	ldr	r0, [pc, #8]	@ (8000214 <USART2_Init+0x3c>)
 800020a:	f000 fc9c 	bl	8000b46 <USART_Init>
}
 800020e:	bf00      	nop
 8000210:	bd80      	pop	{r7, pc}
 8000212:	bf00      	nop
 8000214:	20000430 	.word	0x20000430
 8000218:	40004400 	.word	0x40004400

0800021c <USART2_GPIOInit>:

void 	USART2_GPIOInit(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	b084      	sub	sp, #16
 8000220:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000222:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <USART2_GPIOInit+0x40>)
 8000224:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000226:	2302      	movs	r3, #2
 8000228:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800022a:	2300      	movs	r3, #0
 800022c:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 800022e:	2301      	movs	r3, #1
 8000230:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000232:	2302      	movs	r3, #2
 8000234:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000236:	2307      	movs	r3, #7
 8000238:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 800023a:	2302      	movs	r3, #2
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f98b 	bl	800055c <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000246:	2303      	movs	r3, #3
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f985 	bl	800055c <GPIO_Init>


}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40020000 	.word	0x40020000

08000260 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000266:	4b13      	ldr	r3, [pc, #76]	@ (80002b4 <GPIO_ButtonInit+0x54>)
 8000268:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 800026a:	2300      	movs	r3, #0
 800026c:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800026e:	2300      	movs	r3, #0
 8000270:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000272:	2302      	movs	r3, #2
 8000274:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000276:	2300      	movs	r3, #0
 8000278:	74fb      	strb	r3, [r7, #19]

	GPIO_Init(&GPIOBtn);
 800027a:	f107 030c 	add.w	r3, r7, #12
 800027e:	4618      	mov	r0, r3
 8000280:	f000 f96c 	bl	800055c <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000284:	4b0c      	ldr	r3, [pc, #48]	@ (80002b8 <GPIO_ButtonInit+0x58>)
 8000286:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000288:	230c      	movs	r3, #12
 800028a:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 800028c:	2301      	movs	r3, #1
 800028e:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000290:	2302      	movs	r3, #2
 8000292:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000294:	2301      	movs	r3, #1
 8000296:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000298:	2300      	movs	r3, #0
 800029a:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD,ENABLE);
 800029c:	2101      	movs	r1, #1
 800029e:	4806      	ldr	r0, [pc, #24]	@ (80002b8 <GPIO_ButtonInit+0x58>)
 80002a0:	f000 f874 	bl	800038c <GPIO_PeriClockControl>

	GPIO_Init(&GpioLed);
 80002a4:	463b      	mov	r3, r7
 80002a6:	4618      	mov	r0, r3
 80002a8:	f000 f958 	bl	800055c <GPIO_Init>

}
 80002ac:	bf00      	nop
 80002ae:	3718      	adds	r7, #24
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}
 80002b4:	40020000 	.word	0x40020000
 80002b8:	40020c00 	.word	0x40020c00

080002bc <delay>:

void delay(void)
{
 80002bc:	b480      	push	{r7}
 80002be:	b083      	sub	sp, #12
 80002c0:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 80002c2:	2300      	movs	r3, #0
 80002c4:	607b      	str	r3, [r7, #4]
 80002c6:	e002      	b.n	80002ce <delay+0x12>
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	3301      	adds	r3, #1
 80002cc:	607b      	str	r3, [r7, #4]
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	4a04      	ldr	r2, [pc, #16]	@ (80002e4 <delay+0x28>)
 80002d2:	4293      	cmp	r3, r2
 80002d4:	d9f8      	bls.n	80002c8 <delay+0xc>
}
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	370c      	adds	r7, #12
 80002dc:	46bd      	mov	sp, r7
 80002de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e2:	4770      	bx	lr
 80002e4:	0003d08f 	.word	0x0003d08f

080002e8 <main>:


int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 80002ec:	f7ff ffb8 	bl	8000260 <GPIO_ButtonInit>

	USART2_GPIOInit();
 80002f0:	f7ff ff94 	bl	800021c <USART2_GPIOInit>

    USART2_Init();
 80002f4:	f7ff ff70 	bl	80001d8 <USART2_Init>

    USART_PeripheralControl(USART2,ENABLE);
 80002f8:	2101      	movs	r1, #1
 80002fa:	480b      	ldr	r0, [pc, #44]	@ (8000328 <main+0x40>)
 80002fc:	f000 fc04 	bl	8000b08 <USART_PeripheralControl>

    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000300:	bf00      	nop
 8000302:	2100      	movs	r1, #0
 8000304:	4809      	ldr	r0, [pc, #36]	@ (800032c <main+0x44>)
 8000306:	f000 fac9 	bl	800089c <GPIO_ReadFromInputPin>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d0f8      	beq.n	8000302 <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000310:	f7ff ffd4 	bl	80002bc <delay>

		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000314:	4806      	ldr	r0, [pc, #24]	@ (8000330 <main+0x48>)
 8000316:	f7ff ff57 	bl	80001c8 <strlen>
 800031a:	4603      	mov	r3, r0
 800031c:	461a      	mov	r2, r3
 800031e:	4904      	ldr	r1, [pc, #16]	@ (8000330 <main+0x48>)
 8000320:	4804      	ldr	r0, [pc, #16]	@ (8000334 <main+0x4c>)
 8000322:	f000 fc91 	bl	8000c48 <USART_SendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000326:	e7eb      	b.n	8000300 <main+0x18>
 8000328:	40004400 	.word	0x40004400
 800032c:	40020000 	.word	0x40020000
 8000330:	20000000 	.word	0x20000000
 8000334:	20000430 	.word	0x20000430

08000338 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000338:	480d      	ldr	r0, [pc, #52]	@ (8000370 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800033a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800033c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000340:	480c      	ldr	r0, [pc, #48]	@ (8000374 <LoopForever+0x6>)
  ldr r1, =_edata
 8000342:	490d      	ldr	r1, [pc, #52]	@ (8000378 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000344:	4a0d      	ldr	r2, [pc, #52]	@ (800037c <LoopForever+0xe>)
  movs r3, #0
 8000346:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000348:	e002      	b.n	8000350 <LoopCopyDataInit>

0800034a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800034a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800034c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800034e:	3304      	adds	r3, #4

08000350 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000350:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000352:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000354:	d3f9      	bcc.n	800034a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000356:	4a0a      	ldr	r2, [pc, #40]	@ (8000380 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000358:	4c0a      	ldr	r4, [pc, #40]	@ (8000384 <LoopForever+0x16>)
  movs r3, #0
 800035a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800035c:	e001      	b.n	8000362 <LoopFillZerobss>

0800035e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800035e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000360:	3204      	adds	r2, #4

08000362 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000362:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000364:	d3fb      	bcc.n	800035e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000366:	f000 fd45 	bl	8000df4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800036a:	f7ff ffbd 	bl	80002e8 <main>

0800036e <LoopForever>:

LoopForever:
  b LoopForever
 800036e:	e7fe      	b.n	800036e <LoopForever>
  ldr   r0, =_estack
 8000370:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000374:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000378:	20000414 	.word	0x20000414
  ldr r2, =_sidata
 800037c:	08000e64 	.word	0x08000e64
  ldr r2, =_sbss
 8000380:	20000414 	.word	0x20000414
  ldr r4, =_ebss
 8000384:	20000454 	.word	0x20000454

08000388 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000388:	e7fe      	b.n	8000388 <ADC_IRQHandler>
	...

0800038c <GPIO_PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
 8000392:	6078      	str	r0, [r7, #4]
 8000394:	460b      	mov	r3, r1
 8000396:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000398:	78fb      	ldrb	r3, [r7, #3]
 800039a:	2b01      	cmp	r3, #1
 800039c:	d162      	bne.n	8000464 <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a64      	ldr	r2, [pc, #400]	@ (8000534 <GPIO_PeriClockControl+0x1a8>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003a6:	4b64      	ldr	r3, [pc, #400]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003aa:	4a63      	ldr	r2, [pc, #396]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80003ac:	f043 0301 	orr.w	r3, r3, #1
 80003b0:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOI_PCLK_DIS();

		}

	}
}
 80003b2:	e0b9      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a61      	ldr	r2, [pc, #388]	@ (800053c <GPIO_PeriClockControl+0x1b0>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003bc:	4b5e      	ldr	r3, [pc, #376]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c0:	4a5d      	ldr	r2, [pc, #372]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80003c2:	f043 0302 	orr.w	r3, r3, #2
 80003c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c8:	e0ae      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a5c      	ldr	r2, [pc, #368]	@ (8000540 <GPIO_PeriClockControl+0x1b4>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003d2:	4b59      	ldr	r3, [pc, #356]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003d6:	4a58      	ldr	r2, [pc, #352]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80003d8:	f043 0304 	orr.w	r3, r3, #4
 80003dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003de:	e0a3      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a58      	ldr	r2, [pc, #352]	@ (8000544 <GPIO_PeriClockControl+0x1b8>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003e8:	4b53      	ldr	r3, [pc, #332]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ec:	4a52      	ldr	r2, [pc, #328]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80003ee:	f043 0308 	orr.w	r3, r3, #8
 80003f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003f4:	e098      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a53      	ldr	r2, [pc, #332]	@ (8000548 <GPIO_PeriClockControl+0x1bc>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d106      	bne.n	800040c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003fe:	4b4e      	ldr	r3, [pc, #312]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000402:	4a4d      	ldr	r2, [pc, #308]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000404:	f043 0310 	orr.w	r3, r3, #16
 8000408:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800040a:	e08d      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a4f      	ldr	r2, [pc, #316]	@ (800054c <GPIO_PeriClockControl+0x1c0>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000414:	4b48      	ldr	r3, [pc, #288]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000418:	4a47      	ldr	r2, [pc, #284]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 800041a:	f043 0320 	orr.w	r3, r3, #32
 800041e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000420:	e082      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a4a      	ldr	r2, [pc, #296]	@ (8000550 <GPIO_PeriClockControl+0x1c4>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800042a:	4b43      	ldr	r3, [pc, #268]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800042e:	4a42      	ldr	r2, [pc, #264]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000430:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000434:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000436:	e077      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a46      	ldr	r2, [pc, #280]	@ (8000554 <GPIO_PeriClockControl+0x1c8>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000440:	4b3d      	ldr	r3, [pc, #244]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000444:	4a3c      	ldr	r2, [pc, #240]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000446:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800044a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800044c:	e06c      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a41      	ldr	r2, [pc, #260]	@ (8000558 <GPIO_PeriClockControl+0x1cc>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d168      	bne.n	8000528 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 8000456:	4b38      	ldr	r3, [pc, #224]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045a:	4a37      	ldr	r2, [pc, #220]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 800045c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000460:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000462:	e061      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a33      	ldr	r2, [pc, #204]	@ (8000534 <GPIO_PeriClockControl+0x1a8>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DIS();
 800046c:	4b32      	ldr	r3, [pc, #200]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000470:	4a31      	ldr	r2, [pc, #196]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000472:	f023 0301 	bic.w	r3, r3, #1
 8000476:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000478:	e056      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a2f      	ldr	r2, [pc, #188]	@ (800053c <GPIO_PeriClockControl+0x1b0>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DIS();
 8000482:	4b2d      	ldr	r3, [pc, #180]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000486:	4a2c      	ldr	r2, [pc, #176]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000488:	f023 0302 	bic.w	r3, r3, #2
 800048c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800048e:	e04b      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a2b      	ldr	r2, [pc, #172]	@ (8000540 <GPIO_PeriClockControl+0x1b4>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DIS();
 8000498:	4b27      	ldr	r3, [pc, #156]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800049c:	4a26      	ldr	r2, [pc, #152]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 800049e:	f023 0304 	bic.w	r3, r3, #4
 80004a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a4:	e040      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a26      	ldr	r2, [pc, #152]	@ (8000544 <GPIO_PeriClockControl+0x1b8>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DIS();
 80004ae:	4b22      	ldr	r3, [pc, #136]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004b2:	4a21      	ldr	r2, [pc, #132]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80004b4:	f023 0308 	bic.w	r3, r3, #8
 80004b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004ba:	e035      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a22      	ldr	r2, [pc, #136]	@ (8000548 <GPIO_PeriClockControl+0x1bc>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d106      	bne.n	80004d2 <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DIS();
 80004c4:	4b1c      	ldr	r3, [pc, #112]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c8:	4a1b      	ldr	r2, [pc, #108]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80004ca:	f023 0310 	bic.w	r3, r3, #16
 80004ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004d0:	e02a      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	4a1d      	ldr	r2, [pc, #116]	@ (800054c <GPIO_PeriClockControl+0x1c0>)
 80004d6:	4293      	cmp	r3, r2
 80004d8:	d106      	bne.n	80004e8 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DIS();
 80004da:	4b17      	ldr	r3, [pc, #92]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80004dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004de:	4a16      	ldr	r2, [pc, #88]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80004e0:	f023 0320 	bic.w	r3, r3, #32
 80004e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004e6:	e01f      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	4a19      	ldr	r2, [pc, #100]	@ (8000550 <GPIO_PeriClockControl+0x1c4>)
 80004ec:	4293      	cmp	r3, r2
 80004ee:	d106      	bne.n	80004fe <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DIS();
 80004f0:	4b11      	ldr	r3, [pc, #68]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80004f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004f4:	4a10      	ldr	r2, [pc, #64]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 80004f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004fc:	e014      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4a14      	ldr	r2, [pc, #80]	@ (8000554 <GPIO_PeriClockControl+0x1c8>)
 8000502:	4293      	cmp	r3, r2
 8000504:	d106      	bne.n	8000514 <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DIS();
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050a:	4a0b      	ldr	r2, [pc, #44]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 800050c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000510:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000512:	e009      	b.n	8000528 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <GPIO_PeriClockControl+0x1cc>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d105      	bne.n	8000528 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DIS();
 800051c:	4b06      	ldr	r3, [pc, #24]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 800051e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000520:	4a05      	ldr	r2, [pc, #20]	@ (8000538 <GPIO_PeriClockControl+0x1ac>)
 8000522:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8000526:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000528:	bf00      	nop
 800052a:	370c      	adds	r7, #12
 800052c:	46bd      	mov	sp, r7
 800052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000532:	4770      	bx	lr
 8000534:	40020000 	.word	0x40020000
 8000538:	40023800 	.word	0x40023800
 800053c:	40020400 	.word	0x40020400
 8000540:	40020800 	.word	0x40020800
 8000544:	40020c00 	.word	0x40020c00
 8000548:	40021000 	.word	0x40021000
 800054c:	40021400 	.word	0x40021400
 8000550:	40021800 	.word	0x40021800
 8000554:	40021c00 	.word	0x40021c00
 8000558:	40022000 	.word	0x40022000

0800055c <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b086      	sub	sp, #24
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]

	// Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2101      	movs	r1, #1
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ff0c 	bl	800038c <GPIO_PeriClockControl>
	//1. Configure Mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	2b03      	cmp	r3, #3
 800057a:	d81f      	bhi.n	80005bc <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	461a      	mov	r2, r3
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	791b      	ldrb	r3, [r3, #4]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	fa02 f303 	lsl.w	r3, r2, r3
 800058c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	681a      	ldr	r2, [r3, #0]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	791b      	ldrb	r3, [r3, #4]
 8000598:	4619      	mov	r1, r3
 800059a:	2303      	movs	r3, #3
 800059c:	408b      	lsls	r3, r1
 800059e:	43db      	mvns	r3, r3
 80005a0:	4619      	mov	r1, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	400a      	ands	r2, r1
 80005a8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	697a      	ldr	r2, [r7, #20]
 80005b6:	430a      	orrs	r2, r1
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	e0ca      	b.n	8000752 <GPIO_Init+0x1f6>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	795b      	ldrb	r3, [r3, #5]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d117      	bne.n	80005f4 <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c4:	4b4a      	ldr	r3, [pc, #296]	@ (80006f0 <GPIO_Init+0x194>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	687a      	ldr	r2, [r7, #4]
 80005ca:	7912      	ldrb	r2, [r2, #4]
 80005cc:	4611      	mov	r1, r2
 80005ce:	2201      	movs	r2, #1
 80005d0:	408a      	lsls	r2, r1
 80005d2:	4611      	mov	r1, r2
 80005d4:	4a46      	ldr	r2, [pc, #280]	@ (80006f0 <GPIO_Init+0x194>)
 80005d6:	430b      	orrs	r3, r1
 80005d8:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005da:	4b45      	ldr	r3, [pc, #276]	@ (80006f0 <GPIO_Init+0x194>)
 80005dc:	689b      	ldr	r3, [r3, #8]
 80005de:	687a      	ldr	r2, [r7, #4]
 80005e0:	7912      	ldrb	r2, [r2, #4]
 80005e2:	4611      	mov	r1, r2
 80005e4:	2201      	movs	r2, #1
 80005e6:	408a      	lsls	r2, r1
 80005e8:	43d2      	mvns	r2, r2
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a40      	ldr	r2, [pc, #256]	@ (80006f0 <GPIO_Init+0x194>)
 80005ee:	400b      	ands	r3, r1
 80005f0:	6093      	str	r3, [r2, #8]
 80005f2:	e035      	b.n	8000660 <GPIO_Init+0x104>


		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	795b      	ldrb	r3, [r3, #5]
 80005f8:	2b05      	cmp	r3, #5
 80005fa:	d117      	bne.n	800062c <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fc:	4b3c      	ldr	r3, [pc, #240]	@ (80006f0 <GPIO_Init+0x194>)
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	687a      	ldr	r2, [r7, #4]
 8000602:	7912      	ldrb	r2, [r2, #4]
 8000604:	4611      	mov	r1, r2
 8000606:	2201      	movs	r2, #1
 8000608:	408a      	lsls	r2, r1
 800060a:	4611      	mov	r1, r2
 800060c:	4a38      	ldr	r2, [pc, #224]	@ (80006f0 <GPIO_Init+0x194>)
 800060e:	430b      	orrs	r3, r1
 8000610:	6093      	str	r3, [r2, #8]

			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000612:	4b37      	ldr	r3, [pc, #220]	@ (80006f0 <GPIO_Init+0x194>)
 8000614:	68db      	ldr	r3, [r3, #12]
 8000616:	687a      	ldr	r2, [r7, #4]
 8000618:	7912      	ldrb	r2, [r2, #4]
 800061a:	4611      	mov	r1, r2
 800061c:	2201      	movs	r2, #1
 800061e:	408a      	lsls	r2, r1
 8000620:	43d2      	mvns	r2, r2
 8000622:	4611      	mov	r1, r2
 8000624:	4a32      	ldr	r2, [pc, #200]	@ (80006f0 <GPIO_Init+0x194>)
 8000626:	400b      	ands	r3, r1
 8000628:	60d3      	str	r3, [r2, #12]
 800062a:	e019      	b.n	8000660 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	795b      	ldrb	r3, [r3, #5]
 8000630:	2b06      	cmp	r3, #6
 8000632:	d115      	bne.n	8000660 <GPIO_Init+0x104>
		{
			//1. Configure both the FTSR and RTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000634:	4b2e      	ldr	r3, [pc, #184]	@ (80006f0 <GPIO_Init+0x194>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	687a      	ldr	r2, [r7, #4]
 800063a:	7912      	ldrb	r2, [r2, #4]
 800063c:	4611      	mov	r1, r2
 800063e:	2201      	movs	r2, #1
 8000640:	408a      	lsls	r2, r1
 8000642:	4611      	mov	r1, r2
 8000644:	4a2a      	ldr	r2, [pc, #168]	@ (80006f0 <GPIO_Init+0x194>)
 8000646:	430b      	orrs	r3, r1
 8000648:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800064a:	4b29      	ldr	r3, [pc, #164]	@ (80006f0 <GPIO_Init+0x194>)
 800064c:	689b      	ldr	r3, [r3, #8]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	7912      	ldrb	r2, [r2, #4]
 8000652:	4611      	mov	r1, r2
 8000654:	2201      	movs	r2, #1
 8000656:	408a      	lsls	r2, r1
 8000658:	4611      	mov	r1, r2
 800065a:	4a25      	ldr	r2, [pc, #148]	@ (80006f0 <GPIO_Init+0x194>)
 800065c:	430b      	orrs	r3, r1
 800065e:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	089b      	lsrs	r3, r3, #2
 8000666:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	791b      	ldrb	r3, [r3, #4]
 800066c:	f003 0303 	and.w	r3, r3, #3
 8000670:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	4a1f      	ldr	r2, [pc, #124]	@ (80006f4 <GPIO_Init+0x198>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d04d      	beq.n	8000718 <GPIO_Init+0x1bc>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a1d      	ldr	r2, [pc, #116]	@ (80006f8 <GPIO_Init+0x19c>)
 8000682:	4293      	cmp	r3, r2
 8000684:	d032      	beq.n	80006ec <GPIO_Init+0x190>
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	4a1c      	ldr	r2, [pc, #112]	@ (80006fc <GPIO_Init+0x1a0>)
 800068c:	4293      	cmp	r3, r2
 800068e:	d02b      	beq.n	80006e8 <GPIO_Init+0x18c>
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a1a      	ldr	r2, [pc, #104]	@ (8000700 <GPIO_Init+0x1a4>)
 8000696:	4293      	cmp	r3, r2
 8000698:	d024      	beq.n	80006e4 <GPIO_Init+0x188>
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	4a19      	ldr	r2, [pc, #100]	@ (8000704 <GPIO_Init+0x1a8>)
 80006a0:	4293      	cmp	r3, r2
 80006a2:	d01d      	beq.n	80006e0 <GPIO_Init+0x184>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a17      	ldr	r2, [pc, #92]	@ (8000708 <GPIO_Init+0x1ac>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d016      	beq.n	80006dc <GPIO_Init+0x180>
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a16      	ldr	r2, [pc, #88]	@ (800070c <GPIO_Init+0x1b0>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d00f      	beq.n	80006d8 <GPIO_Init+0x17c>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	4a14      	ldr	r2, [pc, #80]	@ (8000710 <GPIO_Init+0x1b4>)
 80006be:	4293      	cmp	r3, r2
 80006c0:	d008      	beq.n	80006d4 <GPIO_Init+0x178>
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	4a13      	ldr	r2, [pc, #76]	@ (8000714 <GPIO_Init+0x1b8>)
 80006c8:	4293      	cmp	r3, r2
 80006ca:	d101      	bne.n	80006d0 <GPIO_Init+0x174>
 80006cc:	2308      	movs	r3, #8
 80006ce:	e024      	b.n	800071a <GPIO_Init+0x1be>
 80006d0:	2300      	movs	r3, #0
 80006d2:	e022      	b.n	800071a <GPIO_Init+0x1be>
 80006d4:	2307      	movs	r3, #7
 80006d6:	e020      	b.n	800071a <GPIO_Init+0x1be>
 80006d8:	2306      	movs	r3, #6
 80006da:	e01e      	b.n	800071a <GPIO_Init+0x1be>
 80006dc:	2305      	movs	r3, #5
 80006de:	e01c      	b.n	800071a <GPIO_Init+0x1be>
 80006e0:	2304      	movs	r3, #4
 80006e2:	e01a      	b.n	800071a <GPIO_Init+0x1be>
 80006e4:	2303      	movs	r3, #3
 80006e6:	e018      	b.n	800071a <GPIO_Init+0x1be>
 80006e8:	2302      	movs	r3, #2
 80006ea:	e016      	b.n	800071a <GPIO_Init+0x1be>
 80006ec:	2301      	movs	r3, #1
 80006ee:	e014      	b.n	800071a <GPIO_Init+0x1be>
 80006f0:	40013c00 	.word	0x40013c00
 80006f4:	40020000 	.word	0x40020000
 80006f8:	40020400 	.word	0x40020400
 80006fc:	40020800 	.word	0x40020800
 8000700:	40020c00 	.word	0x40020c00
 8000704:	40021000 	.word	0x40021000
 8000708:	40021400 	.word	0x40021400
 800070c:	40021800 	.word	0x40021800
 8000710:	40021c00 	.word	0x40021c00
 8000714:	40022000 	.word	0x40022000
 8000718:	2300      	movs	r3, #0
 800071a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800071c:	4b5c      	ldr	r3, [pc, #368]	@ (8000890 <GPIO_Init+0x334>)
 800071e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000720:	4a5b      	ldr	r2, [pc, #364]	@ (8000890 <GPIO_Init+0x334>)
 8000722:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000726:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 8000728:	7c7a      	ldrb	r2, [r7, #17]
 800072a:	7cbb      	ldrb	r3, [r7, #18]
 800072c:	009b      	lsls	r3, r3, #2
 800072e:	fa02 f103 	lsl.w	r1, r2, r3
 8000732:	4a58      	ldr	r2, [pc, #352]	@ (8000894 <GPIO_Init+0x338>)
 8000734:	7cfb      	ldrb	r3, [r7, #19]
 8000736:	3302      	adds	r3, #2
 8000738:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR (interrupt Mask Register)
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800073c:	4b56      	ldr	r3, [pc, #344]	@ (8000898 <GPIO_Init+0x33c>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	7912      	ldrb	r2, [r2, #4]
 8000744:	4611      	mov	r1, r2
 8000746:	2201      	movs	r2, #1
 8000748:	408a      	lsls	r2, r1
 800074a:	4611      	mov	r1, r2
 800074c:	4a52      	ldr	r2, [pc, #328]	@ (8000898 <GPIO_Init+0x33c>)
 800074e:	430b      	orrs	r3, r1
 8000750:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 8000752:	2300      	movs	r3, #0
 8000754:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	799b      	ldrb	r3, [r3, #6]
 800075a:	461a      	mov	r2, r3
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	791b      	ldrb	r3, [r3, #4]
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	689a      	ldr	r2, [r3, #8]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	791b      	ldrb	r3, [r3, #4]
 8000772:	4619      	mov	r1, r3
 8000774:	2303      	movs	r3, #3
 8000776:	408b      	lsls	r3, r1
 8000778:	43db      	mvns	r3, r3
 800077a:	4619      	mov	r1, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	400a      	ands	r2, r1
 8000782:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	6899      	ldr	r1, [r3, #8]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	697a      	ldr	r2, [r7, #20]
 8000790:	430a      	orrs	r2, r1
 8000792:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000794:	2300      	movs	r3, #0
 8000796:	617b      	str	r3, [r7, #20]

	//3. Configure the PuPd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	79db      	ldrb	r3, [r3, #7]
 800079c:	461a      	mov	r2, r3
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	791b      	ldrb	r3, [r3, #4]
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	fa02 f303 	lsl.w	r3, r2, r3
 80007a8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	68da      	ldr	r2, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	791b      	ldrb	r3, [r3, #4]
 80007b4:	4619      	mov	r1, r3
 80007b6:	2303      	movs	r3, #3
 80007b8:	408b      	lsls	r3, r1
 80007ba:	43db      	mvns	r3, r3
 80007bc:	4619      	mov	r1, r3
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	400a      	ands	r2, r1
 80007c4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	68d9      	ldr	r1, [r3, #12]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	697a      	ldr	r2, [r7, #20]
 80007d2:	430a      	orrs	r2, r1
 80007d4:	60da      	str	r2, [r3, #12]
	temp = 0;
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]

	//4. Configure the OPTYPE
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	7a1b      	ldrb	r3, [r3, #8]
 80007de:	461a      	mov	r2, r3
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	fa02 f303 	lsl.w	r3, r2, r3
 80007e8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	685a      	ldr	r2, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	791b      	ldrb	r3, [r3, #4]
 80007f4:	4619      	mov	r1, r3
 80007f6:	2301      	movs	r3, #1
 80007f8:	408b      	lsls	r3, r1
 80007fa:	43db      	mvns	r3, r3
 80007fc:	4619      	mov	r1, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	400a      	ands	r2, r1
 8000804:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	6859      	ldr	r1, [r3, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	697a      	ldr	r2, [r7, #20]
 8000812:	430a      	orrs	r2, r1
 8000814:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
	//5. Configure the Alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	795b      	ldrb	r3, [r3, #5]
 800081e:	2b02      	cmp	r3, #2
 8000820:	d132      	bne.n	8000888 <GPIO_Init+0x32c>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	791b      	ldrb	r3, [r3, #4]
 8000826:	08db      	lsrs	r3, r3, #3
 8000828:	b2db      	uxtb	r3, r3
 800082a:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	791b      	ldrb	r3, [r3, #4]
 8000830:	f003 0307 	and.w	r3, r3, #7
 8000834:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 *temp2));
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	68fa      	ldr	r2, [r7, #12]
 800083c:	3208      	adds	r2, #8
 800083e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	210f      	movs	r1, #15
 8000848:	fa01 f303 	lsl.w	r3, r1, r3
 800084c:	43db      	mvns	r3, r3
 800084e:	4619      	mov	r1, r3
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	4011      	ands	r1, r2
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	3208      	adds	r2, #8
 800085a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	3208      	adds	r2, #8
 8000866:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	7a5b      	ldrb	r3, [r3, #9]
 800086e:	4619      	mov	r1, r3
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	009b      	lsls	r3, r3, #2
 8000874:	fa01 f303 	lsl.w	r3, r1, r3
 8000878:	4619      	mov	r1, r3
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	4311      	orrs	r1, r2
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	3208      	adds	r2, #8
 8000884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000888:	bf00      	nop
 800088a:	3718      	adds	r7, #24
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}
 8000890:	40023800 	.word	0x40023800
 8000894:	40013800 	.word	0x40013800
 8000898:	40013c00 	.word	0x40013c00

0800089c <GPIO_ReadFromInputPin>:

/*
 *  return the Pin is input or not as 0 or 1
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	460b      	mov	r3, r1
 80008a6:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & (0x00000001));
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	691a      	ldr	r2, [r3, #16]
 80008ac:	78fb      	ldrb	r3, [r7, #3]
 80008ae:	fa22 f303 	lsr.w	r3, r2, r3
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	f003 0301 	and.w	r3, r3, #1
 80008b8:	73fb      	strb	r3, [r7, #15]
	return value;
 80008ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80008bc:	4618      	mov	r0, r3
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <RCC_GetPCLK1Value>:
uint8_t APB1_PreScaler[4] = { 2, 4 , 8, 16};



uint32_t RCC_GetPCLK1Value(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc,temp,ahbp,apb1p;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 80008ce:	4b25      	ldr	r3, [pc, #148]	@ (8000964 <RCC_GetPCLK1Value+0x9c>)
 80008d0:	689b      	ldr	r3, [r3, #8]
 80008d2:	089b      	lsrs	r3, r3, #2
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	f003 0303 	and.w	r3, r3, #3
 80008da:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0 )
 80008dc:	7a7b      	ldrb	r3, [r7, #9]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d102      	bne.n	80008e8 <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;
 80008e2:	4b21      	ldr	r3, [pc, #132]	@ (8000968 <RCC_GetPCLK1Value+0xa0>)
 80008e4:	60fb      	str	r3, [r7, #12]
 80008e6:	e00b      	b.n	8000900 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 1)
 80008e8:	7a7b      	ldrb	r3, [r7, #9]
 80008ea:	2b01      	cmp	r3, #1
 80008ec:	d102      	bne.n	80008f4 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;
 80008ee:	4b1f      	ldr	r3, [pc, #124]	@ (800096c <RCC_GetPCLK1Value+0xa4>)
 80008f0:	60fb      	str	r3, [r7, #12]
 80008f2:	e005      	b.n	8000900 <RCC_GetPCLK1Value+0x38>
	}else if (clksrc == 2)
 80008f4:	7a7b      	ldrb	r3, [r7, #9]
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	d102      	bne.n	8000900 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 80008fa:	f000 f88d 	bl	8000a18 <RCC_GetPLLOutputClock>
 80008fe:	60f8      	str	r0, [r7, #12]
	}

	//for ahb
	temp = ((RCC->CFGR >> 4 ) & 0xF);
 8000900:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <RCC_GetPCLK1Value+0x9c>)
 8000902:	689b      	ldr	r3, [r3, #8]
 8000904:	091b      	lsrs	r3, r3, #4
 8000906:	b2db      	uxtb	r3, r3
 8000908:	f003 030f 	and.w	r3, r3, #15
 800090c:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 800090e:	7a3b      	ldrb	r3, [r7, #8]
 8000910:	2b07      	cmp	r3, #7
 8000912:	d802      	bhi.n	800091a <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000914:	2301      	movs	r3, #1
 8000916:	72fb      	strb	r3, [r7, #11]
 8000918:	e005      	b.n	8000926 <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 800091a:	7a3b      	ldrb	r3, [r7, #8]
 800091c:	3b08      	subs	r3, #8
 800091e:	4a14      	ldr	r2, [pc, #80]	@ (8000970 <RCC_GetPCLK1Value+0xa8>)
 8000920:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000924:	72fb      	strb	r3, [r7, #11]
	}



	//apb1
	temp = ((RCC->CFGR >> 10 ) & 0x7);
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <RCC_GetPCLK1Value+0x9c>)
 8000928:	689b      	ldr	r3, [r3, #8]
 800092a:	0a9b      	lsrs	r3, r3, #10
 800092c:	b2db      	uxtb	r3, r3
 800092e:	f003 0307 	and.w	r3, r3, #7
 8000932:	723b      	strb	r3, [r7, #8]

	if(temp < 4)
 8000934:	7a3b      	ldrb	r3, [r7, #8]
 8000936:	2b03      	cmp	r3, #3
 8000938:	d802      	bhi.n	8000940 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 800093a:	2301      	movs	r3, #1
 800093c:	72bb      	strb	r3, [r7, #10]
 800093e:	e004      	b.n	800094a <RCC_GetPCLK1Value+0x82>
	}else
	{
		apb1p = APB1_PreScaler[temp-4];
 8000940:	7a3b      	ldrb	r3, [r7, #8]
 8000942:	3b04      	subs	r3, #4
 8000944:	4a0b      	ldr	r2, [pc, #44]	@ (8000974 <RCC_GetPCLK1Value+0xac>)
 8000946:	5cd3      	ldrb	r3, [r2, r3]
 8000948:	72bb      	strb	r3, [r7, #10]
	}

	pclk1 =  (SystemClk / ahbp) /apb1p;
 800094a:	7afb      	ldrb	r3, [r7, #11]
 800094c:	68fa      	ldr	r2, [r7, #12]
 800094e:	fbb2 f2f3 	udiv	r2, r2, r3
 8000952:	7abb      	ldrb	r3, [r7, #10]
 8000954:	fbb2 f3f3 	udiv	r3, r2, r3
 8000958:	607b      	str	r3, [r7, #4]

	return pclk1;
 800095a:	687b      	ldr	r3, [r7, #4]
}
 800095c:	4618      	mov	r0, r3
 800095e:	3710      	adds	r7, #16
 8000960:	46bd      	mov	sp, r7
 8000962:	bd80      	pop	{r7, pc}
 8000964:	40023800 	.word	0x40023800
 8000968:	00f42400 	.word	0x00f42400
 800096c:	007a1200 	.word	0x007a1200
 8000970:	20000400 	.word	0x20000400
 8000974:	20000410 	.word	0x20000410

08000978 <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 8000978:	b480      	push	{r7}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 800097e:	2300      	movs	r3, #0
 8000980:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000982:	4b20      	ldr	r3, [pc, #128]	@ (8000a04 <RCC_GetPCLK2Value+0x8c>)
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	b2db      	uxtb	r3, r3
 800098a:	f003 0303 	and.w	r3, r3, #3
 800098e:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 8000990:	7a7b      	ldrb	r3, [r7, #9]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d102      	bne.n	800099c <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 8000996:	4b1c      	ldr	r3, [pc, #112]	@ (8000a08 <RCC_GetPCLK2Value+0x90>)
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	e001      	b.n	80009a0 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 800099c:	4b1b      	ldr	r3, [pc, #108]	@ (8000a0c <RCC_GetPCLK2Value+0x94>)
 800099e:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80009a0:	4b18      	ldr	r3, [pc, #96]	@ (8000a04 <RCC_GetPCLK2Value+0x8c>)
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	091b      	lsrs	r3, r3, #4
 80009a6:	f003 030f 	and.w	r3, r3, #15
 80009aa:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	2b07      	cmp	r3, #7
 80009b0:	d802      	bhi.n	80009b8 <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 80009b2:	2301      	movs	r3, #1
 80009b4:	72fb      	strb	r3, [r7, #11]
 80009b6:	e005      	b.n	80009c4 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3b08      	subs	r3, #8
 80009bc:	4a14      	ldr	r2, [pc, #80]	@ (8000a10 <RCC_GetPCLK2Value+0x98>)
 80009be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009c2:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	@ (8000a04 <RCC_GetPCLK2Value+0x8c>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	0b5b      	lsrs	r3, r3, #13
 80009ca:	f003 0307 	and.w	r3, r3, #7
 80009ce:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	2b03      	cmp	r3, #3
 80009d4:	d802      	bhi.n	80009dc <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 80009d6:	2301      	movs	r3, #1
 80009d8:	72bb      	strb	r3, [r7, #10]
 80009da:	e004      	b.n	80009e6 <RCC_GetPCLK2Value+0x6e>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	3b04      	subs	r3, #4
 80009e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000a14 <RCC_GetPCLK2Value+0x9c>)
 80009e2:	5cd3      	ldrb	r3, [r2, r3]
 80009e4:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 80009e6:	7afb      	ldrb	r3, [r7, #11]
 80009e8:	68fa      	ldr	r2, [r7, #12]
 80009ea:	fbb2 f2f3 	udiv	r2, r2, r3
 80009ee:	7abb      	ldrb	r3, [r7, #10]
 80009f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80009f4:	603b      	str	r3, [r7, #0]

	return pclk2;
 80009f6:	683b      	ldr	r3, [r7, #0]
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr
 8000a04:	40023800 	.word	0x40023800
 8000a08:	00f42400 	.word	0x00f42400
 8000a0c:	007a1200 	.word	0x007a1200
 8000a10:	20000400 	.word	0x20000400
 8000a14:	20000410 	.word	0x20000410

08000a18 <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0

	return 0;
 8000a1c:	2300      	movs	r3, #0
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a26:	4770      	bx	lr

08000a28 <USART_PeriClockControl>:
 */

#include "stm32f407xx_usart_driver.h"

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a34:	78fb      	ldrb	r3, [r7, #3]
 8000a36:	2b01      	cmp	r3, #1
 8000a38:	d12b      	bne.n	8000a92 <USART_PeriClockControl+0x6a>
	{
		if(pUSARTx == USART1)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a2d      	ldr	r2, [pc, #180]	@ (8000af4 <USART_PeriClockControl+0xcc>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d106      	bne.n	8000a50 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000a42:	4b2d      	ldr	r3, [pc, #180]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a46:	4a2c      	ldr	r2, [pc, #176]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000a48:	f043 0310 	orr.w	r3, r3, #16
 8000a4c:	6453      	str	r3, [r2, #68]	@ 0x44
		}else if(pUSARTx == USART6)
		{
			USART6_PCLK_DIS();
		}
	}
}
 8000a4e:	e04b      	b.n	8000ae8 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART2)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4a2a      	ldr	r2, [pc, #168]	@ (8000afc <USART_PeriClockControl+0xd4>)
 8000a54:	4293      	cmp	r3, r2
 8000a56:	d106      	bne.n	8000a66 <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a26      	ldr	r2, [pc, #152]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a64:	e040      	b.n	8000ae8 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART3)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a25      	ldr	r2, [pc, #148]	@ (8000b00 <USART_PeriClockControl+0xd8>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d106      	bne.n	8000a7c <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000a6e:	4b22      	ldr	r3, [pc, #136]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a72:	4a21      	ldr	r2, [pc, #132]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000a74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000a78:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000a7a:	e035      	b.n	8000ae8 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART6)
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a21      	ldr	r2, [pc, #132]	@ (8000b04 <USART_PeriClockControl+0xdc>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d131      	bne.n	8000ae8 <USART_PeriClockControl+0xc0>
			USART6_PCLK_EN();
 8000a84:	4b1c      	ldr	r3, [pc, #112]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a88:	4a1b      	ldr	r2, [pc, #108]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000a8a:	f043 0320 	orr.w	r3, r3, #32
 8000a8e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000a90:	e02a      	b.n	8000ae8 <USART_PeriClockControl+0xc0>
		if(pUSARTx == USART1)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4a17      	ldr	r2, [pc, #92]	@ (8000af4 <USART_PeriClockControl+0xcc>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d106      	bne.n	8000aa8 <USART_PeriClockControl+0x80>
			USART1_PCLK_DIS();
 8000a9a:	4b17      	ldr	r3, [pc, #92]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a9e:	4a16      	ldr	r2, [pc, #88]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000aa0:	f023 0310 	bic.w	r3, r3, #16
 8000aa4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000aa6:	e01f      	b.n	8000ae8 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART2)
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a14      	ldr	r2, [pc, #80]	@ (8000afc <USART_PeriClockControl+0xd4>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d106      	bne.n	8000abe <USART_PeriClockControl+0x96>
			USART2_PCLK_DIS();
 8000ab0:	4b11      	ldr	r3, [pc, #68]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab4:	4a10      	ldr	r2, [pc, #64]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000ab6:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000aba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000abc:	e014      	b.n	8000ae8 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART3)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b00 <USART_PeriClockControl+0xd8>)
 8000ac2:	4293      	cmp	r3, r2
 8000ac4:	d106      	bne.n	8000ad4 <USART_PeriClockControl+0xac>
			USART3_PCLK_DIS();
 8000ac6:	4b0c      	ldr	r3, [pc, #48]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a0b      	ldr	r2, [pc, #44]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000acc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000ad2:	e009      	b.n	8000ae8 <USART_PeriClockControl+0xc0>
		}else if(pUSARTx == USART6)
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	@ (8000b04 <USART_PeriClockControl+0xdc>)
 8000ad8:	4293      	cmp	r3, r2
 8000ada:	d105      	bne.n	8000ae8 <USART_PeriClockControl+0xc0>
			USART6_PCLK_DIS();
 8000adc:	4b06      	ldr	r3, [pc, #24]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000ade:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae0:	4a05      	ldr	r2, [pc, #20]	@ (8000af8 <USART_PeriClockControl+0xd0>)
 8000ae2:	f023 0320 	bic.w	r3, r3, #32
 8000ae6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000ae8:	bf00      	nop
 8000aea:	370c      	adds	r7, #12
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40011000 	.word	0x40011000
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40004400 	.word	0x40004400
 8000b00:	40004800 	.word	0x40004800
 8000b04:	40011400 	.word	0x40011400

08000b08 <USART_PeripheralControl>:


void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	2b01      	cmp	r3, #1
 8000b18:	d106      	bne.n	8000b28 <USART_PeripheralControl+0x20>
		{
			pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	68db      	ldr	r3, [r3, #12]
 8000b1e:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60da      	str	r2, [r3, #12]

		}else if(EnOrDi == DISABLE)
		{
			pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
		}
}
 8000b26:	e008      	b.n	8000b3a <USART_PeripheralControl+0x32>
		}else if(EnOrDi == DISABLE)
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d105      	bne.n	8000b3a <USART_PeripheralControl+0x32>
			pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	68db      	ldr	r3, [r3, #12]
 8000b32:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60da      	str	r2, [r3, #12]
}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr

08000b46 <USART_Init>:

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000b46:	b580      	push	{r7, lr}
 8000b48:	b084      	sub	sp, #16
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]

	/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	2101      	movs	r1, #1
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff65 	bl	8000a28 <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	791b      	ldrb	r3, [r3, #4]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d104      	bne.n	8000b70 <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f043 0304 	orr.w	r3, r3, #4
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	e010      	b.n	8000b92 <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	791b      	ldrb	r3, [r3, #4]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d104      	bne.n	8000b82 <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	f043 0308 	orr.w	r3, r3, #8
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	e007      	b.n	8000b92 <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	791b      	ldrb	r3, [r3, #4]
 8000b86:	2b02      	cmp	r3, #2
 8000b88:	d103      	bne.n	8000b92 <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f043 030c 	orr.w	r3, r3, #12
 8000b90:	60fb      	str	r3, [r7, #12]
	}

	//Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M ;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	7b5b      	ldrb	r3, [r3, #13]
 8000b96:	031b      	lsls	r3, r3, #12
 8000b98:	68fa      	ldr	r2, [r7, #12]
 8000b9a:	4313      	orrs	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]


	//Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	7b9b      	ldrb	r3, [r3, #14]
 8000ba2:	2b01      	cmp	r3, #1
 8000ba4:	d104      	bne.n	8000bb0 <USART_Init+0x6a>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	e00b      	b.n	8000bc8 <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	7b9b      	ldrb	r3, [r3, #14]
 8000bb4:	2b02      	cmp	r3, #2
 8000bb6:	d107      	bne.n	8000bc8 <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bbe:	60fb      	str	r3, [r7, #12]

		//Implement the code to enable ODD parity
		tempreg |= ( 1 << USART_CR1_PS);
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bc6:	60fb      	str	r3, [r7, #12]

	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	60da      	str	r2, [r3, #12]

	/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	7b1b      	ldrb	r3, [r3, #12]
 8000bd8:	031b      	lsls	r3, r3, #12
 8000bda:	68fa      	ldr	r2, [r7, #12]
 8000bdc:	4313      	orrs	r3, r2
 8000bde:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	68fa      	ldr	r2, [r7, #12]
 8000be6:	611a      	str	r2, [r3, #16]

	/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000be8:	2300      	movs	r3, #0
 8000bea:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	7bdb      	ldrb	r3, [r3, #15]
 8000bf0:	2b01      	cmp	r3, #1
 8000bf2:	d104      	bne.n	8000bfe <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bfa:	60fb      	str	r3, [r7, #12]
 8000bfc:	e014      	b.n	8000c28 <USART_Init+0xe2>


	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	7bdb      	ldrb	r3, [r3, #15]
 8000c02:	2b02      	cmp	r3, #2
 8000c04:	d104      	bne.n	8000c10 <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= USART_CR3_RTSE;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	f043 0308 	orr.w	r3, r3, #8
 8000c0c:	60fb      	str	r3, [r7, #12]
 8000c0e:	e00b      	b.n	8000c28 <USART_Init+0xe2>

	}else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	7bdb      	ldrb	r3, [r3, #15]
 8000c14:	2b03      	cmp	r3, #3
 8000c16:	d107      	bne.n	8000c28 <USART_Init+0xe2>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= USART_CR3_RTSE;
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	f043 0308 	orr.w	r3, r3, #8
 8000c1e:	60fb      	str	r3, [r7, #12]
		tempreg |= USART_CR3_CTSE;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	f043 0309 	orr.w	r3, r3, #9
 8000c26:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	68fa      	ldr	r2, [r7, #12]
 8000c2e:	615a      	str	r2, [r3, #20]

	/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config.USART_Baud);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681a      	ldr	r2, [r3, #0]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	4610      	mov	r0, r2
 8000c3c:	f000 f852 	bl	8000ce4 <USART_SetBaudRate>
}
 8000c40:	bf00      	nop
 8000c42:	3710      	adds	r7, #16
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <USART_SendData>:
}



void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	60b9      	str	r1, [r7, #8]
 8000c52:	607a      	str	r2, [r7, #4]
	uint16_t *pdata;
	//Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]
 8000c58:	e031      	b.n	8000cbe <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000c5a:	bf00      	nop
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2180      	movs	r1, #128	@ 0x80
 8000c62:	4618      	mov	r0, r3
 8000c64:	f000 f8b0 	bl	8000dc8 <USART_GetFlagStatus>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0f6      	beq.n	8000c5c <USART_SendData+0x14>

		//Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	7b5b      	ldrb	r3, [r3, #13]
 8000c72:	2b01      	cmp	r3, #1
 8000c74:	d118      	bne.n	8000ca8 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000c76:	68bb      	ldr	r3, [r7, #8]
 8000c78:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000c7a:	693b      	ldr	r3, [r7, #16]
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	461a      	mov	r2, r3
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c88:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	7b9b      	ldrb	r3, [r3, #14]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d106      	bne.n	8000ca0 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	3301      	adds	r3, #1
 8000c96:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	e00b      	b.n	8000cb8 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3301      	adds	r3, #1
 8000ca4:	60bb      	str	r3, [r7, #8]
 8000ca6:	e007      	b.n	8000cb8 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	3301      	adds	r3, #1
 8000cb6:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	617b      	str	r3, [r7, #20]
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d3c9      	bcc.n	8000c5a <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000cc6:	bf00      	nop
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2140      	movs	r1, #64	@ 0x40
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f000 f87a 	bl	8000dc8 <USART_GetFlagStatus>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d0f6      	beq.n	8000cc8 <USART_SendData+0x80>

}
 8000cda:	bf00      	nop
 8000cdc:	bf00      	nop
 8000cde:	3718      	adds	r7, #24
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <USART_SetBaudRate>:
		return rxstate;
}


void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
 8000cec:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a31      	ldr	r2, [pc, #196]	@ (8000dbc <USART_SetBaudRate+0xd8>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d003      	beq.n	8000d02 <USART_SetBaudRate+0x1e>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a30      	ldr	r2, [pc, #192]	@ (8000dc0 <USART_SetBaudRate+0xdc>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d103      	bne.n	8000d0a <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value(); //TODO
 8000d02:	f7ff fe39 	bl	8000978 <RCC_GetPCLK2Value>
 8000d06:	61f8      	str	r0, [r7, #28]
 8000d08:	e002      	b.n	8000d10 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000d0a:	f7ff fddd 	bl	80008c8 <RCC_GetPCLK1Value>
 8000d0e:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	68db      	ldr	r3, [r3, #12]
 8000d14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d00b      	beq.n	8000d34 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	4413      	add	r3, r2
 8000d24:	009a      	lsls	r2, r3, #2
 8000d26:	441a      	add	r2, r3
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d30:	61bb      	str	r3, [r7, #24]
 8000d32:	e00a      	b.n	8000d4a <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000d34:	69fa      	ldr	r2, [r7, #28]
 8000d36:	4613      	mov	r3, r2
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	4413      	add	r3, r2
 8000d3c:	009a      	lsls	r2, r3, #2
 8000d3e:	441a      	add	r2, r3
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d48:	61bb      	str	r3, [r7, #24]

  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	4a1d      	ldr	r2, [pc, #116]	@ (8000dc4 <USART_SetBaudRate+0xe0>)
 8000d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d52:	095b      	lsrs	r3, r3, #5
 8000d54:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	011b      	lsls	r3, r3, #4
 8000d5a:	693a      	ldr	r2, [r7, #16]
 8000d5c:	4313      	orrs	r3, r2
 8000d5e:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	2264      	movs	r2, #100	@ 0x64
 8000d64:	fb02 f303 	mul.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	1ad3      	subs	r3, r2, r3
 8000d6c:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d00a      	beq.n	8000d90 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	00db      	lsls	r3, r3, #3
 8000d7e:	3332      	adds	r3, #50	@ 0x32
 8000d80:	4a10      	ldr	r2, [pc, #64]	@ (8000dc4 <USART_SetBaudRate+0xe0>)
 8000d82:	fba2 2303 	umull	r2, r3, r2, r3
 8000d86:	095b      	lsrs	r3, r3, #5
 8000d88:	f003 0307 	and.w	r3, r3, #7
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e009      	b.n	8000da4 <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	011b      	lsls	r3, r3, #4
 8000d94:	3332      	adds	r3, #50	@ 0x32
 8000d96:	4a0b      	ldr	r2, [pc, #44]	@ (8000dc4 <USART_SetBaudRate+0xe0>)
 8000d98:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9c:	095b      	lsrs	r3, r3, #5
 8000d9e:	f003 030f 	and.w	r3, r3, #15
 8000da2:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	609a      	str	r2, [r3, #8]
}
 8000db2:	bf00      	nop
 8000db4:	3720      	adds	r7, #32
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40011000 	.word	0x40011000
 8000dc0:	40011400 	.word	0x40011400
 8000dc4:	51eb851f 	.word	0x51eb851f

08000dc8 <USART_GetFlagStatus>:



uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	460b      	mov	r3, r1
 8000dd2:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx->SR & StatusFlagName)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681a      	ldr	r2, [r3, #0]
 8000dd8:	78fb      	ldrb	r3, [r7, #3]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <USART_GetFlagStatus+0x1c>
	{
		return FLAG_SET;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e000      	b.n	8000de6 <USART_GetFlagStatus+0x1e>

	}
	return FLAG_RESET;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
	...

08000df4 <__libc_init_array>:
 8000df4:	b570      	push	{r4, r5, r6, lr}
 8000df6:	4d0d      	ldr	r5, [pc, #52]	@ (8000e2c <__libc_init_array+0x38>)
 8000df8:	4c0d      	ldr	r4, [pc, #52]	@ (8000e30 <__libc_init_array+0x3c>)
 8000dfa:	1b64      	subs	r4, r4, r5
 8000dfc:	10a4      	asrs	r4, r4, #2
 8000dfe:	2600      	movs	r6, #0
 8000e00:	42a6      	cmp	r6, r4
 8000e02:	d109      	bne.n	8000e18 <__libc_init_array+0x24>
 8000e04:	4d0b      	ldr	r5, [pc, #44]	@ (8000e34 <__libc_init_array+0x40>)
 8000e06:	4c0c      	ldr	r4, [pc, #48]	@ (8000e38 <__libc_init_array+0x44>)
 8000e08:	f000 f818 	bl	8000e3c <_init>
 8000e0c:	1b64      	subs	r4, r4, r5
 8000e0e:	10a4      	asrs	r4, r4, #2
 8000e10:	2600      	movs	r6, #0
 8000e12:	42a6      	cmp	r6, r4
 8000e14:	d105      	bne.n	8000e22 <__libc_init_array+0x2e>
 8000e16:	bd70      	pop	{r4, r5, r6, pc}
 8000e18:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e1c:	4798      	blx	r3
 8000e1e:	3601      	adds	r6, #1
 8000e20:	e7ee      	b.n	8000e00 <__libc_init_array+0xc>
 8000e22:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e26:	4798      	blx	r3
 8000e28:	3601      	adds	r6, #1
 8000e2a:	e7f2      	b.n	8000e12 <__libc_init_array+0x1e>
 8000e2c:	08000e5c 	.word	0x08000e5c
 8000e30:	08000e5c 	.word	0x08000e5c
 8000e34:	08000e5c 	.word	0x08000e5c
 8000e38:	08000e60 	.word	0x08000e60

08000e3c <_init>:
 8000e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e3e:	bf00      	nop
 8000e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e42:	bc08      	pop	{r3}
 8000e44:	469e      	mov	lr, r3
 8000e46:	4770      	bx	lr

08000e48 <_fini>:
 8000e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e4a:	bf00      	nop
 8000e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000e4e:	bc08      	pop	{r3}
 8000e50:	469e      	mov	lr, r3
 8000e52:	4770      	bx	lr
