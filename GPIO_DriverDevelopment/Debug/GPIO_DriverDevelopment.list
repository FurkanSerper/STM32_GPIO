
GPIO_DriverDevelopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000974  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000afc  08000afc  00001afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b08  08000b08  00001b18  2**0
                  CONTENTS
  4 .ARM          00000008  08000b08  08000b08  00001b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b10  08000b18  00001b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b10  08000b10  00001b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b14  08000b14  00001b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001b18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00001b18  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00002000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00002000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00001b18  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001178  00000000  00000000  00001b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000414  00000000  00000000  00002cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  000030d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000dc  00000000  00000000  00003210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000253c  00000000  00000000  000032ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b2e  00000000  00000000  00005828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009963  00000000  00000000  00007356  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00010cb9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000430  00000000  00000000  00010cfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  0001112c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000000 	.word	0x20000000
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000ae4 	.word	0x08000ae4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000004 	.word	0x20000004
 80001c4:	08000ae4 	.word	0x08000ae4

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <SPI2_GPIOInits>:
*/
#include "stm32f407xx.h"
#include "string.h"

void SPI2_GPIOInits(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80001de:	4b14      	ldr	r3, [pc, #80]	@ (8000230 <SPI2_GPIOInits+0x58>)
 80001e0:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80001e2:	2302      	movs	r3, #2
 80001e4:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80001e6:	2305      	movs	r3, #5
 80001e8:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 80001ea:	2300      	movs	r3, #0
 80001ec:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 80001ee:	2300      	movs	r3, #0
 80001f0:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = 	GPIO_SPEED_FAST;
 80001f2:	2302      	movs	r3, #2
 80001f4:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80001f6:	230d      	movs	r3, #13
 80001f8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80001fa:	1d3b      	adds	r3, r7, #4
 80001fc:	4618      	mov	r0, r3
 80001fe:	f000 f971 	bl	80004e4 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000202:	230f      	movs	r3, #15
 8000204:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4618      	mov	r0, r3
 800020a:	f000 f96b 	bl	80004e4 <GPIO_Init>

	//MISO   This par can be disable as we are only sending
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 800020e:	230e      	movs	r3, #14
 8000210:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000212:	1d3b      	adds	r3, r7, #4
 8000214:	4618      	mov	r0, r3
 8000216:	f000 f965 	bl	80004e4 <GPIO_Init>

	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800021a:	230c      	movs	r3, #12
 800021c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins); // Clock Peripheral is already inside the GPIO_Init()
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4618      	mov	r0, r3
 8000222:	f000 f95f 	bl	80004e4 <GPIO_Init>

}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}
 800022e:	bf00      	nop
 8000230:	40020400 	.word	0x40020400

08000234 <SPI2_Inits>:

void 	SPI2_Inits(void)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 800023a:	4b0c      	ldr	r3, [pc, #48]	@ (800026c <SPI2_Inits+0x38>)
 800023c:	607b      	str	r3, [r7, #4]

	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800023e:	2301      	movs	r3, #1
 8000240:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000242:	2301      	movs	r3, #1
 8000244:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;  //generates sclk of 8MHz
 8000246:	2300      	movs	r3, #0
 8000248:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 800024a:	2300      	movs	r3, #0
 800024c:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 800024e:	2300      	movs	r3, #0
 8000250:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000252:	2300      	movs	r3, #0
 8000254:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; // Software slave management ena le for NSS pin
 8000256:	2301      	movs	r3, #1
 8000258:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle); // Clock Peripheral is already inside the SPI_Init()
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 fb51 	bl	8000904 <SPI_Init>


}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40003800 	.word	0x40003800

08000270 <main>:

int main(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0

	char user_data[] = "Hello World";
 8000276:	4a10      	ldr	r2, [pc, #64]	@ (80002b8 <main+0x48>)
 8000278:	1d3b      	adds	r3, r7, #4
 800027a:	ca07      	ldmia	r2, {r0, r1, r2}
 800027c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//This function is used to initialize the GPIO pins to behave as SPI2 Pins
	SPI2_GPIOInits();
 8000280:	f7ff ffaa 	bl	80001d8 <SPI2_GPIOInits>

	// This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000284:	f7ff ffd6 	bl	8000234 <SPI2_Inits>

	//This makes NSS signal internally high and avoids MODF Error
	SPI_SSIConfig(SPI2, ENABLE);
 8000288:	2101      	movs	r1, #1
 800028a:	480c      	ldr	r0, [pc, #48]	@ (80002bc <main+0x4c>)
 800028c:	f000 fbe6 	bl	8000a5c <SPI_SSIConfig>

	//Enable the SPI2 peripherals
	SPI_PeriClockControl(SPI2, ENABLE);
 8000290:	2101      	movs	r1, #1
 8000292:	480a      	ldr	r0, [pc, #40]	@ (80002bc <main+0x4c>)
 8000294:	f000 fac6 	bl	8000824 <SPI_PeriClockControl>

	SPI_SendData(SPI2, (uint8_t *)user_data, strlen(user_data));
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	4618      	mov	r0, r3
 800029c:	f7ff ff94 	bl	80001c8 <strlen>
 80002a0:	4602      	mov	r2, r0
 80002a2:	1d3b      	adds	r3, r7, #4
 80002a4:	4619      	mov	r1, r3
 80002a6:	4805      	ldr	r0, [pc, #20]	@ (80002bc <main+0x4c>)
 80002a8:	f000 fba1 	bl	80009ee <SPI_SendData>

	return 0;
 80002ac:	2300      	movs	r3, #0
}
 80002ae:	4618      	mov	r0, r3
 80002b0:	3710      	adds	r7, #16
 80002b2:	46bd      	mov	sp, r7
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	08000afc 	.word	0x08000afc
 80002bc:	40003800 	.word	0x40003800

080002c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	@ (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480c      	ldr	r0, [pc, #48]	@ (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002ca:	490d      	ldr	r1, [pc, #52]	@ (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002cc:	4a0d      	ldr	r2, [pc, #52]	@ (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0a      	ldr	r2, [pc, #40]	@ (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e0:	4c0a      	ldr	r4, [pc, #40]	@ (800030c <LoopForever+0x16>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ee:	f000 fbd5 	bl	8000a9c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f2:	f7ff ffbd 	bl	8000270 <main>

080002f6 <LoopForever>:

LoopForever:
  b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000304:	08000b18 	.word	0x08000b18
  ldr r2, =_sbss
 8000308:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800030c:	2000001c 	.word	0x2000001c

08000310 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	460b      	mov	r3, r1
 800031e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000320:	78fb      	ldrb	r3, [r7, #3]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d162      	bne.n	80003ec <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a64      	ldr	r2, [pc, #400]	@ (80004bc <GPIO_PeriClockControl+0x1a8>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800032e:	4b64      	ldr	r3, [pc, #400]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000332:	4a63      	ldr	r2, [pc, #396]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOI_PCLK_DIS();

		}

	}
}
 800033a:	e0b9      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a61      	ldr	r2, [pc, #388]	@ (80004c4 <GPIO_PeriClockControl+0x1b0>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000344:	4b5e      	ldr	r3, [pc, #376]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000348:	4a5d      	ldr	r2, [pc, #372]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 800034a:	f043 0302 	orr.w	r3, r3, #2
 800034e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000350:	e0ae      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a5c      	ldr	r2, [pc, #368]	@ (80004c8 <GPIO_PeriClockControl+0x1b4>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800035a:	4b59      	ldr	r3, [pc, #356]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035e:	4a58      	ldr	r2, [pc, #352]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000360:	f043 0304 	orr.w	r3, r3, #4
 8000364:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000366:	e0a3      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a58      	ldr	r2, [pc, #352]	@ (80004cc <GPIO_PeriClockControl+0x1b8>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000370:	4b53      	ldr	r3, [pc, #332]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000374:	4a52      	ldr	r2, [pc, #328]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800037c:	e098      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a53      	ldr	r2, [pc, #332]	@ (80004d0 <GPIO_PeriClockControl+0x1bc>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 8000386:	4b4e      	ldr	r3, [pc, #312]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038a:	4a4d      	ldr	r2, [pc, #308]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 800038c:	f043 0310 	orr.w	r3, r3, #16
 8000390:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000392:	e08d      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a4f      	ldr	r2, [pc, #316]	@ (80004d4 <GPIO_PeriClockControl+0x1c0>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800039c:	4b48      	ldr	r3, [pc, #288]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a0:	4a47      	ldr	r2, [pc, #284]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a8:	e082      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a4a      	ldr	r2, [pc, #296]	@ (80004d8 <GPIO_PeriClockControl+0x1c4>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003b2:	4b43      	ldr	r3, [pc, #268]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b6:	4a42      	ldr	r2, [pc, #264]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 80003b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003be:	e077      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a46      	ldr	r2, [pc, #280]	@ (80004dc <GPIO_PeriClockControl+0x1c8>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003c8:	4b3d      	ldr	r3, [pc, #244]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a3c      	ldr	r2, [pc, #240]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 80003ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d4:	e06c      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a41      	ldr	r2, [pc, #260]	@ (80004e0 <GPIO_PeriClockControl+0x1cc>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d168      	bne.n	80004b0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 80003de:	4b38      	ldr	r3, [pc, #224]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e2:	4a37      	ldr	r2, [pc, #220]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 80003e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80003e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ea:	e061      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a33      	ldr	r2, [pc, #204]	@ (80004bc <GPIO_PeriClockControl+0x1a8>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DIS();
 80003f4:	4b32      	ldr	r3, [pc, #200]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f8:	4a31      	ldr	r2, [pc, #196]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 80003fa:	f023 0301 	bic.w	r3, r3, #1
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000400:	e056      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a2f      	ldr	r2, [pc, #188]	@ (80004c4 <GPIO_PeriClockControl+0x1b0>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DIS();
 800040a:	4b2d      	ldr	r3, [pc, #180]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040e:	4a2c      	ldr	r2, [pc, #176]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000410:	f023 0302 	bic.w	r3, r3, #2
 8000414:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000416:	e04b      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a2b      	ldr	r2, [pc, #172]	@ (80004c8 <GPIO_PeriClockControl+0x1b4>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DIS();
 8000420:	4b27      	ldr	r3, [pc, #156]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000424:	4a26      	ldr	r2, [pc, #152]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000426:	f023 0304 	bic.w	r3, r3, #4
 800042a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042c:	e040      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a26      	ldr	r2, [pc, #152]	@ (80004cc <GPIO_PeriClockControl+0x1b8>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DIS();
 8000436:	4b22      	ldr	r3, [pc, #136]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043a:	4a21      	ldr	r2, [pc, #132]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 800043c:	f023 0308 	bic.w	r3, r3, #8
 8000440:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000442:	e035      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a22      	ldr	r2, [pc, #136]	@ (80004d0 <GPIO_PeriClockControl+0x1bc>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DIS();
 800044c:	4b1c      	ldr	r3, [pc, #112]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000450:	4a1b      	ldr	r2, [pc, #108]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000452:	f023 0310 	bic.w	r3, r3, #16
 8000456:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000458:	e02a      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a1d      	ldr	r2, [pc, #116]	@ (80004d4 <GPIO_PeriClockControl+0x1c0>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DIS();
 8000462:	4b17      	ldr	r3, [pc, #92]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000466:	4a16      	ldr	r2, [pc, #88]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000468:	f023 0320 	bic.w	r3, r3, #32
 800046c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046e:	e01f      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a19      	ldr	r2, [pc, #100]	@ (80004d8 <GPIO_PeriClockControl+0x1c4>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DIS();
 8000478:	4b11      	ldr	r3, [pc, #68]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047c:	4a10      	ldr	r2, [pc, #64]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 800047e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8000482:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000484:	e014      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a14      	ldr	r2, [pc, #80]	@ (80004dc <GPIO_PeriClockControl+0x1c8>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DIS();
 800048e:	4b0c      	ldr	r3, [pc, #48]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000492:	4a0b      	ldr	r2, [pc, #44]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 8000494:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000498:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049a:	e009      	b.n	80004b0 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a10      	ldr	r2, [pc, #64]	@ (80004e0 <GPIO_PeriClockControl+0x1cc>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d105      	bne.n	80004b0 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DIS();
 80004a4:	4b06      	ldr	r3, [pc, #24]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a8:	4a05      	ldr	r2, [pc, #20]	@ (80004c0 <GPIO_PeriClockControl+0x1ac>)
 80004aa:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80004ae:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ba:	4770      	bx	lr
 80004bc:	40020000 	.word	0x40020000
 80004c0:	40023800 	.word	0x40023800
 80004c4:	40020400 	.word	0x40020400
 80004c8:	40020800 	.word	0x40020800
 80004cc:	40020c00 	.word	0x40020c00
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40021400 	.word	0x40021400
 80004d8:	40021800 	.word	0x40021800
 80004dc:	40021c00 	.word	0x40021c00
 80004e0:	40022000 	.word	0x40022000

080004e4 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b086      	sub	sp, #24
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]

	// Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	2101      	movs	r1, #1
 80004f6:	4618      	mov	r0, r3
 80004f8:	f7ff ff0c 	bl	8000314 <GPIO_PeriClockControl>
	//1. Configure Mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	795b      	ldrb	r3, [r3, #5]
 8000500:	2b03      	cmp	r3, #3
 8000502:	d81f      	bhi.n	8000544 <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	795b      	ldrb	r3, [r3, #5]
 8000508:	461a      	mov	r2, r3
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	791b      	ldrb	r3, [r3, #4]
 800050e:	005b      	lsls	r3, r3, #1
 8000510:	fa02 f303 	lsl.w	r3, r2, r3
 8000514:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	791b      	ldrb	r3, [r3, #4]
 8000520:	4619      	mov	r1, r3
 8000522:	2303      	movs	r3, #3
 8000524:	408b      	lsls	r3, r1
 8000526:	43db      	mvns	r3, r3
 8000528:	4619      	mov	r1, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	400a      	ands	r2, r1
 8000530:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	6819      	ldr	r1, [r3, #0]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	430a      	orrs	r2, r1
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	e0ca      	b.n	80006da <GPIO_Init+0x1f6>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	2b04      	cmp	r3, #4
 800054a:	d117      	bne.n	800057c <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054c:	4b4a      	ldr	r3, [pc, #296]	@ (8000678 <GPIO_Init+0x194>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	7912      	ldrb	r2, [r2, #4]
 8000554:	4611      	mov	r1, r2
 8000556:	2201      	movs	r2, #1
 8000558:	408a      	lsls	r2, r1
 800055a:	4611      	mov	r1, r2
 800055c:	4a46      	ldr	r2, [pc, #280]	@ (8000678 <GPIO_Init+0x194>)
 800055e:	430b      	orrs	r3, r1
 8000560:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000562:	4b45      	ldr	r3, [pc, #276]	@ (8000678 <GPIO_Init+0x194>)
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	7912      	ldrb	r2, [r2, #4]
 800056a:	4611      	mov	r1, r2
 800056c:	2201      	movs	r2, #1
 800056e:	408a      	lsls	r2, r1
 8000570:	43d2      	mvns	r2, r2
 8000572:	4611      	mov	r1, r2
 8000574:	4a40      	ldr	r2, [pc, #256]	@ (8000678 <GPIO_Init+0x194>)
 8000576:	400b      	ands	r3, r1
 8000578:	6093      	str	r3, [r2, #8]
 800057a:	e035      	b.n	80005e8 <GPIO_Init+0x104>


		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	2b05      	cmp	r3, #5
 8000582:	d117      	bne.n	80005b4 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000584:	4b3c      	ldr	r3, [pc, #240]	@ (8000678 <GPIO_Init+0x194>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	7912      	ldrb	r2, [r2, #4]
 800058c:	4611      	mov	r1, r2
 800058e:	2201      	movs	r2, #1
 8000590:	408a      	lsls	r2, r1
 8000592:	4611      	mov	r1, r2
 8000594:	4a38      	ldr	r2, [pc, #224]	@ (8000678 <GPIO_Init+0x194>)
 8000596:	430b      	orrs	r3, r1
 8000598:	6093      	str	r3, [r2, #8]

			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059a:	4b37      	ldr	r3, [pc, #220]	@ (8000678 <GPIO_Init+0x194>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	43d2      	mvns	r2, r2
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a32      	ldr	r2, [pc, #200]	@ (8000678 <GPIO_Init+0x194>)
 80005ae:	400b      	ands	r3, r1
 80005b0:	60d3      	str	r3, [r2, #12]
 80005b2:	e019      	b.n	80005e8 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	2b06      	cmp	r3, #6
 80005ba:	d115      	bne.n	80005e8 <GPIO_Init+0x104>
		{
			//1. Configure both the FTSR and RTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005bc:	4b2e      	ldr	r3, [pc, #184]	@ (8000678 <GPIO_Init+0x194>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a2a      	ldr	r2, [pc, #168]	@ (8000678 <GPIO_Init+0x194>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d2:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <GPIO_Init+0x194>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	7912      	ldrb	r2, [r2, #4]
 80005da:	4611      	mov	r1, r2
 80005dc:	2201      	movs	r2, #1
 80005de:	408a      	lsls	r2, r1
 80005e0:	4611      	mov	r1, r2
 80005e2:	4a25      	ldr	r2, [pc, #148]	@ (8000678 <GPIO_Init+0x194>)
 80005e4:	430b      	orrs	r3, r1
 80005e6:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	791b      	ldrb	r3, [r3, #4]
 80005ec:	089b      	lsrs	r3, r3, #2
 80005ee:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	791b      	ldrb	r3, [r3, #4]
 80005f4:	f003 0303 	and.w	r3, r3, #3
 80005f8:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a1f      	ldr	r2, [pc, #124]	@ (800067c <GPIO_Init+0x198>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d04d      	beq.n	80006a0 <GPIO_Init+0x1bc>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a1d      	ldr	r2, [pc, #116]	@ (8000680 <GPIO_Init+0x19c>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d032      	beq.n	8000674 <GPIO_Init+0x190>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a1c      	ldr	r2, [pc, #112]	@ (8000684 <GPIO_Init+0x1a0>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d02b      	beq.n	8000670 <GPIO_Init+0x18c>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a1a      	ldr	r2, [pc, #104]	@ (8000688 <GPIO_Init+0x1a4>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d024      	beq.n	800066c <GPIO_Init+0x188>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a19      	ldr	r2, [pc, #100]	@ (800068c <GPIO_Init+0x1a8>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d01d      	beq.n	8000668 <GPIO_Init+0x184>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a17      	ldr	r2, [pc, #92]	@ (8000690 <GPIO_Init+0x1ac>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d016      	beq.n	8000664 <GPIO_Init+0x180>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a16      	ldr	r2, [pc, #88]	@ (8000694 <GPIO_Init+0x1b0>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d00f      	beq.n	8000660 <GPIO_Init+0x17c>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a14      	ldr	r2, [pc, #80]	@ (8000698 <GPIO_Init+0x1b4>)
 8000646:	4293      	cmp	r3, r2
 8000648:	d008      	beq.n	800065c <GPIO_Init+0x178>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	4a13      	ldr	r2, [pc, #76]	@ (800069c <GPIO_Init+0x1b8>)
 8000650:	4293      	cmp	r3, r2
 8000652:	d101      	bne.n	8000658 <GPIO_Init+0x174>
 8000654:	2308      	movs	r3, #8
 8000656:	e024      	b.n	80006a2 <GPIO_Init+0x1be>
 8000658:	2300      	movs	r3, #0
 800065a:	e022      	b.n	80006a2 <GPIO_Init+0x1be>
 800065c:	2307      	movs	r3, #7
 800065e:	e020      	b.n	80006a2 <GPIO_Init+0x1be>
 8000660:	2306      	movs	r3, #6
 8000662:	e01e      	b.n	80006a2 <GPIO_Init+0x1be>
 8000664:	2305      	movs	r3, #5
 8000666:	e01c      	b.n	80006a2 <GPIO_Init+0x1be>
 8000668:	2304      	movs	r3, #4
 800066a:	e01a      	b.n	80006a2 <GPIO_Init+0x1be>
 800066c:	2303      	movs	r3, #3
 800066e:	e018      	b.n	80006a2 <GPIO_Init+0x1be>
 8000670:	2302      	movs	r3, #2
 8000672:	e016      	b.n	80006a2 <GPIO_Init+0x1be>
 8000674:	2301      	movs	r3, #1
 8000676:	e014      	b.n	80006a2 <GPIO_Init+0x1be>
 8000678:	40013c00 	.word	0x40013c00
 800067c:	40020000 	.word	0x40020000
 8000680:	40020400 	.word	0x40020400
 8000684:	40020800 	.word	0x40020800
 8000688:	40020c00 	.word	0x40020c00
 800068c:	40021000 	.word	0x40021000
 8000690:	40021400 	.word	0x40021400
 8000694:	40021800 	.word	0x40021800
 8000698:	40021c00 	.word	0x40021c00
 800069c:	40022000 	.word	0x40022000
 80006a0:	2300      	movs	r3, #0
 80006a2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006a4:	4b5c      	ldr	r3, [pc, #368]	@ (8000818 <GPIO_Init+0x334>)
 80006a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80006a8:	4a5b      	ldr	r2, [pc, #364]	@ (8000818 <GPIO_Init+0x334>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006ae:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 80006b0:	7c7a      	ldrb	r2, [r7, #17]
 80006b2:	7cbb      	ldrb	r3, [r7, #18]
 80006b4:	009b      	lsls	r3, r3, #2
 80006b6:	fa02 f103 	lsl.w	r1, r2, r3
 80006ba:	4a58      	ldr	r2, [pc, #352]	@ (800081c <GPIO_Init+0x338>)
 80006bc:	7cfb      	ldrb	r3, [r7, #19]
 80006be:	3302      	adds	r3, #2
 80006c0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR (interrupt Mask Register)
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006c4:	4b56      	ldr	r3, [pc, #344]	@ (8000820 <GPIO_Init+0x33c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	687a      	ldr	r2, [r7, #4]
 80006ca:	7912      	ldrb	r2, [r2, #4]
 80006cc:	4611      	mov	r1, r2
 80006ce:	2201      	movs	r2, #1
 80006d0:	408a      	lsls	r2, r1
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a52      	ldr	r2, [pc, #328]	@ (8000820 <GPIO_Init+0x33c>)
 80006d6:	430b      	orrs	r3, r1
 80006d8:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	799b      	ldrb	r3, [r3, #6]
 80006e2:	461a      	mov	r2, r3
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	791b      	ldrb	r3, [r3, #4]
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	fa02 f303 	lsl.w	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	689a      	ldr	r2, [r3, #8]
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	4619      	mov	r1, r3
 80006fc:	2303      	movs	r3, #3
 80006fe:	408b      	lsls	r3, r1
 8000700:	43db      	mvns	r3, r3
 8000702:	4619      	mov	r1, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	400a      	ands	r2, r1
 800070a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	6899      	ldr	r1, [r3, #8]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	697a      	ldr	r2, [r7, #20]
 8000718:	430a      	orrs	r2, r1
 800071a:	609a      	str	r2, [r3, #8]
	temp = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	617b      	str	r3, [r7, #20]

	//3. Configure the PuPd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	79db      	ldrb	r3, [r3, #7]
 8000724:	461a      	mov	r2, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	791b      	ldrb	r3, [r3, #4]
 800072a:	005b      	lsls	r3, r3, #1
 800072c:	fa02 f303 	lsl.w	r3, r2, r3
 8000730:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	68da      	ldr	r2, [r3, #12]
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	791b      	ldrb	r3, [r3, #4]
 800073c:	4619      	mov	r1, r3
 800073e:	2303      	movs	r3, #3
 8000740:	408b      	lsls	r3, r1
 8000742:	43db      	mvns	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	400a      	ands	r2, r1
 800074c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68d9      	ldr	r1, [r3, #12]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	430a      	orrs	r2, r1
 800075c:	60da      	str	r2, [r3, #12]
	temp = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	617b      	str	r3, [r7, #20]

	//4. Configure the OPTYPE
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	7a1b      	ldrb	r3, [r3, #8]
 8000766:	461a      	mov	r2, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	791b      	ldrb	r3, [r3, #4]
 800076c:	fa02 f303 	lsl.w	r3, r2, r3
 8000770:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	685a      	ldr	r2, [r3, #4]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	791b      	ldrb	r3, [r3, #4]
 800077c:	4619      	mov	r1, r3
 800077e:	2301      	movs	r3, #1
 8000780:	408b      	lsls	r3, r1
 8000782:	43db      	mvns	r3, r3
 8000784:	4619      	mov	r1, r3
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	400a      	ands	r2, r1
 800078c:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	6859      	ldr	r1, [r3, #4]
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	697a      	ldr	r2, [r7, #20]
 800079a:	430a      	orrs	r2, r1
 800079c:	605a      	str	r2, [r3, #4]
	temp = 0;
 800079e:	2300      	movs	r3, #0
 80007a0:	617b      	str	r3, [r7, #20]
	//5. Configure the Alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	795b      	ldrb	r3, [r3, #5]
 80007a6:	2b02      	cmp	r3, #2
 80007a8:	d132      	bne.n	8000810 <GPIO_Init+0x32c>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	791b      	ldrb	r3, [r3, #4]
 80007ae:	08db      	lsrs	r3, r3, #3
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	791b      	ldrb	r3, [r3, #4]
 80007b8:	f003 0307 	and.w	r3, r3, #7
 80007bc:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 *temp2));
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	68fa      	ldr	r2, [r7, #12]
 80007c4:	3208      	adds	r2, #8
 80007c6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	009b      	lsls	r3, r3, #2
 80007ce:	210f      	movs	r1, #15
 80007d0:	fa01 f303 	lsl.w	r3, r1, r3
 80007d4:	43db      	mvns	r3, r3
 80007d6:	4619      	mov	r1, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4011      	ands	r1, r2
 80007de:	68fa      	ldr	r2, [r7, #12]
 80007e0:	3208      	adds	r2, #8
 80007e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	68fa      	ldr	r2, [r7, #12]
 80007ec:	3208      	adds	r2, #8
 80007ee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	7a5b      	ldrb	r3, [r3, #9]
 80007f6:	4619      	mov	r1, r3
 80007f8:	68bb      	ldr	r3, [r7, #8]
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000800:	4619      	mov	r1, r3
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	4311      	orrs	r1, r2
 8000808:	68fa      	ldr	r2, [r7, #12]
 800080a:	3208      	adds	r2, #8
 800080c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000810:	bf00      	nop
 8000812:	3718      	adds	r7, #24
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40013800 	.word	0x40013800
 8000820:	40013c00 	.word	0x40013c00

08000824 <SPI_PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000830:	78fb      	ldrb	r3, [r7, #3]
 8000832:	2b01      	cmp	r3, #1
 8000834:	d12b      	bne.n	800088e <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4a2d      	ldr	r2, [pc, #180]	@ (80008f0 <SPI_PeriClockControl+0xcc>)
 800083a:	4293      	cmp	r3, r2
 800083c:	d106      	bne.n	800084c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800083e:	4b2d      	ldr	r3, [pc, #180]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000842:	4a2c      	ldr	r2, [pc, #176]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 8000844:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000848:	6453      	str	r3, [r2, #68]	@ 0x44
		}else if(pSPIx == SPI4)
		{
			SPI4_PCLK_DIS();
		}
	}
}
 800084a:	e04b      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2)
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	4a2a      	ldr	r2, [pc, #168]	@ (80008f8 <SPI_PeriClockControl+0xd4>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d106      	bne.n	8000862 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000854:	4b27      	ldr	r3, [pc, #156]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 8000856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000858:	4a26      	ldr	r2, [pc, #152]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800085e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000860:	e040      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4a25      	ldr	r2, [pc, #148]	@ (80008fc <SPI_PeriClockControl+0xd8>)
 8000866:	4293      	cmp	r3, r2
 8000868:	d106      	bne.n	8000878 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800086a:	4b22      	ldr	r3, [pc, #136]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086e:	4a21      	ldr	r2, [pc, #132]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 8000870:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000874:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000876:	e035      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	4a21      	ldr	r2, [pc, #132]	@ (8000900 <SPI_PeriClockControl+0xdc>)
 800087c:	4293      	cmp	r3, r2
 800087e:	d131      	bne.n	80008e4 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000880:	4b1c      	ldr	r3, [pc, #112]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 8000882:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000884:	4a1b      	ldr	r2, [pc, #108]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 8000886:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800088a:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800088c:	e02a      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	4a17      	ldr	r2, [pc, #92]	@ (80008f0 <SPI_PeriClockControl+0xcc>)
 8000892:	4293      	cmp	r3, r2
 8000894:	d106      	bne.n	80008a4 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DIS();
 8000896:	4b17      	ldr	r3, [pc, #92]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 8000898:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089a:	4a16      	ldr	r2, [pc, #88]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 800089c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008a0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008a2:	e01f      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a14      	ldr	r2, [pc, #80]	@ (80008f8 <SPI_PeriClockControl+0xd4>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d106      	bne.n	80008ba <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DIS();
 80008ac:	4b11      	ldr	r3, [pc, #68]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 80008ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b0:	4a10      	ldr	r2, [pc, #64]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 80008b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008b6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008b8:	e014      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4a0f      	ldr	r2, [pc, #60]	@ (80008fc <SPI_PeriClockControl+0xd8>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d106      	bne.n	80008d0 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DIS();
 80008c2:	4b0c      	ldr	r3, [pc, #48]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 80008c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008c6:	4a0b      	ldr	r2, [pc, #44]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 80008c8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008cc:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008ce:	e009      	b.n	80008e4 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4a0b      	ldr	r2, [pc, #44]	@ (8000900 <SPI_PeriClockControl+0xdc>)
 80008d4:	4293      	cmp	r3, r2
 80008d6:	d105      	bne.n	80008e4 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DIS();
 80008d8:	4b06      	ldr	r3, [pc, #24]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 80008da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008dc:	4a05      	ldr	r2, [pc, #20]	@ (80008f4 <SPI_PeriClockControl+0xd0>)
 80008de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80008e2:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	40013000 	.word	0x40013000
 80008f4:	40023800 	.word	0x40023800
 80008f8:	40003800 	.word	0x40003800
 80008fc:	40003c00 	.word	0x40003c00
 8000900:	40013400 	.word	0x40013400

08000904 <SPI_Init>:

/*
 * Init and De-init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

	//Peripheral Clock Enable
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	2101      	movs	r1, #1
 8000912:	4618      	mov	r0, r3
 8000914:	f7ff ff86 	bl	8000824 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register
	uint32_t tempreg = 0;
 8000918:	2300      	movs	r3, #0
 800091a:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	791b      	ldrb	r3, [r3, #4]
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	68fa      	ldr	r2, [r7, #12]
 8000924:	4313      	orrs	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]

	//2. configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	795b      	ldrb	r3, [r3, #5]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d104      	bne.n	800093a <SPI_Init+0x36>
	{
		//BIDI mode should be clread (set 0)
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	e014      	b.n	8000964 <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	795b      	ldrb	r3, [r3, #5]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d104      	bne.n	800094c <SPI_Init+0x48>
	{
		//BIDI mode should be set (set 1)
		tempreg |= (1 << SPI_CR1_BIDIMODE);
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000948:	60fb      	str	r3, [r7, #12]
 800094a:	e00b      	b.n	8000964 <SPI_Init+0x60>

	}else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	795b      	ldrb	r3, [r3, #5]
 8000950:	2b03      	cmp	r3, #3
 8000952:	d107      	bne.n	8000964 <SPI_Init+0x60>
	{
		//BIDI mode should be clread (set 0)
		tempreg &= ~(1 << SPI_CR1_BIDIMODE);
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800095a:	60fb      	str	r3, [r7, #12]

		// RXONLY bit must be set
		tempreg |= (1 << SPI_CR1_RXONLY);
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000962:	60fb      	str	r3, [r7, #12]

	}

	if(pSPIHandle->SPIConfig.SPI_SSM == SPI_SSM_EN)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	7a9b      	ldrb	r3, [r3, #10]
 8000968:	2b01      	cmp	r3, #1
 800096a:	d104      	bne.n	8000976 <SPI_Init+0x72>
	{
		tempreg |= (1 << SPI_CR1_SSM);
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	e007      	b.n	8000986 <SPI_Init+0x82>
	}else if(pSPIHandle->SPIConfig.SPI_SSM == SPI_SSM_DIS)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	7a9b      	ldrb	r3, [r3, #10]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d103      	bne.n	8000986 <SPI_Init+0x82>
	{
		tempreg &= ~(1 << SPI_CR1_SSM);
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8000984:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the SPI Serial Clock Speed (Baud Rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	799b      	ldrb	r3, [r3, #6]
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	4313      	orrs	r3, r2
 8000990:	60fb      	str	r3, [r7, #12]

	// 4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	79db      	ldrb	r3, [r3, #7]
 8000996:	02db      	lsls	r3, r3, #11
 8000998:	68fa      	ldr	r2, [r7, #12]
 800099a:	4313      	orrs	r3, r2
 800099c:	60fb      	str	r3, [r7, #12]

	// 5. Configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	7a1b      	ldrb	r3, [r3, #8]
 80009a2:	005b      	lsls	r3, r3, #1
 80009a4:	68fa      	ldr	r2, [r7, #12]
 80009a6:	4313      	orrs	r3, r2
 80009a8:	60fb      	str	r3, [r7, #12]


	// 6. configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	7a5b      	ldrb	r3, [r3, #9]
 80009ae:	461a      	mov	r2, r3
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	4313      	orrs	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	601a      	str	r2, [r3, #0]

}
 80009be:	bf00      	nop
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}

080009c6 <SPI_GetFlagStatus>:

}


uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 80009c6:	b480      	push	{r7}
 80009c8:	b083      	sub	sp, #12
 80009ca:	af00      	add	r7, sp, #0
 80009cc:	6078      	str	r0, [r7, #4]
 80009ce:	6039      	str	r1, [r7, #0]

	if(pSPIx->SR & FlagName)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689a      	ldr	r2, [r3, #8]
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	4013      	ands	r3, r2
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <SPI_GetFlagStatus+0x1c>

	}
	return FLAG_RESET;
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <SPI_SendData>:

/*
 *  Data send and Receive   (Blocking API)
 */
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 80009ee:	b580      	push	{r7, lr}
 80009f0:	b084      	sub	sp, #16
 80009f2:	af00      	add	r7, sp, #0
 80009f4:	60f8      	str	r0, [r7, #12]
 80009f6:	60b9      	str	r1, [r7, #8]
 80009f8:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80009fa:	e027      	b.n	8000a4c <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 80009fc:	bf00      	nop
 80009fe:	2102      	movs	r1, #2
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f7ff ffe0 	bl	80009c6 <SPI_GetFlagStatus>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d0f8      	beq.n	80009fe <SPI_SendData+0x10>

		//2. Check the DFF bit in CR1
		if((pSPIx->CR1 & (1<<SPI_CR1_DFF)))
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d00e      	beq.n	8000a36 <SPI_SendData+0x48>
		{
			// 16 BIT DFF
			//1. load the data in to the DR
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	881b      	ldrh	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	60da      	str	r2, [r3, #12]
			Len--;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	3b01      	subs	r3, #1
 8000a26:	607b      	str	r3, [r7, #4]
			Len--;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	3b01      	subs	r3, #1
 8000a2c:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a2e:	68bb      	ldr	r3, [r7, #8]
 8000a30:	3301      	adds	r3, #1
 8000a32:	60bb      	str	r3, [r7, #8]
 8000a34:	e00a      	b.n	8000a4c <SPI_SendData+0x5e>
		}else
		{
			// 8 BIT DFF
			//1. load the data in to the DR
			pSPIx->DR = *pTxBuffer;
 8000a36:	68bb      	ldr	r3, [r7, #8]
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	461a      	mov	r2, r3
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	60da      	str	r2, [r3, #12]
			Len--;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3b01      	subs	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a46:	68bb      	ldr	r3, [r7, #8]
 8000a48:	3301      	adds	r3, #1
 8000a4a:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1d4      	bne.n	80009fc <SPI_SendData+0xe>
		}


	}

}
 8000a52:	bf00      	nop
 8000a54:	bf00      	nop
 8000a56:	3710      	adds	r7, #16
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <SPI_SSIConfig>:
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}

SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
 8000a64:	460b      	mov	r3, r1
 8000a66:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a68:	78fb      	ldrb	r3, [r7, #3]
 8000a6a:	2b01      	cmp	r3, #1
 8000a6c:	d106      	bne.n	8000a7c <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	e008      	b.n	8000a8e <SPI_SSIConfig+0x32>

	}else if(EnOrDi == DISABLE)
 8000a7c:	78fb      	ldrb	r3, [r7, #3]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d105      	bne.n	8000a8e <SPI_SSIConfig+0x32>
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	601a      	str	r2, [r3, #0]
	}

}
 8000a8e:	bf00      	nop
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <__libc_init_array>:
 8000a9c:	b570      	push	{r4, r5, r6, lr}
 8000a9e:	4d0d      	ldr	r5, [pc, #52]	@ (8000ad4 <__libc_init_array+0x38>)
 8000aa0:	4c0d      	ldr	r4, [pc, #52]	@ (8000ad8 <__libc_init_array+0x3c>)
 8000aa2:	1b64      	subs	r4, r4, r5
 8000aa4:	10a4      	asrs	r4, r4, #2
 8000aa6:	2600      	movs	r6, #0
 8000aa8:	42a6      	cmp	r6, r4
 8000aaa:	d109      	bne.n	8000ac0 <__libc_init_array+0x24>
 8000aac:	4d0b      	ldr	r5, [pc, #44]	@ (8000adc <__libc_init_array+0x40>)
 8000aae:	4c0c      	ldr	r4, [pc, #48]	@ (8000ae0 <__libc_init_array+0x44>)
 8000ab0:	f000 f818 	bl	8000ae4 <_init>
 8000ab4:	1b64      	subs	r4, r4, r5
 8000ab6:	10a4      	asrs	r4, r4, #2
 8000ab8:	2600      	movs	r6, #0
 8000aba:	42a6      	cmp	r6, r4
 8000abc:	d105      	bne.n	8000aca <__libc_init_array+0x2e>
 8000abe:	bd70      	pop	{r4, r5, r6, pc}
 8000ac0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ac4:	4798      	blx	r3
 8000ac6:	3601      	adds	r6, #1
 8000ac8:	e7ee      	b.n	8000aa8 <__libc_init_array+0xc>
 8000aca:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ace:	4798      	blx	r3
 8000ad0:	3601      	adds	r6, #1
 8000ad2:	e7f2      	b.n	8000aba <__libc_init_array+0x1e>
 8000ad4:	08000b10 	.word	0x08000b10
 8000ad8:	08000b10 	.word	0x08000b10
 8000adc:	08000b10 	.word	0x08000b10
 8000ae0:	08000b14 	.word	0x08000b14

08000ae4 <_init>:
 8000ae4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ae6:	bf00      	nop
 8000ae8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000aea:	bc08      	pop	{r3}
 8000aec:	469e      	mov	lr, r3
 8000aee:	4770      	bx	lr

08000af0 <_fini>:
 8000af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000af2:	bf00      	nop
 8000af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000af6:	bc08      	pop	{r3}
 8000af8:	469e      	mov	lr, r3
 8000afa:	4770      	bx	lr
