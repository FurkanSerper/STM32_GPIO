
GPIO_DriverDevelopment.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000c30  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000db8  08000db8  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000db8  08000db8  00002040  2**0
                  CONTENTS
  4 .ARM          00000008  08000db8  08000db8  00001db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000dc0  08000dc0  00002040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000dc0  08000dc0  00001dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000dc4  08000dc4  00001dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000040  20000000  08000dc8  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002040  2**0
                  CONTENTS
 10 .bss          00000028  20000040  20000040  00002040  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000068  20000068  00002040  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00002040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000013d7  00000000  00000000  00002070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000534  00000000  00000000  00003447  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00003980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000110  00000000  00000000  00003af8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000282a  00000000  00000000  00003c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001ece  00000000  00000000  00006432  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000a131  00000000  00000000  00008300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00012431  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000054c  00000000  00000000  00012474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  000129c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000040 	.word	0x20000040
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000da0 	.word	0x08000da0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000044 	.word	0x20000044
 80001c4:	08000da0 	.word	0x08000da0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <delay>:
//some data
uint8_t some_data[] = "We are testing I2C Master Tx\n";


void delay(void)
{
 80001d8:	b480      	push	{r7}
 80001da:	b083      	sub	sp, #12
 80001dc:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i<500000/2; i++)
 80001de:	2300      	movs	r3, #0
 80001e0:	607b      	str	r3, [r7, #4]
 80001e2:	e002      	b.n	80001ea <delay+0x12>
 80001e4:	687b      	ldr	r3, [r7, #4]
 80001e6:	3301      	adds	r3, #1
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	4a04      	ldr	r2, [pc, #16]	@ (8000200 <delay+0x28>)
 80001ee:	4293      	cmp	r3, r2
 80001f0:	d9f8      	bls.n	80001e4 <delay+0xc>
	{

	}
}
 80001f2:	bf00      	nop
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr
 8000200:	0003d08f 	.word	0x0003d08f

08000204 <I2C1_GPIOInits>:
/*
 * SCL --> PB6
 * SDA --> PB9
 */
void I2C1_GPIOInits(void)
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b084      	sub	sp, #16
 8000208:	af00      	add	r7, sp, #0
	GPIO_Handle_t I2CPins;

	I2CPins.pGPIOx = GPIOB;
 800020a:	4b0d      	ldr	r3, [pc, #52]	@ (8000240 <I2C1_GPIOInits+0x3c>)
 800020c:	607b      	str	r3, [r7, #4]
	I2CPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800020e:	2302      	movs	r3, #2
 8000210:	727b      	strb	r3, [r7, #9]
	I2CPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000212:	2301      	movs	r3, #1
 8000214:	733b      	strb	r3, [r7, #12]
	I2CPins.GPIO_PinConfig.GPIO_PinAltFunMode = 4;
 8000216:	2304      	movs	r3, #4
 8000218:	737b      	strb	r3, [r7, #13]
	I2CPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800021a:	2302      	movs	r3, #2
 800021c:	72bb      	strb	r3, [r7, #10]

	//SCL
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_6;
 800021e:	2306      	movs	r3, #6
 8000220:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 8000222:	1d3b      	adds	r3, r7, #4
 8000224:	4618      	mov	r0, r3
 8000226:	f000 f995 	bl	8000554 <GPIO_Init>

	//SDA
	I2CPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_9;
 800022a:	2309      	movs	r3, #9
 800022c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&I2CPins);
 800022e:	1d3b      	adds	r3, r7, #4
 8000230:	4618      	mov	r0, r3
 8000232:	f000 f98f 	bl	8000554 <GPIO_Init>


}
 8000236:	bf00      	nop
 8000238:	3710      	adds	r7, #16
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}
 800023e:	bf00      	nop
 8000240:	40020400 	.word	0x40020400

08000244 <I2C1_Inits>:

void I2C1_Inits(void)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	af00      	add	r7, sp, #0
	I2C1Handle.pI2Cx = I2C1;
 8000248:	4b09      	ldr	r3, [pc, #36]	@ (8000270 <I2C1_Inits+0x2c>)
 800024a:	4a0a      	ldr	r2, [pc, #40]	@ (8000274 <I2C1_Inits+0x30>)
 800024c:	601a      	str	r2, [r3, #0]

	I2C1Handle.I2C_Config.I2C_ACKControl = I2C_ACK_ENABLE;
 800024e:	4b08      	ldr	r3, [pc, #32]	@ (8000270 <I2C1_Inits+0x2c>)
 8000250:	2201      	movs	r2, #1
 8000252:	725a      	strb	r2, [r3, #9]
	I2C1Handle.I2C_Config.I2C_DeviceAddress = MY_DEVICE_ADDRESS;
 8000254:	4b06      	ldr	r3, [pc, #24]	@ (8000270 <I2C1_Inits+0x2c>)
 8000256:	2261      	movs	r2, #97	@ 0x61
 8000258:	721a      	strb	r2, [r3, #8]
	I2C1Handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 800025a:	4b05      	ldr	r3, [pc, #20]	@ (8000270 <I2C1_Inits+0x2c>)
 800025c:	2200      	movs	r2, #0
 800025e:	815a      	strh	r2, [r3, #10]
	I2C1Handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8000260:	4b03      	ldr	r3, [pc, #12]	@ (8000270 <I2C1_Inits+0x2c>)
 8000262:	4a05      	ldr	r2, [pc, #20]	@ (8000278 <I2C1_Inits+0x34>)
 8000264:	605a      	str	r2, [r3, #4]

	I2C_Init(&I2C1Handle);
 8000266:	4802      	ldr	r0, [pc, #8]	@ (8000270 <I2C1_Inits+0x2c>)
 8000268:	f000 fbc8 	bl	80009fc <I2C_Init>

}
 800026c:	bf00      	nop
 800026e:	bd80      	pop	{r7, pc}
 8000270:	2000005c 	.word	0x2000005c
 8000274:	40005400 	.word	0x40005400
 8000278:	000186a0 	.word	0x000186a0

0800027c <GPIO_ButtonInit>:

void 	GPIO_ButtonInit()
{
 800027c:	b580      	push	{r7, lr}
 800027e:	b086      	sub	sp, #24
 8000280:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn, GpioLed;

	//this is button GPIO configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000282:	4b15      	ldr	r3, [pc, #84]	@ (80002d8 <GPIO_ButtonInit+0x5c>)
 8000284:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000286:	2300      	movs	r3, #0
 8000288:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 800028a:	2300      	movs	r3, #0
 800028c:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800028e:	2302      	movs	r3, #2
 8000290:	74bb      	strb	r3, [r7, #18]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 8000292:	2300      	movs	r3, #0
 8000294:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriClockControl(GPIOA, ENABLE);
 8000296:	2101      	movs	r1, #1
 8000298:	480f      	ldr	r0, [pc, #60]	@ (80002d8 <GPIO_ButtonInit+0x5c>)
 800029a:	f000 f873 	bl	8000384 <GPIO_PeriClockControl>
	GPIO_Init(&GPIOBtn);
 800029e:	f107 030c 	add.w	r3, r7, #12
 80002a2:	4618      	mov	r0, r3
 80002a4:	f000 f956 	bl	8000554 <GPIO_Init>

	GpioLed.pGPIOx = GPIOD;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	@ (80002dc <GPIO_ButtonInit+0x60>)
 80002aa:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80002ac:	230c      	movs	r3, #12
 80002ae:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80002b0:	2301      	movs	r3, #1
 80002b2:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002b4:	2302      	movs	r3, #2
 80002b6:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 80002b8:	2301      	movs	r3, #1
 80002ba:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_NO_PUPD;
 80002bc:	2300      	movs	r3, #0
 80002be:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriClockControl(GPIOD, ENABLE);
 80002c0:	2101      	movs	r1, #1
 80002c2:	4806      	ldr	r0, [pc, #24]	@ (80002dc <GPIO_ButtonInit+0x60>)
 80002c4:	f000 f85e 	bl	8000384 <GPIO_PeriClockControl>
	GPIO_Init(&GpioLed);
 80002c8:	463b      	mov	r3, r7
 80002ca:	4618      	mov	r0, r3
 80002cc:	f000 f942 	bl	8000554 <GPIO_Init>

}
 80002d0:	bf00      	nop
 80002d2:	3718      	adds	r7, #24
 80002d4:	46bd      	mov	sp, r7
 80002d6:	bd80      	pop	{r7, pc}
 80002d8:	40020000 	.word	0x40020000
 80002dc:	40020c00 	.word	0x40020c00

080002e0 <main>:

int main(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
	GPIO_ButtonInit();
 80002e4:	f7ff ffca 	bl	800027c <GPIO_ButtonInit>

	// I2C Pin Initilization
	I2C1_GPIOInits();
 80002e8:	f7ff ff8c 	bl	8000204 <I2C1_GPIOInits>

	// I2C initilization
	I2C1_Inits();
 80002ec:	f7ff ffaa 	bl	8000244 <I2C1_Inits>

	//Enable the I2C peripheral
	I2C_PeripheralControl(I2C1, ENABLE);
 80002f0:	2101      	movs	r1, #1
 80002f2:	480b      	ldr	r0, [pc, #44]	@ (8000320 <main+0x40>)
 80002f4:	f000 fcfc 	bl	8000cf0 <I2C_PeripheralControl>

	//wait for the button press
	while(1)
	{
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80002f8:	bf00      	nop
 80002fa:	2100      	movs	r1, #0
 80002fc:	4809      	ldr	r0, [pc, #36]	@ (8000324 <main+0x44>)
 80002fe:	f000 fac9 	bl	8000894 <GPIO_ReadFromInputPin>
 8000302:	4603      	mov	r3, r0
 8000304:	2b00      	cmp	r3, #0
 8000306:	d0f8      	beq.n	80002fa <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000308:	f7ff ff66 	bl	80001d8 <delay>

		//send some data to Slave
		I2C_MasterSendData(&I2C1Handle, some_data, strlen(some_data), SLAVE_ADDRESS);
 800030c:	4806      	ldr	r0, [pc, #24]	@ (8000328 <main+0x48>)
 800030e:	f7ff ff5b 	bl	80001c8 <strlen>
 8000312:	4602      	mov	r2, r0
 8000314:	2368      	movs	r3, #104	@ 0x68
 8000316:	4904      	ldr	r1, [pc, #16]	@ (8000328 <main+0x48>)
 8000318:	4804      	ldr	r0, [pc, #16]	@ (800032c <main+0x4c>)
 800031a:	f000 fc25 	bl	8000b68 <I2C_MasterSendData>
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 800031e:	e7eb      	b.n	80002f8 <main+0x18>
 8000320:	40005400 	.word	0x40005400
 8000324:	40020000 	.word	0x40020000
 8000328:	20000000 	.word	0x20000000
 800032c:	2000005c 	.word	0x2000005c

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 fcfb 	bl	8000d58 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ffbd 	bl	80002e0 <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000040 	.word	0x20000040
  ldr r2, =_sidata
 8000374:	08000dc8 	.word	0x08000dc8
  ldr r2, =_sbss
 8000378:	20000040 	.word	0x20000040
  ldr r4, =_ebss
 800037c:	20000068 	.word	0x20000068

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <GPIO_PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000384:	b480      	push	{r7}
 8000386:	b083      	sub	sp, #12
 8000388:	af00      	add	r7, sp, #0
 800038a:	6078      	str	r0, [r7, #4]
 800038c:	460b      	mov	r3, r1
 800038e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000390:	78fb      	ldrb	r3, [r7, #3]
 8000392:	2b01      	cmp	r3, #1
 8000394:	d162      	bne.n	800045c <GPIO_PeriClockControl+0xd8>
	{
		if(pGPIOx == GPIOA)
 8000396:	687b      	ldr	r3, [r7, #4]
 8000398:	4a64      	ldr	r2, [pc, #400]	@ (800052c <GPIO_PeriClockControl+0x1a8>)
 800039a:	4293      	cmp	r3, r2
 800039c:	d106      	bne.n	80003ac <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800039e:	4b64      	ldr	r3, [pc, #400]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a2:	4a63      	ldr	r2, [pc, #396]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003a4:	f043 0301 	orr.w	r3, r3, #1
 80003a8:	6313      	str	r3, [r2, #48]	@ 0x30
			GPIOI_PCLK_DIS();

		}

	}
}
 80003aa:	e0b9      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	4a61      	ldr	r2, [pc, #388]	@ (8000534 <GPIO_PeriClockControl+0x1b0>)
 80003b0:	4293      	cmp	r3, r2
 80003b2:	d106      	bne.n	80003c2 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003b4:	4b5e      	ldr	r3, [pc, #376]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b8:	4a5d      	ldr	r2, [pc, #372]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003ba:	f043 0302 	orr.w	r3, r3, #2
 80003be:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003c0:	e0ae      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	4a5c      	ldr	r2, [pc, #368]	@ (8000538 <GPIO_PeriClockControl+0x1b4>)
 80003c6:	4293      	cmp	r3, r2
 80003c8:	d106      	bne.n	80003d8 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003ca:	4b59      	ldr	r3, [pc, #356]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003ce:	4a58      	ldr	r2, [pc, #352]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003d0:	f043 0304 	orr.w	r3, r3, #4
 80003d4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d6:	e0a3      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	4a58      	ldr	r2, [pc, #352]	@ (800053c <GPIO_PeriClockControl+0x1b8>)
 80003dc:	4293      	cmp	r3, r2
 80003de:	d106      	bne.n	80003ee <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003e0:	4b53      	ldr	r3, [pc, #332]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e4:	4a52      	ldr	r2, [pc, #328]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003e6:	f043 0308 	orr.w	r3, r3, #8
 80003ea:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ec:	e098      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	4a53      	ldr	r2, [pc, #332]	@ (8000540 <GPIO_PeriClockControl+0x1bc>)
 80003f2:	4293      	cmp	r3, r2
 80003f4:	d106      	bne.n	8000404 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003f6:	4b4e      	ldr	r3, [pc, #312]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003fa:	4a4d      	ldr	r2, [pc, #308]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80003fc:	f043 0310 	orr.w	r3, r3, #16
 8000400:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000402:	e08d      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 8000404:	687b      	ldr	r3, [r7, #4]
 8000406:	4a4f      	ldr	r2, [pc, #316]	@ (8000544 <GPIO_PeriClockControl+0x1c0>)
 8000408:	4293      	cmp	r3, r2
 800040a:	d106      	bne.n	800041a <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 800040c:	4b48      	ldr	r3, [pc, #288]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800040e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000410:	4a47      	ldr	r2, [pc, #284]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000412:	f043 0320 	orr.w	r3, r3, #32
 8000416:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000418:	e082      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	4a4a      	ldr	r2, [pc, #296]	@ (8000548 <GPIO_PeriClockControl+0x1c4>)
 800041e:	4293      	cmp	r3, r2
 8000420:	d106      	bne.n	8000430 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000422:	4b43      	ldr	r3, [pc, #268]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000426:	4a42      	ldr	r2, [pc, #264]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800042c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042e:	e077      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	4a46      	ldr	r2, [pc, #280]	@ (800054c <GPIO_PeriClockControl+0x1c8>)
 8000434:	4293      	cmp	r3, r2
 8000436:	d106      	bne.n	8000446 <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 8000438:	4b3d      	ldr	r3, [pc, #244]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800043a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043c:	4a3c      	ldr	r2, [pc, #240]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800043e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000442:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000444:	e06c      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 8000446:	687b      	ldr	r3, [r7, #4]
 8000448:	4a41      	ldr	r2, [pc, #260]	@ (8000550 <GPIO_PeriClockControl+0x1cc>)
 800044a:	4293      	cmp	r3, r2
 800044c:	d168      	bne.n	8000520 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_EN();
 800044e:	4b38      	ldr	r3, [pc, #224]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000452:	4a37      	ldr	r2, [pc, #220]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000454:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000458:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800045a:	e061      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		if(pGPIOx == GPIOA)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	4a33      	ldr	r2, [pc, #204]	@ (800052c <GPIO_PeriClockControl+0x1a8>)
 8000460:	4293      	cmp	r3, r2
 8000462:	d106      	bne.n	8000472 <GPIO_PeriClockControl+0xee>
			GPIOA_PCLK_DIS();
 8000464:	4b32      	ldr	r3, [pc, #200]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000468:	4a31      	ldr	r2, [pc, #196]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800046a:	f023 0301 	bic.w	r3, r3, #1
 800046e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000470:	e056      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOB)
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	4a2f      	ldr	r2, [pc, #188]	@ (8000534 <GPIO_PeriClockControl+0x1b0>)
 8000476:	4293      	cmp	r3, r2
 8000478:	d106      	bne.n	8000488 <GPIO_PeriClockControl+0x104>
			GPIOB_PCLK_DIS();
 800047a:	4b2d      	ldr	r3, [pc, #180]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800047c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047e:	4a2c      	ldr	r2, [pc, #176]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000480:	f023 0302 	bic.w	r3, r3, #2
 8000484:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000486:	e04b      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOC)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4a2b      	ldr	r2, [pc, #172]	@ (8000538 <GPIO_PeriClockControl+0x1b4>)
 800048c:	4293      	cmp	r3, r2
 800048e:	d106      	bne.n	800049e <GPIO_PeriClockControl+0x11a>
			GPIOC_PCLK_DIS();
 8000490:	4b27      	ldr	r3, [pc, #156]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000492:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000494:	4a26      	ldr	r2, [pc, #152]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000496:	f023 0304 	bic.w	r3, r3, #4
 800049a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800049c:	e040      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOD)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4a26      	ldr	r2, [pc, #152]	@ (800053c <GPIO_PeriClockControl+0x1b8>)
 80004a2:	4293      	cmp	r3, r2
 80004a4:	d106      	bne.n	80004b4 <GPIO_PeriClockControl+0x130>
			GPIOD_PCLK_DIS();
 80004a6:	4b22      	ldr	r3, [pc, #136]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004aa:	4a21      	ldr	r2, [pc, #132]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004ac:	f023 0308 	bic.w	r3, r3, #8
 80004b0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004b2:	e035      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOE)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a22      	ldr	r2, [pc, #136]	@ (8000540 <GPIO_PeriClockControl+0x1bc>)
 80004b8:	4293      	cmp	r3, r2
 80004ba:	d106      	bne.n	80004ca <GPIO_PeriClockControl+0x146>
			GPIOE_PCLK_DIS();
 80004bc:	4b1c      	ldr	r3, [pc, #112]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c0:	4a1b      	ldr	r2, [pc, #108]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004c2:	f023 0310 	bic.w	r3, r3, #16
 80004c6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004c8:	e02a      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOF)
 80004ca:	687b      	ldr	r3, [r7, #4]
 80004cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000544 <GPIO_PeriClockControl+0x1c0>)
 80004ce:	4293      	cmp	r3, r2
 80004d0:	d106      	bne.n	80004e0 <GPIO_PeriClockControl+0x15c>
			GPIOF_PCLK_DIS();
 80004d2:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d6:	4a16      	ldr	r2, [pc, #88]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004d8:	f023 0320 	bic.w	r3, r3, #32
 80004dc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004de:	e01f      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOG)
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	4a19      	ldr	r2, [pc, #100]	@ (8000548 <GPIO_PeriClockControl+0x1c4>)
 80004e4:	4293      	cmp	r3, r2
 80004e6:	d106      	bne.n	80004f6 <GPIO_PeriClockControl+0x172>
			GPIOG_PCLK_DIS();
 80004e8:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004ec:	4a10      	ldr	r2, [pc, #64]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 80004ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80004f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004f4:	e014      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOH)
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	4a14      	ldr	r2, [pc, #80]	@ (800054c <GPIO_PeriClockControl+0x1c8>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d106      	bne.n	800050c <GPIO_PeriClockControl+0x188>
			GPIOH_PCLK_DIS();
 80004fe:	4b0c      	ldr	r3, [pc, #48]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000502:	4a0b      	ldr	r2, [pc, #44]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000504:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000508:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800050a:	e009      	b.n	8000520 <GPIO_PeriClockControl+0x19c>
		}else if(pGPIOx == GPIOI)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a10      	ldr	r2, [pc, #64]	@ (8000550 <GPIO_PeriClockControl+0x1cc>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d105      	bne.n	8000520 <GPIO_PeriClockControl+0x19c>
			GPIOI_PCLK_DIS();
 8000514:	4b06      	ldr	r3, [pc, #24]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 8000516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000518:	4a05      	ldr	r2, [pc, #20]	@ (8000530 <GPIO_PeriClockControl+0x1ac>)
 800051a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800051e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	40020000 	.word	0x40020000
 8000530:	40023800 	.word	0x40023800
 8000534:	40020400 	.word	0x40020400
 8000538:	40020800 	.word	0x40020800
 800053c:	40020c00 	.word	0x40020c00
 8000540:	40021000 	.word	0x40021000
 8000544:	40021400 	.word	0x40021400
 8000548:	40021800 	.word	0x40021800
 800054c:	40021c00 	.word	0x40021c00
 8000550:	40022000 	.word	0x40022000

08000554 <GPIO_Init>:

/*
 * Init and De-init
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b086      	sub	sp, #24
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]

	// Enable the peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	2101      	movs	r1, #1
 8000566:	4618      	mov	r0, r3
 8000568:	f7ff ff0c 	bl	8000384 <GPIO_PeriClockControl>
	//1. Configure Mode of GPIO pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	2b03      	cmp	r3, #3
 8000572:	d81f      	bhi.n	80005b4 <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000574:	687b      	ldr	r3, [r7, #4]
 8000576:	795b      	ldrb	r3, [r3, #5]
 8000578:	461a      	mov	r2, r3
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	791b      	ldrb	r3, [r3, #4]
 800057e:	005b      	lsls	r3, r3, #1
 8000580:	fa02 f303 	lsl.w	r3, r2, r3
 8000584:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	791b      	ldrb	r3, [r3, #4]
 8000590:	4619      	mov	r1, r3
 8000592:	2303      	movs	r3, #3
 8000594:	408b      	lsls	r3, r1
 8000596:	43db      	mvns	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	400a      	ands	r2, r1
 80005a0:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	6819      	ldr	r1, [r3, #0]
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	697a      	ldr	r2, [r7, #20]
 80005ae:	430a      	orrs	r2, r1
 80005b0:	601a      	str	r2, [r3, #0]
 80005b2:	e0ca      	b.n	800074a <GPIO_Init+0x1f6>

	}else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	795b      	ldrb	r3, [r3, #5]
 80005b8:	2b04      	cmp	r3, #4
 80005ba:	d117      	bne.n	80005ec <GPIO_Init+0x98>
		{
			//1. Configure the FTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005bc:	4b4a      	ldr	r3, [pc, #296]	@ (80006e8 <GPIO_Init+0x194>)
 80005be:	68db      	ldr	r3, [r3, #12]
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	7912      	ldrb	r2, [r2, #4]
 80005c4:	4611      	mov	r1, r2
 80005c6:	2201      	movs	r2, #1
 80005c8:	408a      	lsls	r2, r1
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a46      	ldr	r2, [pc, #280]	@ (80006e8 <GPIO_Init+0x194>)
 80005ce:	430b      	orrs	r3, r1
 80005d0:	60d3      	str	r3, [r2, #12]
			// Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d2:	4b45      	ldr	r3, [pc, #276]	@ (80006e8 <GPIO_Init+0x194>)
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	7912      	ldrb	r2, [r2, #4]
 80005da:	4611      	mov	r1, r2
 80005dc:	2201      	movs	r2, #1
 80005de:	408a      	lsls	r2, r1
 80005e0:	43d2      	mvns	r2, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a40      	ldr	r2, [pc, #256]	@ (80006e8 <GPIO_Init+0x194>)
 80005e6:	400b      	ands	r3, r1
 80005e8:	6093      	str	r3, [r2, #8]
 80005ea:	e035      	b.n	8000658 <GPIO_Init+0x104>


		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	795b      	ldrb	r3, [r3, #5]
 80005f0:	2b05      	cmp	r3, #5
 80005f2:	d117      	bne.n	8000624 <GPIO_Init+0xd0>
		{
			//1. Configure the RTSR
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f4:	4b3c      	ldr	r3, [pc, #240]	@ (80006e8 <GPIO_Init+0x194>)
 80005f6:	689b      	ldr	r3, [r3, #8]
 80005f8:	687a      	ldr	r2, [r7, #4]
 80005fa:	7912      	ldrb	r2, [r2, #4]
 80005fc:	4611      	mov	r1, r2
 80005fe:	2201      	movs	r2, #1
 8000600:	408a      	lsls	r2, r1
 8000602:	4611      	mov	r1, r2
 8000604:	4a38      	ldr	r2, [pc, #224]	@ (80006e8 <GPIO_Init+0x194>)
 8000606:	430b      	orrs	r3, r1
 8000608:	6093      	str	r3, [r2, #8]

			// Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800060a:	4b37      	ldr	r3, [pc, #220]	@ (80006e8 <GPIO_Init+0x194>)
 800060c:	68db      	ldr	r3, [r3, #12]
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	7912      	ldrb	r2, [r2, #4]
 8000612:	4611      	mov	r1, r2
 8000614:	2201      	movs	r2, #1
 8000616:	408a      	lsls	r2, r1
 8000618:	43d2      	mvns	r2, r2
 800061a:	4611      	mov	r1, r2
 800061c:	4a32      	ldr	r2, [pc, #200]	@ (80006e8 <GPIO_Init+0x194>)
 800061e:	400b      	ands	r3, r1
 8000620:	60d3      	str	r3, [r2, #12]
 8000622:	e019      	b.n	8000658 <GPIO_Init+0x104>

		}else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	795b      	ldrb	r3, [r3, #5]
 8000628:	2b06      	cmp	r3, #6
 800062a:	d115      	bne.n	8000658 <GPIO_Init+0x104>
		{
			//1. Configure both the FTSR and RTSR
			EXTI->FTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062c:	4b2e      	ldr	r3, [pc, #184]	@ (80006e8 <GPIO_Init+0x194>)
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	7912      	ldrb	r2, [r2, #4]
 8000634:	4611      	mov	r1, r2
 8000636:	2201      	movs	r2, #1
 8000638:	408a      	lsls	r2, r1
 800063a:	4611      	mov	r1, r2
 800063c:	4a2a      	ldr	r2, [pc, #168]	@ (80006e8 <GPIO_Init+0x194>)
 800063e:	430b      	orrs	r3, r1
 8000640:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000642:	4b29      	ldr	r3, [pc, #164]	@ (80006e8 <GPIO_Init+0x194>)
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	7912      	ldrb	r2, [r2, #4]
 800064a:	4611      	mov	r1, r2
 800064c:	2201      	movs	r2, #1
 800064e:	408a      	lsls	r2, r1
 8000650:	4611      	mov	r1, r2
 8000652:	4a25      	ldr	r2, [pc, #148]	@ (80006e8 <GPIO_Init+0x194>)
 8000654:	430b      	orrs	r3, r1
 8000656:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	791b      	ldrb	r3, [r3, #4]
 800065c:	089b      	lsrs	r3, r3, #2
 800065e:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 =  pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	791b      	ldrb	r3, [r3, #4]
 8000664:	f003 0303 	and.w	r3, r3, #3
 8000668:	74bb      	strb	r3, [r7, #18]

		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4a1f      	ldr	r2, [pc, #124]	@ (80006ec <GPIO_Init+0x198>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d04d      	beq.n	8000710 <GPIO_Init+0x1bc>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	4a1d      	ldr	r2, [pc, #116]	@ (80006f0 <GPIO_Init+0x19c>)
 800067a:	4293      	cmp	r3, r2
 800067c:	d032      	beq.n	80006e4 <GPIO_Init+0x190>
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a1c      	ldr	r2, [pc, #112]	@ (80006f4 <GPIO_Init+0x1a0>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d02b      	beq.n	80006e0 <GPIO_Init+0x18c>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a1a      	ldr	r2, [pc, #104]	@ (80006f8 <GPIO_Init+0x1a4>)
 800068e:	4293      	cmp	r3, r2
 8000690:	d024      	beq.n	80006dc <GPIO_Init+0x188>
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	4a19      	ldr	r2, [pc, #100]	@ (80006fc <GPIO_Init+0x1a8>)
 8000698:	4293      	cmp	r3, r2
 800069a:	d01d      	beq.n	80006d8 <GPIO_Init+0x184>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	4a17      	ldr	r2, [pc, #92]	@ (8000700 <GPIO_Init+0x1ac>)
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d016      	beq.n	80006d4 <GPIO_Init+0x180>
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a16      	ldr	r2, [pc, #88]	@ (8000704 <GPIO_Init+0x1b0>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d00f      	beq.n	80006d0 <GPIO_Init+0x17c>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a14      	ldr	r2, [pc, #80]	@ (8000708 <GPIO_Init+0x1b4>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d008      	beq.n	80006cc <GPIO_Init+0x178>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4a13      	ldr	r2, [pc, #76]	@ (800070c <GPIO_Init+0x1b8>)
 80006c0:	4293      	cmp	r3, r2
 80006c2:	d101      	bne.n	80006c8 <GPIO_Init+0x174>
 80006c4:	2308      	movs	r3, #8
 80006c6:	e024      	b.n	8000712 <GPIO_Init+0x1be>
 80006c8:	2300      	movs	r3, #0
 80006ca:	e022      	b.n	8000712 <GPIO_Init+0x1be>
 80006cc:	2307      	movs	r3, #7
 80006ce:	e020      	b.n	8000712 <GPIO_Init+0x1be>
 80006d0:	2306      	movs	r3, #6
 80006d2:	e01e      	b.n	8000712 <GPIO_Init+0x1be>
 80006d4:	2305      	movs	r3, #5
 80006d6:	e01c      	b.n	8000712 <GPIO_Init+0x1be>
 80006d8:	2304      	movs	r3, #4
 80006da:	e01a      	b.n	8000712 <GPIO_Init+0x1be>
 80006dc:	2303      	movs	r3, #3
 80006de:	e018      	b.n	8000712 <GPIO_Init+0x1be>
 80006e0:	2302      	movs	r3, #2
 80006e2:	e016      	b.n	8000712 <GPIO_Init+0x1be>
 80006e4:	2301      	movs	r3, #1
 80006e6:	e014      	b.n	8000712 <GPIO_Init+0x1be>
 80006e8:	40013c00 	.word	0x40013c00
 80006ec:	40020000 	.word	0x40020000
 80006f0:	40020400 	.word	0x40020400
 80006f4:	40020800 	.word	0x40020800
 80006f8:	40020c00 	.word	0x40020c00
 80006fc:	40021000 	.word	0x40021000
 8000700:	40021400 	.word	0x40021400
 8000704:	40021800 	.word	0x40021800
 8000708:	40021c00 	.word	0x40021c00
 800070c:	40022000 	.word	0x40022000
 8000710:	2300      	movs	r3, #0
 8000712:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000714:	4b5c      	ldr	r3, [pc, #368]	@ (8000888 <GPIO_Init+0x334>)
 8000716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000718:	4a5b      	ldr	r2, [pc, #364]	@ (8000888 <GPIO_Init+0x334>)
 800071a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800071e:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 *4);
 8000720:	7c7a      	ldrb	r2, [r7, #17]
 8000722:	7cbb      	ldrb	r3, [r7, #18]
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	fa02 f103 	lsl.w	r1, r2, r3
 800072a:	4a58      	ldr	r2, [pc, #352]	@ (800088c <GPIO_Init+0x338>)
 800072c:	7cfb      	ldrb	r3, [r7, #19]
 800072e:	3302      	adds	r3, #2
 8000730:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR (interrupt Mask Register)
		EXTI->IMR |= (1<<pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000734:	4b56      	ldr	r3, [pc, #344]	@ (8000890 <GPIO_Init+0x33c>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	7912      	ldrb	r2, [r2, #4]
 800073c:	4611      	mov	r1, r2
 800073e:	2201      	movs	r2, #1
 8000740:	408a      	lsls	r2, r1
 8000742:	4611      	mov	r1, r2
 8000744:	4a52      	ldr	r2, [pc, #328]	@ (8000890 <GPIO_Init+0x33c>)
 8000746:	430b      	orrs	r3, r1
 8000748:	6013      	str	r3, [r2, #0]
	}
	temp = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
	//2. Configure the Speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	799b      	ldrb	r3, [r3, #6]
 8000752:	461a      	mov	r2, r3
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	005b      	lsls	r3, r3, #1
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	689a      	ldr	r2, [r3, #8]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	4619      	mov	r1, r3
 800076c:	2303      	movs	r3, #3
 800076e:	408b      	lsls	r3, r1
 8000770:	43db      	mvns	r3, r3
 8000772:	4619      	mov	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	400a      	ands	r2, r1
 800077a:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	6899      	ldr	r1, [r3, #8]
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	697a      	ldr	r2, [r7, #20]
 8000788:	430a      	orrs	r2, r1
 800078a:	609a      	str	r2, [r3, #8]
	temp = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

	//3. Configure the PuPd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	79db      	ldrb	r3, [r3, #7]
 8000794:	461a      	mov	r2, r3
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	791b      	ldrb	r3, [r3, #4]
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	fa02 f303 	lsl.w	r3, r2, r3
 80007a0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	791b      	ldrb	r3, [r3, #4]
 80007ac:	4619      	mov	r1, r3
 80007ae:	2303      	movs	r3, #3
 80007b0:	408b      	lsls	r3, r1
 80007b2:	43db      	mvns	r3, r3
 80007b4:	4619      	mov	r1, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	400a      	ands	r2, r1
 80007bc:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	68d9      	ldr	r1, [r3, #12]
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	697a      	ldr	r2, [r7, #20]
 80007ca:	430a      	orrs	r2, r1
 80007cc:	60da      	str	r2, [r3, #12]
	temp = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]

	//4. Configure the OPTYPE
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	7a1b      	ldrb	r3, [r3, #8]
 80007d6:	461a      	mov	r2, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	791b      	ldrb	r3, [r3, #4]
 80007dc:	fa02 f303 	lsl.w	r3, r2, r3
 80007e0:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	685a      	ldr	r2, [r3, #4]
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	791b      	ldrb	r3, [r3, #4]
 80007ec:	4619      	mov	r1, r3
 80007ee:	2301      	movs	r3, #1
 80007f0:	408b      	lsls	r3, r1
 80007f2:	43db      	mvns	r3, r3
 80007f4:	4619      	mov	r1, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	400a      	ands	r2, r1
 80007fc:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	6859      	ldr	r1, [r3, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	697a      	ldr	r2, [r7, #20]
 800080a:	430a      	orrs	r2, r1
 800080c:	605a      	str	r2, [r3, #4]
	temp = 0;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
	//5. Configure the Alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	795b      	ldrb	r3, [r3, #5]
 8000816:	2b02      	cmp	r3, #2
 8000818:	d132      	bne.n	8000880 <GPIO_Init+0x32c>
	{
		uint32_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	791b      	ldrb	r3, [r3, #4]
 800081e:	08db      	lsrs	r3, r3, #3
 8000820:	b2db      	uxtb	r3, r3
 8000822:	60fb      	str	r3, [r7, #12]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	791b      	ldrb	r3, [r3, #4]
 8000828:	f003 0307 	and.w	r3, r3, #7
 800082c:	60bb      	str	r3, [r7, #8]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 *temp2));
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	68fa      	ldr	r2, [r7, #12]
 8000834:	3208      	adds	r2, #8
 8000836:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800083a:	68bb      	ldr	r3, [r7, #8]
 800083c:	009b      	lsls	r3, r3, #2
 800083e:	210f      	movs	r1, #15
 8000840:	fa01 f303 	lsl.w	r3, r1, r3
 8000844:	43db      	mvns	r3, r3
 8000846:	4619      	mov	r1, r3
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4011      	ands	r1, r2
 800084e:	68fa      	ldr	r2, [r7, #12]
 8000850:	3208      	adds	r2, #8
 8000852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	3208      	adds	r2, #8
 800085e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	7a5b      	ldrb	r3, [r3, #9]
 8000866:	4619      	mov	r1, r3
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	009b      	lsls	r3, r3, #2
 800086c:	fa01 f303 	lsl.w	r3, r1, r3
 8000870:	4619      	mov	r1, r3
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4311      	orrs	r1, r2
 8000878:	68fa      	ldr	r2, [r7, #12]
 800087a:	3208      	adds	r2, #8
 800087c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000880:	bf00      	nop
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40023800 	.word	0x40023800
 800088c:	40013800 	.word	0x40013800
 8000890:	40013c00 	.word	0x40013c00

08000894 <GPIO_ReadFromInputPin>:

/*
 *  return the Pin is input or not as 0 or 1
 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & (0x00000001));
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	691a      	ldr	r2, [r3, #16]
 80008a4:	78fb      	ldrb	r3, [r7, #3]
 80008a6:	fa22 f303 	lsr.w	r3, r2, r3
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	73fb      	strb	r3, [r7, #15]
	return value;
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80008b4:	4618      	mov	r0, r3
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr

080008c0 <I2C_GenerateStartCondition>:
static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx);
static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx);


static void I2C_GenerateStartCondition(I2C_RegDef_t *pI2Cx)
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_START);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	601a      	str	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	370c      	adds	r7, #12
 80008d8:	46bd      	mov	sp, r7
 80008da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008de:	4770      	bx	lr

080008e0 <I2C_ExecuteAddressPhaseWrite>:

static void I2C_ExecuteAddressPhaseWrite(I2C_RegDef_t *pI2Cx,uint8_t SlaveAddr)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	70fb      	strb	r3, [r7, #3]
	SlaveAddr = SlaveAddr << 1;
 80008ec:	78fb      	ldrb	r3, [r7, #3]
 80008ee:	005b      	lsls	r3, r3, #1
 80008f0:	70fb      	strb	r3, [r7, #3]
	SlaveAddr &= ~(1);   //Clear the 0th bit  (SlaveAddr is Slave address + R/not_w   0
 80008f2:	78fb      	ldrb	r3, [r7, #3]
 80008f4:	f023 0301 	bic.w	r3, r3, #1
 80008f8:	70fb      	strb	r3, [r7, #3]

	pI2Cx->DR = SlaveAddr;
 80008fa:	78fa      	ldrb	r2, [r7, #3]
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	611a      	str	r2, [r3, #16]
}
 8000900:	bf00      	nop
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <I2C_ClearADDRFlag>:

	pI2Cx->DR = SlaveAddr;
}

static void I2C_ClearADDRFlag(I2C_RegDef_t *pI2Cx)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead = pI2Cx->SR1;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	695b      	ldr	r3, [r3, #20]
 8000918:	60fb      	str	r3, [r7, #12]
	dummyRead = pI2Cx->SR2;
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	699b      	ldr	r3, [r3, #24]
 800091e:	60fb      	str	r3, [r7, #12]

	(void)dummyRead;

}
 8000920:	bf00      	nop
 8000922:	3714      	adds	r7, #20
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <I2C_GenerateStopCondition>:

static void I2C_GenerateStopCondition(I2C_RegDef_t *pI2Cx)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	pI2Cx->CR1 |= (1 << I2C_CR1_STOP);
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	601a      	str	r2, [r3, #0]

}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <I2C_PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void I2C_PeriClockControl(I2C_RegDef_t *pI2Cx, uint8_t EnorDi)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	460b      	mov	r3, r1
 8000956:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000958:	78fb      	ldrb	r3, [r7, #3]
 800095a:	2b01      	cmp	r3, #1
 800095c:	d120      	bne.n	80009a0 <I2C_PeriClockControl+0x54>
	{
		if(pI2Cx == I2C1)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4a22      	ldr	r2, [pc, #136]	@ (80009ec <I2C_PeriClockControl+0xa0>)
 8000962:	4293      	cmp	r3, r2
 8000964:	d106      	bne.n	8000974 <I2C_PeriClockControl+0x28>
		{
			I2C1_PCLK_EN();
 8000966:	4b22      	ldr	r3, [pc, #136]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 8000968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800096a:	4a21      	ldr	r2, [pc, #132]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 800096c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000970:	6413      	str	r3, [r2, #64]	@ 0x40
		}else if(pI2Cx == I2C3)
		{
			I2C3_PCLK_DIS();
		}
	}
}
 8000972:	e035      	b.n	80009e0 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	4a1f      	ldr	r2, [pc, #124]	@ (80009f4 <I2C_PeriClockControl+0xa8>)
 8000978:	4293      	cmp	r3, r2
 800097a:	d106      	bne.n	800098a <I2C_PeriClockControl+0x3e>
			I2C2_PCLK_EN();
 800097c:	4b1c      	ldr	r3, [pc, #112]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 800097e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000980:	4a1b      	ldr	r2, [pc, #108]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 8000982:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000986:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000988:	e02a      	b.n	80009e0 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3)
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a1a      	ldr	r2, [pc, #104]	@ (80009f8 <I2C_PeriClockControl+0xac>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d126      	bne.n	80009e0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_EN();
 8000992:	4b17      	ldr	r3, [pc, #92]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 8000994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000996:	4a16      	ldr	r2, [pc, #88]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 8000998:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800099c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800099e:	e01f      	b.n	80009e0 <I2C_PeriClockControl+0x94>
		if(pI2Cx == I2C1)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <I2C_PeriClockControl+0xa0>)
 80009a4:	4293      	cmp	r3, r2
 80009a6:	d106      	bne.n	80009b6 <I2C_PeriClockControl+0x6a>
			I2C1_PCLK_DIS();
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 80009aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ac:	4a10      	ldr	r2, [pc, #64]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 80009ae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80009b2:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009b4:	e014      	b.n	80009e0 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C2)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a0e      	ldr	r2, [pc, #56]	@ (80009f4 <I2C_PeriClockControl+0xa8>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d106      	bne.n	80009cc <I2C_PeriClockControl+0x80>
			I2C2_PCLK_DIS();
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c2:	4a0b      	ldr	r2, [pc, #44]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 80009c4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80009c8:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009ca:	e009      	b.n	80009e0 <I2C_PeriClockControl+0x94>
		}else if(pI2Cx == I2C3)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4a0a      	ldr	r2, [pc, #40]	@ (80009f8 <I2C_PeriClockControl+0xac>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d105      	bne.n	80009e0 <I2C_PeriClockControl+0x94>
			I2C3_PCLK_DIS();
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 80009d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d8:	4a05      	ldr	r2, [pc, #20]	@ (80009f0 <I2C_PeriClockControl+0xa4>)
 80009da:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80009de:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	40005400 	.word	0x40005400
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40005800 	.word	0x40005800
 80009f8:	40005c00 	.word	0x40005c00

080009fc <I2C_Init>:


void I2C_Init(I2C_Handle_t *pI2CHandle)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b084      	sub	sp, #16
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	uint32_t tempreg = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
	uint8_t trise;

	//Enable the Clock for the I2C peripheral
	I2C_PeriClockControl(pI2CHandle->pI2Cx, ENABLE);
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	2101      	movs	r1, #1
 8000a0e:	4618      	mov	r0, r3
 8000a10:	f7ff ff9c 	bl	800094c <I2C_PeriClockControl>

	// ACK control
	tempreg |= (pI2CHandle->I2C_Config.I2C_ACKControl << 10);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	7a5b      	ldrb	r3, [r3, #9]
 8000a18:	029b      	lsls	r3, r3, #10
 8000a1a:	68fa      	ldr	r2, [r7, #12]
 8000a1c:	4313      	orrs	r3, r2
 8000a1e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR1 = tempreg;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	68fa      	ldr	r2, [r7, #12]
 8000a26:	601a      	str	r2, [r3, #0]

	//configure the FREQ field of CR2
	tempreg = 0;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	60fb      	str	r3, [r7, #12]
	tempreg |= RCC_GetPCLK1Value() / 1000000U;
 8000a2c:	f000 f8fe 	bl	8000c2c <RCC_GetPCLK1Value>
 8000a30:	4603      	mov	r3, r0
 8000a32:	4a4a      	ldr	r2, [pc, #296]	@ (8000b5c <I2C_Init+0x160>)
 8000a34:	fba2 2303 	umull	r2, r3, r2, r3
 8000a38:	0c9b      	lsrs	r3, r3, #18
 8000a3a:	68fa      	ldr	r2, [r7, #12]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	60fb      	str	r3, [r7, #12]
	pI2CHandle->pI2Cx->CR2 = (tempreg & 0x3F);
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000a4a:	605a      	str	r2, [r3, #4]

	// Program the device own address
	tempreg = 0;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
	tempreg |= pI2CHandle->I2C_Config.I2C_DeviceAddress <<1;
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	7a1b      	ldrb	r3, [r3, #8]
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	68fa      	ldr	r2, [r7, #12]
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	60fb      	str	r3, [r7, #12]

	//Reserved bit (Reference Manual says 14th bit should be 1)
	tempreg |= (1<<14);
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a62:	60fb      	str	r3, [r7, #12]

	pI2CHandle->pI2Cx->OAR1 = tempreg;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	68fa      	ldr	r2, [r7, #12]
 8000a6a:	609a      	str	r2, [r3, #8]


	//CCR calculation
	uint16_t ccr_value = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	813b      	strh	r3, [r7, #8]
	tempreg = 0;
 8000a70:	2300      	movs	r3, #0
 8000a72:	60fb      	str	r3, [r7, #12]

	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	4a39      	ldr	r2, [pc, #228]	@ (8000b60 <I2C_Init+0x164>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d80f      	bhi.n	8000a9e <I2C_Init+0xa2>
	{
		// Mode is Standard mode
		ccr_value = RCC_GetPCLK1Value() / (2 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000a7e:	f000 f8d5 	bl	8000c2c <RCC_GetPCLK1Value>
 8000a82:	4602      	mov	r2, r0
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	005b      	lsls	r3, r3, #1
 8000a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a8e:	813b      	strh	r3, [r7, #8]

		tempreg |= (ccr_value & 0xFFF);
 8000a90:	893b      	ldrh	r3, [r7, #8]
 8000a92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	4313      	orrs	r3, r2
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	e030      	b.n	8000b00 <I2C_Init+0x104>


	}else
	{
		// Mode is fast mode
		tempreg |= (1<<15);
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000aa4:	60fb      	str	r3, [r7, #12]
		tempreg |= (pI2CHandle->I2C_Config.I2C_FMDutyCycle << 14);
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	895b      	ldrh	r3, [r3, #10]
 8000aaa:	039b      	lsls	r3, r3, #14
 8000aac:	68fa      	ldr	r2, [r7, #12]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	60fb      	str	r3, [r7, #12]

		if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_2)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	895b      	ldrh	r3, [r3, #10]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d10b      	bne.n	8000ad2 <I2C_Init+0xd6>
		{
			ccr_value = RCC_GetPCLK1Value() / (3 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000aba:	f000 f8b7 	bl	8000c2c <RCC_GetPCLK1Value>
 8000abe:	4601      	mov	r1, r0
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	685a      	ldr	r2, [r3, #4]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	005b      	lsls	r3, r3, #1
 8000ac8:	4413      	add	r3, r2
 8000aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8000ace:	813b      	strh	r3, [r7, #8]
 8000ad0:	e010      	b.n	8000af4 <I2C_Init+0xf8>

		}else if(pI2CHandle->I2C_Config.I2C_FMDutyCycle == I2C_FM_DUTY_16_9)
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	895b      	ldrh	r3, [r3, #10]
 8000ad6:	2b01      	cmp	r3, #1
 8000ad8:	d10c      	bne.n	8000af4 <I2C_Init+0xf8>
		{
			ccr_value = RCC_GetPCLK1Value() / (25 * pI2CHandle->I2C_Config.I2C_SCLSpeed);
 8000ada:	f000 f8a7 	bl	8000c2c <RCC_GetPCLK1Value>
 8000ade:	4601      	mov	r1, r0
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	685a      	ldr	r2, [r3, #4]
 8000ae4:	4613      	mov	r3, r2
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	4413      	add	r3, r2
 8000aea:	009a      	lsls	r2, r3, #2
 8000aec:	4413      	add	r3, r2
 8000aee:	fbb1 f3f3 	udiv	r3, r1, r3
 8000af2:	813b      	strh	r3, [r7, #8]

		}
		tempreg |= (ccr_value & 0xFFF);
 8000af4:	893b      	ldrh	r3, [r7, #8]
 8000af6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000afa:	68fa      	ldr	r2, [r7, #12]
 8000afc:	4313      	orrs	r3, r2
 8000afe:	60fb      	str	r3, [r7, #12]

	}

	pI2CHandle->pI2Cx->CCR = tempreg;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	61da      	str	r2, [r3, #28]

	// TRISE configuration
	if(pI2CHandle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	4a14      	ldr	r2, [pc, #80]	@ (8000b60 <I2C_Init+0x164>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d80a      	bhi.n	8000b28 <I2C_Init+0x12c>
	{
		// Mode is standart Mode
		trise = (RCC_GetPCLK1Value() / 1000000U) + 1;
 8000b12:	f000 f88b 	bl	8000c2c <RCC_GetPCLK1Value>
 8000b16:	4603      	mov	r3, r0
 8000b18:	4a10      	ldr	r2, [pc, #64]	@ (8000b5c <I2C_Init+0x160>)
 8000b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b1e:	0c9b      	lsrs	r3, r3, #18
 8000b20:	b2db      	uxtb	r3, r3
 8000b22:	3301      	adds	r3, #1
 8000b24:	72fb      	strb	r3, [r7, #11]
 8000b26:	e00e      	b.n	8000b46 <I2C_Init+0x14a>
	}else
	{
		// Mode is fast Mode
		trise = ((RCC_GetPCLK1Value() * 300) / 1000000000U) + 1;
 8000b28:	f000 f880 	bl	8000c2c <RCC_GetPCLK1Value>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000b32:	fb02 f303 	mul.w	r3, r2, r3
 8000b36:	0a5b      	lsrs	r3, r3, #9
 8000b38:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <I2C_Init+0x168>)
 8000b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8000b3e:	09db      	lsrs	r3, r3, #7
 8000b40:	b2db      	uxtb	r3, r3
 8000b42:	3301      	adds	r3, #1
 8000b44:	72fb      	strb	r3, [r7, #11]
	}

	pI2CHandle->pI2Cx->TRISE = (trise & 0x3F);
 8000b46:	7afa      	ldrb	r2, [r7, #11]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8000b50:	621a      	str	r2, [r3, #32]

}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	431bde83 	.word	0x431bde83
 8000b60:	000186a0 	.word	0x000186a0
 8000b64:	00044b83 	.word	0x00044b83

08000b68 <I2C_MasterSendData>:
/*
 * Data send and receive
 */

void I2C_MasterSendData(I2C_Handle_t *pI2CHandle, uint8_t *pTxbuffer, uint32_t Len, uint8_t SlaveAddr)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	60f8      	str	r0, [r7, #12]
 8000b70:	60b9      	str	r1, [r7, #8]
 8000b72:	607a      	str	r2, [r7, #4]
 8000b74:	70fb      	strb	r3, [r7, #3]
	//1. GEnerate the START condition
	I2C_GenerateStartCondition(pI2CHandle->pI2Cx);
 8000b76:	68fb      	ldr	r3, [r7, #12]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f7ff fea0 	bl	80008c0 <I2C_GenerateStartCondition>

	//2. Confirm that start generation is completed by checking the SB flag in the SR1
	// Note: until SB is cleared SCL will be stretched (pulled to LOW)
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_SB)));
 8000b80:	bf00      	nop
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	2101      	movs	r1, #1
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f000 f8d0 	bl	8000d2e <I2C_GetFlagStatus>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d0f6      	beq.n	8000b82 <I2C_MasterSendData+0x1a>

	//3. Send the address of the slave with r/nw bit set to w(0) (total 8 bits)
	I2C_ExecuteAddressPhaseWrite(pI2CHandle->pI2Cx,SlaveAddr);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	78fa      	ldrb	r2, [r7, #3]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff fe9f 	bl	80008e0 <I2C_ExecuteAddressPhaseWrite>

	//4. confirm that address phase is completed by checking the ADDR flag in the SR1
	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_ADDR)));
 8000ba2:	bf00      	nop
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2102      	movs	r1, #2
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 f8bf 	bl	8000d2e <I2C_GetFlagStatus>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0f6      	beq.n	8000ba4 <I2C_MasterSendData+0x3c>


	//5. Clear the ADDR flag according to its software sequence
	// Note: until ADDR is cleared SCL will be stretched (pulled to LOW)
	I2C_ClearADDRFlag(pI2CHandle->pI2Cx);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f7ff fea6 	bl	800090c <I2C_ClearADDRFlag>

	//6. Sen the data until Len becomes 0

	while(Len > 0)
 8000bc0:	e014      	b.n	8000bec <I2C_MasterSendData+0x84>
	{
		while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE))); //wait till TXE is set
 8000bc2:	bf00      	nop
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	2180      	movs	r1, #128	@ 0x80
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f000 f8af 	bl	8000d2e <I2C_GetFlagStatus>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d0f6      	beq.n	8000bc4 <I2C_MasterSendData+0x5c>
		pI2CHandle->pI2Cx->DR = *pTxbuffer;
 8000bd6:	68bb      	ldr	r3, [r7, #8]
 8000bd8:	781a      	ldrb	r2, [r3, #0]
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	611a      	str	r2, [r3, #16]
		pTxbuffer++;
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	3301      	adds	r3, #1
 8000be4:	60bb      	str	r3, [r7, #8]
		Len--;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	3b01      	subs	r3, #1
 8000bea:	607b      	str	r3, [r7, #4]
	while(Len > 0)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d1e7      	bne.n	8000bc2 <I2C_MasterSendData+0x5a>

	//7. When Len becomes zero wait for TXE=1 and BTF=1 before generating the STOP condition
	// Note TXE=1 BTF=1 means that both SR and DR are empty and next transmission should begin
	// When BTF=1 SCL will be stretched (pulled to LOW)

	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_TXE))); //wait till TXE is set
 8000bf2:	bf00      	nop
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2180      	movs	r1, #128	@ 0x80
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f000 f897 	bl	8000d2e <I2C_GetFlagStatus>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d0f6      	beq.n	8000bf4 <I2C_MasterSendData+0x8c>

	while(! (I2C_GetFlagStatus(pI2CHandle->pI2Cx, I2C_FLAG_BTF))); //wait till BTF is set
 8000c06:	bf00      	nop
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	2104      	movs	r1, #4
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f000 f88d 	bl	8000d2e <I2C_GetFlagStatus>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d0f6      	beq.n	8000c08 <I2C_MasterSendData+0xa0>

	//8. generate STOP condigiton and master need not to wait for the completion of stop condition
	// Note: generating STOP, automatically clears the BTF
	I2C_GenerateStopCondition(pI2CHandle->pI2Cx);
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fe84 	bl	800092c <I2C_GenerateStopCondition>

}
 8000c24:	bf00      	nop
 8000c26:	3710      	adds	r7, #16
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <RCC_GetPCLK1Value>:




uint32_t RCC_GetPCLK1Value()
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;

	uint8_t clksrc, temp,ahbp, temp2, apb1;

	clksrc = ((RCC->CFGR >> 2) & 0x3);
 8000c32:	4b26      	ldr	r3, [pc, #152]	@ (8000ccc <RCC_GetPCLK1Value+0xa0>)
 8000c34:	689b      	ldr	r3, [r3, #8]
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	b2db      	uxtb	r3, r3
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 8000c40:	7a7b      	ldrb	r3, [r7, #9]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000;  // HSI clock
 8000c46:	4b22      	ldr	r3, [pc, #136]	@ (8000cd0 <RCC_GetPCLK1Value+0xa4>)
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	e00b      	b.n	8000c64 <RCC_GetPCLK1Value+0x38>

	}else if(clksrc == 1)
 8000c4c:	7a7b      	ldrb	r3, [r7, #9]
 8000c4e:	2b01      	cmp	r3, #1
 8000c50:	d102      	bne.n	8000c58 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000;  // HSI clock
 8000c52:	4b20      	ldr	r3, [pc, #128]	@ (8000cd4 <RCC_GetPCLK1Value+0xa8>)
 8000c54:	60fb      	str	r3, [r7, #12]
 8000c56:	e005      	b.n	8000c64 <RCC_GetPCLK1Value+0x38>
	}else if(clksrc == 2)
 8000c58:	7a7b      	ldrb	r3, [r7, #9]
 8000c5a:	2b02      	cmp	r3, #2
 8000c5c:	d102      	bne.n	8000c64 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLOutputClock();
 8000c5e:	f000 f83f 	bl	8000ce0 <RCC_GetPLLOutputClock>
 8000c62:	60f8      	str	r0, [r7, #12]
	}


	// AHB
	temp = ((RCC->CFGR >> 4) & 0xF);
 8000c64:	4b19      	ldr	r3, [pc, #100]	@ (8000ccc <RCC_GetPCLK1Value+0xa0>)
 8000c66:	689b      	ldr	r3, [r3, #8]
 8000c68:	091b      	lsrs	r3, r3, #4
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	f003 030f 	and.w	r3, r3, #15
 8000c70:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000c72:	7a3b      	ldrb	r3, [r7, #8]
 8000c74:	2b07      	cmp	r3, #7
 8000c76:	d802      	bhi.n	8000c7e <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	72fb      	strb	r3, [r7, #11]
 8000c7c:	e005      	b.n	8000c8a <RCC_GetPCLK1Value+0x5e>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000c7e:	7a3b      	ldrb	r3, [r7, #8]
 8000c80:	3b08      	subs	r3, #8
 8000c82:	4a15      	ldr	r2, [pc, #84]	@ (8000cd8 <RCC_GetPCLK1Value+0xac>)
 8000c84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c88:	72fb      	strb	r3, [r7, #11]
	}


	// ABP1
	temp2 = ((RCC->CFGR >> 10) & 0x7);
 8000c8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ccc <RCC_GetPCLK1Value+0xa0>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	0a9b      	lsrs	r3, r3, #10
 8000c90:	b2db      	uxtb	r3, r3
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	71fb      	strb	r3, [r7, #7]

	if(temp2 < 4)
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d802      	bhi.n	8000ca4 <RCC_GetPCLK1Value+0x78>
	{
		apb1 = 1;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	72bb      	strb	r3, [r7, #10]
 8000ca2:	e005      	b.n	8000cb0 <RCC_GetPCLK1Value+0x84>
	}
	else
	{
		apb1 = APB1_PreScaler[temp-4];
 8000ca4:	7a3b      	ldrb	r3, [r7, #8]
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	4a0c      	ldr	r2, [pc, #48]	@ (8000cdc <RCC_GetPCLK1Value+0xb0>)
 8000caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cae:	72bb      	strb	r3, [r7, #10]

	}


	pclk1 = ((SystemClk / ahbp) / apb1);
 8000cb0:	7afb      	ldrb	r3, [r7, #11]
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	fbb2 f2f3 	udiv	r2, r2, r3
 8000cb8:	7abb      	ldrb	r3, [r7, #10]
 8000cba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cbe:	603b      	str	r3, [r7, #0]
	return pclk1;
 8000cc0:	683b      	ldr	r3, [r7, #0]
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800
 8000cd0:	00f42400 	.word	0x00f42400
 8000cd4:	007a1200 	.word	0x007a1200
 8000cd8:	20000020 	.word	0x20000020
 8000cdc:	20000030 	.word	0x20000030

08000ce0 <RCC_GetPLLOutputClock>:

uint32_t RCC_GetPLLOutputClock(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
	return 0;
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr

08000cf0 <I2C_PeripheralControl>:

void I2C_PeripheralControl(I2C_RegDef_t *pI2Cx, uint8_t EnOrDi)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
 8000cf8:	460b      	mov	r3, r1
 8000cfa:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000cfc:	78fb      	ldrb	r3, [r7, #3]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d106      	bne.n	8000d10 <I2C_PeripheralControl+0x20>
	{
		pI2Cx->CR1 |= (1 << I2C_CR1_PE);
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f043 0201 	orr.w	r2, r3, #1
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	601a      	str	r2, [r3, #0]
	{
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
	}


}
 8000d0e:	e008      	b.n	8000d22 <I2C_PeripheralControl+0x32>
	}else if(EnOrDi == DISABLE)
 8000d10:	78fb      	ldrb	r3, [r7, #3]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d105      	bne.n	8000d22 <I2C_PeripheralControl+0x32>
		pI2Cx->CR1 &= ~(1 << I2C_CR1_PE);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f023 0201 	bic.w	r2, r3, #1
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	601a      	str	r2, [r3, #0]
}
 8000d22:	bf00      	nop
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <I2C_GetFlagStatus>:

}


uint8_t I2C_GetFlagStatus(I2C_RegDef_t *pI2Cx, uint32_t FlagName)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
 8000d36:	6039      	str	r1, [r7, #0]
	if(pI2Cx->SR1 & FlagName)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	695a      	ldr	r2, [r3, #20]
 8000d3c:	683b      	ldr	r3, [r7, #0]
 8000d3e:	4013      	ands	r3, r2
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <I2C_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e000      	b.n	8000d4a <I2C_GetFlagStatus+0x1c>

	}
	return FLAG_RESET;
 8000d48:	2300      	movs	r3, #0
}
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	370c      	adds	r7, #12
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
	...

08000d58 <__libc_init_array>:
 8000d58:	b570      	push	{r4, r5, r6, lr}
 8000d5a:	4d0d      	ldr	r5, [pc, #52]	@ (8000d90 <__libc_init_array+0x38>)
 8000d5c:	4c0d      	ldr	r4, [pc, #52]	@ (8000d94 <__libc_init_array+0x3c>)
 8000d5e:	1b64      	subs	r4, r4, r5
 8000d60:	10a4      	asrs	r4, r4, #2
 8000d62:	2600      	movs	r6, #0
 8000d64:	42a6      	cmp	r6, r4
 8000d66:	d109      	bne.n	8000d7c <__libc_init_array+0x24>
 8000d68:	4d0b      	ldr	r5, [pc, #44]	@ (8000d98 <__libc_init_array+0x40>)
 8000d6a:	4c0c      	ldr	r4, [pc, #48]	@ (8000d9c <__libc_init_array+0x44>)
 8000d6c:	f000 f818 	bl	8000da0 <_init>
 8000d70:	1b64      	subs	r4, r4, r5
 8000d72:	10a4      	asrs	r4, r4, #2
 8000d74:	2600      	movs	r6, #0
 8000d76:	42a6      	cmp	r6, r4
 8000d78:	d105      	bne.n	8000d86 <__libc_init_array+0x2e>
 8000d7a:	bd70      	pop	{r4, r5, r6, pc}
 8000d7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d80:	4798      	blx	r3
 8000d82:	3601      	adds	r6, #1
 8000d84:	e7ee      	b.n	8000d64 <__libc_init_array+0xc>
 8000d86:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d8a:	4798      	blx	r3
 8000d8c:	3601      	adds	r6, #1
 8000d8e:	e7f2      	b.n	8000d76 <__libc_init_array+0x1e>
 8000d90:	08000dc0 	.word	0x08000dc0
 8000d94:	08000dc0 	.word	0x08000dc0
 8000d98:	08000dc0 	.word	0x08000dc0
 8000d9c:	08000dc4 	.word	0x08000dc4

08000da0 <_init>:
 8000da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000da2:	bf00      	nop
 8000da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000da6:	bc08      	pop	{r3}
 8000da8:	469e      	mov	lr, r3
 8000daa:	4770      	bx	lr

08000dac <_fini>:
 8000dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000dae:	bf00      	nop
 8000db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000db2:	bc08      	pop	{r3}
 8000db4:	469e      	mov	lr, r3
 8000db6:	4770      	bx	lr
